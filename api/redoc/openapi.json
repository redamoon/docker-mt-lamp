{
  "components": {
    "parameters": {
      "asset_dateField": {
        "description": "Specifies the field name to be used as a date field for filtering. (new in v3)",
        "in": "query",
        "name": "dateField",
        "schema": {
          "default": "created_on",
          "type": "string"
        }
      },
      "asset_dateFrom": {
        "description": "The start date to filtering. Specify in \"YYYY-MM-DD\" format. (new in v3)",
        "in": "query",
        "name": "dateFrom",
        "schema": {
          "type": "string"
        }
      },
      "asset_dateTo": {
        "description": "The end date to filtering. Specify in \"YYYY-MM-DD\" format. (new in v3)",
        "in": "query",
        "name": "dateTo",
        "schema": {
          "type": "string"
        }
      },
      "asset_excludeIds": {
        "description": "The comma separated ID list of assets to exclude from result.",
        "in": "query",
        "name": "excludeIds",
        "schema": {
          "type": "string"
        }
      },
      "asset_fields": {
        "description": "The field list to retrieve as part of the asset resource. That list should be separated by comma. If this parameter is not specified, All fields will be returned.",
        "in": "query",
        "name": "fields",
        "schema": {
          "type": "string"
        }
      },
      "asset_includeIds": {
        "description": "The comma separated ID list of assets to include to result.",
        "in": "query",
        "name": "includeIds",
        "schema": {
          "type": "string"
        }
      },
      "asset_limit": {
        "description": "Maximum number of assets to retrieve.\n\n**Default**: 10",
        "in": "query",
        "name": "limit",
        "schema": {
          "default": "10",
          "type": "integer"
        }
      },
      "asset_offset": {
        "description": "0-indexed offset.\n\n**Default**: 0",
        "in": "query",
        "name": "offset",
        "schema": {
          "default": "0",
          "type": "integer"
        }
      },
      "asset_search": {
        "description": "Search query.",
        "in": "query",
        "name": "search",
        "schema": {
          "type": "string"
        }
      },
      "asset_searchFields": {
        "description": "The comma separated field name list to search.\n\n**Default**: label",
        "in": "query",
        "name": "searchFields",
        "schema": {
          "default": "label",
          "type": "string"
        }
      },
      "asset_sortBy": {
        "description": "\n\n**Default**: created_on",
        "in": "query",
        "name": "sortBy",
        "schema": {
          "default": "created_on",
          "type": "string"
        }
      },
      "asset_sortOrder": {
        "description": "#### descend\n\nReturn assets in descending order.\n\n#### ascend\n\nReturn assets in ascending order.\n\n\n\n**Default**: descend",
        "in": "query",
        "name": "sortOrder",
        "schema": {
          "default": "descend",
          "enum": [
            "descend",
            "ascend"
          ],
          "type": "string"
        }
      },
      "category_dateField": {
        "description": "Specifies the field name to be used as a date field for filtering. (new in v3)",
        "in": "query",
        "name": "dateField",
        "schema": {
          "default": "created_on",
          "type": "string"
        }
      },
      "category_dateFrom": {
        "description": "The start date to filtering. Specify in \"YYYY-MM-DD\" format. (new in v3)",
        "in": "query",
        "name": "dateFrom",
        "schema": {
          "type": "string"
        }
      },
      "category_dateTo": {
        "description": "The end date to filtering. Specify in \"YYYY-MM-DD\" format. (new in v3)",
        "in": "query",
        "name": "dateTo",
        "schema": {
          "type": "string"
        }
      },
      "category_excludeIds": {
        "description": "The comma separated ID list of categories to exclude from result.",
        "in": "query",
        "name": "excludeIds",
        "schema": {
          "type": "string"
        }
      },
      "category_fields": {
        "description": "The field list to retrieve as part of the category resource. That list should be separated by comma. If this parameter is not specified, All fields will be returned.",
        "in": "query",
        "name": "fields",
        "schema": {
          "type": "string"
        }
      },
      "category_includeIds": {
        "description": "The comma separated ID list of categories to include to result.",
        "in": "query",
        "name": "includeIds",
        "schema": {
          "type": "string"
        }
      },
      "category_limit": {
        "description": "Maximum number of categories to retrieve.\n\n**Default**: 10",
        "in": "query",
        "name": "limit",
        "schema": {
          "default": "10",
          "type": "integer"
        }
      },
      "category_offset": {
        "description": "0-indexed offset.\n\n**Default**: 0",
        "in": "query",
        "name": "offset",
        "schema": {
          "default": "0",
          "type": "integer"
        }
      },
      "category_search": {
        "description": "Search query.",
        "in": "query",
        "name": "search",
        "schema": {
          "type": "string"
        }
      },
      "category_searchFields": {
        "description": "The comma separated field name list to search.\n\n**Default**: label,basename",
        "in": "query",
        "name": "searchFields",
        "schema": {
          "default": "label,basename",
          "type": "string"
        }
      },
      "category_set_dateField": {
        "description": "Specifies the field name to be used as a date field for filtering. (new in v3)",
        "in": "query",
        "name": "dateField",
        "schema": {
          "default": "created_on",
          "type": "string"
        }
      },
      "category_set_dateFrom": {
        "description": "The start date to filtering. Specify in \"YYYY-MM-DD\" format. (new in v3)",
        "in": "query",
        "name": "dateFrom",
        "schema": {
          "type": "string"
        }
      },
      "category_set_dateTo": {
        "description": "The end date to filtering. Specify in \"YYYY-MM-DD\" format. (new in v3)",
        "in": "query",
        "name": "dateTo",
        "schema": {
          "type": "string"
        }
      },
      "category_set_excludeIds": {
        "description": "The comma separated ID list of category_sets to exclude from result.",
        "in": "query",
        "name": "excludeIds",
        "schema": {
          "type": "string"
        }
      },
      "category_set_fields": {
        "description": "The field list to retrieve as part of the category_set resource. That list should be separated by comma. If this parameter is not specified, All fields will be returned.",
        "in": "query",
        "name": "fields",
        "schema": {
          "type": "string"
        }
      },
      "category_set_includeIds": {
        "description": "The comma separated ID list of category_sets to include to result.",
        "in": "query",
        "name": "includeIds",
        "schema": {
          "type": "string"
        }
      },
      "category_set_limit": {
        "description": "Maximum number of category_sets to retrieve.\n\n**Default**: 25",
        "in": "query",
        "name": "limit",
        "schema": {
          "default": "25",
          "type": "integer"
        }
      },
      "category_set_offset": {
        "description": "0-indexed offset.\n\n**Default**: 0",
        "in": "query",
        "name": "offset",
        "schema": {
          "default": "0",
          "type": "integer"
        }
      },
      "category_set_search": {
        "description": "Search query.",
        "in": "query",
        "name": "search",
        "schema": {
          "type": "string"
        }
      },
      "category_set_searchFields": {
        "description": "The comma separated field name list to search.\n\n**Default**: name",
        "in": "query",
        "name": "searchFields",
        "schema": {
          "default": "name",
          "type": "string"
        }
      },
      "category_set_sortBy": {
        "description": "\n\n**Default**: name",
        "in": "query",
        "name": "sortBy",
        "schema": {
          "default": "name",
          "type": "string"
        }
      },
      "category_set_sortOrder": {
        "description": "#### descend\n\nReturn category_sets in descending order.\n\n#### ascend\n\nReturn category_sets in ascending order.\n\n\n\n**Default**: ascend",
        "in": "query",
        "name": "sortOrder",
        "schema": {
          "default": "ascend",
          "enum": [
            "descend",
            "ascend"
          ],
          "type": "string"
        }
      },
      "category_sortBy": {
        "description": "\n\n**Default**: user_custom",
        "in": "query",
        "name": "sortBy",
        "schema": {
          "default": "user_custom",
          "type": "string"
        }
      },
      "category_sortOrder": {
        "description": "#### descend\n\nReturn categories in descending order.\n\n#### ascend\n\nReturn categories in ascending order.\n\n\n\n**Default**: descend",
        "in": "query",
        "name": "sortOrder",
        "schema": {
          "default": "descend",
          "enum": [
            "descend",
            "ascend"
          ],
          "type": "string"
        }
      },
      "comment_dateField": {
        "description": "Specifies the field name to be used as a date field for filtering. (new in v3)",
        "in": "query",
        "name": "dateField",
        "schema": {
          "default": "created_on",
          "type": "string"
        }
      },
      "comment_dateFrom": {
        "description": "The start date to filtering. Specify in \"YYYY-MM-DD\" format. (new in v3)",
        "in": "query",
        "name": "dateFrom",
        "schema": {
          "type": "string"
        }
      },
      "comment_dateTo": {
        "description": "The end date to filtering. Specify in \"YYYY-MM-DD\" format. (new in v3)",
        "in": "query",
        "name": "dateTo",
        "schema": {
          "type": "string"
        }
      },
      "comment_excludeIds": {
        "description": "The comma separated ID list of comments to exclude from result.",
        "in": "query",
        "name": "excludeIds",
        "schema": {
          "type": "string"
        }
      },
      "comment_fields": {
        "description": "The field list to retrieve as part of the comment resource. That list should be separated by comma. If this parameter is not specified, All fields will be returned.",
        "in": "query",
        "name": "fields",
        "schema": {
          "type": "string"
        }
      },
      "comment_includeIds": {
        "description": "The comma separated ID list of comments to include to result.",
        "in": "query",
        "name": "includeIds",
        "schema": {
          "type": "string"
        }
      },
      "comment_limit": {
        "description": "Maximum number of comments to retrieve.\n\n**Default**: 10",
        "in": "query",
        "name": "limit",
        "schema": {
          "default": "10",
          "type": "integer"
        }
      },
      "comment_offset": {
        "description": "0-indexed offset.\n\n**Default**: 0",
        "in": "query",
        "name": "offset",
        "schema": {
          "default": "0",
          "type": "integer"
        }
      },
      "comment_search": {
        "description": "Search query.",
        "in": "query",
        "name": "search",
        "schema": {
          "type": "string"
        }
      },
      "comment_searchFields": {
        "description": "The comma separated field name list to search.\n\n**Default**: body",
        "in": "query",
        "name": "searchFields",
        "schema": {
          "default": "body",
          "type": "string"
        }
      },
      "comment_sortBy": {
        "description": "\n\n**Default**: id",
        "in": "query",
        "name": "sortBy",
        "schema": {
          "default": "id",
          "type": "string"
        }
      },
      "comment_sortOrder": {
        "description": "#### descend\n\nReturn comments in descending order.\n\n#### ascend\n\nReturn comments in ascending order.\n\n\n\n**Default**: descend",
        "in": "query",
        "name": "sortOrder",
        "schema": {
          "default": "descend",
          "enum": [
            "descend",
            "ascend"
          ],
          "type": "string"
        }
      },
      "content_data_dateField": {
        "description": "Specifies the field name to be used as a date field for filtering. (new in v3)",
        "in": "query",
        "name": "dateField",
        "schema": {
          "default": "created_on",
          "type": "string"
        }
      },
      "content_data_dateFrom": {
        "description": "The start date to filtering. Specify in \"YYYY-MM-DD\" format. (new in v3)",
        "in": "query",
        "name": "dateFrom",
        "schema": {
          "type": "string"
        }
      },
      "content_data_dateTo": {
        "description": "The end date to filtering. Specify in \"YYYY-MM-DD\" format. (new in v3)",
        "in": "query",
        "name": "dateTo",
        "schema": {
          "type": "string"
        }
      },
      "content_data_excludeIds": {
        "description": "The comma separated ID list of content_data to exclude from result.",
        "in": "query",
        "name": "excludeIds",
        "schema": {
          "type": "string"
        }
      },
      "content_data_fields": {
        "description": "The field list to retrieve as part of the content_data resource. That list should be separated by comma. If this parameter is not specified, All fields will be returned.",
        "in": "query",
        "name": "fields",
        "schema": {
          "type": "string"
        }
      },
      "content_data_includeIds": {
        "description": "The comma separated ID list of content_data to include to result.",
        "in": "query",
        "name": "includeIds",
        "schema": {
          "type": "string"
        }
      },
      "content_data_limit": {
        "description": "Maximum number of content_data to retrieve.\n\n**Default**: 10",
        "in": "query",
        "name": "limit",
        "schema": {
          "default": "10",
          "type": "integer"
        }
      },
      "content_data_offset": {
        "description": "0-indexed offset.\n\n**Default**: 0",
        "in": "query",
        "name": "offset",
        "schema": {
          "default": "0",
          "type": "integer"
        }
      },
      "content_data_search": {
        "description": "Search query.",
        "in": "query",
        "name": "search",
        "schema": {
          "type": "string"
        }
      },
      "content_data_searchFields": {
        "description": "The comma separated field name list to search.\n\n**Default**: identifier",
        "in": "query",
        "name": "searchFields",
        "schema": {
          "default": "identifier",
          "type": "string"
        }
      },
      "content_data_sortBy": {
        "description": "\n\n**Default**: modified_on",
        "in": "query",
        "name": "sortBy",
        "schema": {
          "default": "modified_on",
          "type": "string"
        }
      },
      "content_data_sortOrder": {
        "description": "#### descend\n\nReturn content_data in descending order.\n\n#### ascend\n\nReturn content_data in ascending order.\n\n\n\n**Default**: descend",
        "in": "query",
        "name": "sortOrder",
        "schema": {
          "default": "descend",
          "enum": [
            "descend",
            "ascend"
          ],
          "type": "string"
        }
      },
      "content_field_dateField": {
        "description": "Specifies the field name to be used as a date field for filtering. (new in v3)",
        "in": "query",
        "name": "dateField",
        "schema": {
          "default": "created_on",
          "type": "string"
        }
      },
      "content_field_dateFrom": {
        "description": "The start date to filtering. Specify in \"YYYY-MM-DD\" format. (new in v3)",
        "in": "query",
        "name": "dateFrom",
        "schema": {
          "type": "string"
        }
      },
      "content_field_dateTo": {
        "description": "The end date to filtering. Specify in \"YYYY-MM-DD\" format. (new in v3)",
        "in": "query",
        "name": "dateTo",
        "schema": {
          "type": "string"
        }
      },
      "content_field_excludeIds": {
        "description": "The comma separated ID list of content_fields to exclude from result.",
        "in": "query",
        "name": "excludeIds",
        "schema": {
          "type": "string"
        }
      },
      "content_field_fields": {
        "description": "The field list to retrieve as part of the content_field resource. That list should be separated by comma. If this parameter is not specified, All fields will be returned.",
        "in": "query",
        "name": "fields",
        "schema": {
          "type": "string"
        }
      },
      "content_field_includeIds": {
        "description": "The comma separated ID list of content_fields to include to result.",
        "in": "query",
        "name": "includeIds",
        "schema": {
          "type": "string"
        }
      },
      "content_field_limit": {
        "description": "Maximum number of content_fields to retrieve.\n\n**Default**: 10",
        "in": "query",
        "name": "limit",
        "schema": {
          "default": "10",
          "type": "integer"
        }
      },
      "content_field_offset": {
        "description": "0-indexed offset.\n\n**Default**: 0",
        "in": "query",
        "name": "offset",
        "schema": {
          "default": "0",
          "type": "integer"
        }
      },
      "content_field_search": {
        "description": "Search query.",
        "in": "query",
        "name": "search",
        "schema": {
          "type": "string"
        }
      },
      "content_field_searchFields": {
        "description": "The comma separated field name list to search.\n\n**Default**: label,description",
        "in": "query",
        "name": "searchFields",
        "schema": {
          "default": "label,description",
          "type": "string"
        }
      },
      "content_field_sortBy": {
        "description": "\n\n**Default**: user_custom",
        "in": "query",
        "name": "sortBy",
        "schema": {
          "default": "user_custom",
          "type": "string"
        }
      },
      "content_field_sortOrder": {
        "description": "#### descend\n\nReturn content_fields in descending order.\n\n#### ascend\n\nReturn content_fields in ascending order.\n\n\n\n**Default**: ascend",
        "in": "query",
        "name": "sortOrder",
        "schema": {
          "default": "ascend",
          "enum": [
            "descend",
            "ascend"
          ],
          "type": "string"
        }
      },
      "content_type_dateField": {
        "description": "Specifies the field name to be used as a date field for filtering. (new in v3)",
        "in": "query",
        "name": "dateField",
        "schema": {
          "default": "created_on",
          "type": "string"
        }
      },
      "content_type_dateFrom": {
        "description": "The start date to filtering. Specify in \"YYYY-MM-DD\" format. (new in v3)",
        "in": "query",
        "name": "dateFrom",
        "schema": {
          "type": "string"
        }
      },
      "content_type_dateTo": {
        "description": "The end date to filtering. Specify in \"YYYY-MM-DD\" format. (new in v3)",
        "in": "query",
        "name": "dateTo",
        "schema": {
          "type": "string"
        }
      },
      "content_type_excludeIds": {
        "description": "The comma separated ID list of content_types to exclude from result.",
        "in": "query",
        "name": "excludeIds",
        "schema": {
          "type": "string"
        }
      },
      "content_type_fields": {
        "description": "The field list to retrieve as part of the content_type resource. That list should be separated by comma. If this parameter is not specified, All fields will be returned.",
        "in": "query",
        "name": "fields",
        "schema": {
          "type": "string"
        }
      },
      "content_type_includeIds": {
        "description": "The comma separated ID list of content_types to include to result.",
        "in": "query",
        "name": "includeIds",
        "schema": {
          "type": "string"
        }
      },
      "content_type_limit": {
        "description": "Maximum number of content_types to retrieve.\n\n**Default**: 10",
        "in": "query",
        "name": "limit",
        "schema": {
          "default": "10",
          "type": "integer"
        }
      },
      "content_type_offset": {
        "description": "0-indexed offset.\n\n**Default**: 0",
        "in": "query",
        "name": "offset",
        "schema": {
          "default": "0",
          "type": "integer"
        }
      },
      "content_type_search": {
        "description": "Search query.",
        "in": "query",
        "name": "search",
        "schema": {
          "type": "string"
        }
      },
      "content_type_searchFields": {
        "description": "The comma separated field name list to search.\n\n**Default**: name,description",
        "in": "query",
        "name": "searchFields",
        "schema": {
          "default": "name,description",
          "type": "string"
        }
      },
      "content_type_sortBy": {
        "description": "\n\n**Default**: id",
        "in": "query",
        "name": "sortBy",
        "schema": {
          "default": "id",
          "type": "string"
        }
      },
      "content_type_sortOrder": {
        "description": "#### descend\n\nReturn content_types in descending order.\n\n#### ascend\n\nReturn content_types in ascending order.\n\n\n\n**Default**: ascend",
        "in": "query",
        "name": "sortOrder",
        "schema": {
          "default": "ascend",
          "enum": [
            "descend",
            "ascend"
          ],
          "type": "string"
        }
      },
      "entry_dateField": {
        "description": "Specifies the field name to be used as a date field for filtering. (new in v3)",
        "in": "query",
        "name": "dateField",
        "schema": {
          "default": "created_on",
          "type": "string"
        }
      },
      "entry_dateFrom": {
        "description": "The start date to filtering. Specify in \"YYYY-MM-DD\" format. (new in v3)",
        "in": "query",
        "name": "dateFrom",
        "schema": {
          "type": "string"
        }
      },
      "entry_dateTo": {
        "description": "The end date to filtering. Specify in \"YYYY-MM-DD\" format. (new in v3)",
        "in": "query",
        "name": "dateTo",
        "schema": {
          "type": "string"
        }
      },
      "entry_excludeIds": {
        "description": "The comma separated ID list of entries to exclude from result.",
        "in": "query",
        "name": "excludeIds",
        "schema": {
          "type": "string"
        }
      },
      "entry_fields": {
        "description": "The field list to retrieve as part of the entry resource. That list should be separated by comma. If this parameter is not specified, All fields will be returned.",
        "in": "query",
        "name": "fields",
        "schema": {
          "type": "string"
        }
      },
      "entry_includeIds": {
        "description": "The comma separated ID list of entries to include to result.",
        "in": "query",
        "name": "includeIds",
        "schema": {
          "type": "string"
        }
      },
      "entry_limit": {
        "description": "Maximum number of entries to retrieve.\n\n**Default**: 10",
        "in": "query",
        "name": "limit",
        "schema": {
          "default": "10",
          "type": "integer"
        }
      },
      "entry_maxComments": {
        "description": "This is an optional parameter. Maximum number of comments to retrieve as part of the entries resource. If this parameter is not supplied, no comments will be returned.",
        "in": "query",
        "name": "maxComments",
        "schema": {
          "type": "integer"
        }
      },
      "entry_maxTrackbacks": {
        "description": "This is an optional parameter. Maximum number of received trackbacks to retrieve as part of the entries resource. If this parameter is not supplied, no trackbacks will be returned.",
        "in": "query",
        "name": "maxTrackbacks",
        "schema": {
          "type": "integer"
        }
      },
      "entry_no_text_filter": {
        "description": "If you want to fetch the raw text, set to '1'. New in v2\n",
        "in": "query",
        "name": "noTextFilter",
        "schema": {
          "enum": [
            0,
            1
          ],
          "type": "integer"
        }
      },
      "entry_offset": {
        "description": "0-indexed offset.\n\n**Default**: 0",
        "in": "query",
        "name": "offset",
        "schema": {
          "default": "0",
          "type": "integer"
        }
      },
      "entry_search": {
        "description": "Search query.",
        "in": "query",
        "name": "search",
        "schema": {
          "type": "string"
        }
      },
      "entry_searchFields": {
        "description": "The comma separated field name list to search.\n\n**Default**: title,body,more,keywords,excerpt,basename",
        "in": "query",
        "name": "searchFields",
        "schema": {
          "default": "title,body,more,keywords,excerpt,basename",
          "type": "string"
        }
      },
      "entry_sortBy": {
        "description": "The field name for sort. You can specify one of following values\n- authored_on\n- title\n- created_on\n- modified_on\n\n\n**Default**: authored_on",
        "in": "query",
        "name": "sortBy",
        "schema": {
          "default": "authored_on",
          "enum": [
            "authored_on",
            "title",
            "created_on",
            "modified_on"
          ],
          "type": "string"
        }
      },
      "entry_sortOrder": {
        "description": "#### descend\n\nReturn entries in descending order.\n\n#### ascend\n\nReturn entries in ascending order.\n\n\n\n**Default**: descend",
        "in": "query",
        "name": "sortOrder",
        "schema": {
          "default": "descend",
          "enum": [
            "descend",
            "ascend"
          ],
          "type": "string"
        }
      },
      "entry_status": {
        "description": "Filter by container entry's status.\n\n#### Draft\n\nentry_status is 1.\n\n#### Publish\n\nentry_status is 2.\n\n#### Review\n\nentry_status is 3.\n\n#### Future\n\nentry_status is 4.\n\n#### Spam\n\nentry_status is 5.\n\n#### Unpublish\n\nentry_status is 6.\n",
        "in": "query",
        "name": "status",
        "schema": {
          "enum": [
            "Draft",
            "Publish",
            "Review",
            "Future",
            "Spam",
            "Unpublish"
          ],
          "type": "string"
        }
      },
      "field_dateField": {
        "description": "Specifies the field name to be used as a date field for filtering. (new in v3)",
        "in": "query",
        "name": "dateField",
        "schema": {
          "default": "created_on",
          "type": "string"
        }
      },
      "field_dateFrom": {
        "description": "The start date to filtering. Specify in \"YYYY-MM-DD\" format. (new in v3)",
        "in": "query",
        "name": "dateFrom",
        "schema": {
          "type": "string"
        }
      },
      "field_dateTo": {
        "description": "The end date to filtering. Specify in \"YYYY-MM-DD\" format. (new in v3)",
        "in": "query",
        "name": "dateTo",
        "schema": {
          "type": "string"
        }
      },
      "field_excludeIds": {
        "description": "The comma separated ID list of fields to exclude from result.",
        "in": "query",
        "name": "excludeIds",
        "schema": {
          "type": "string"
        }
      },
      "field_fields": {
        "description": "The field list to retrieve as part of the field resource. That list should be separated by comma. If this parameter is not specified, All fields will be returned.",
        "in": "query",
        "name": "fields",
        "schema": {
          "type": "string"
        }
      },
      "field_includeIds": {
        "description": "The comma separated ID list of fields to include to result.",
        "in": "query",
        "name": "includeIds",
        "schema": {
          "type": "string"
        }
      },
      "field_limit": {
        "description": "Maximum number of fields to retrieve.\n\n**Default**: 25",
        "in": "query",
        "name": "limit",
        "schema": {
          "default": "25",
          "type": "integer"
        }
      },
      "field_offset": {
        "description": "0-indexed offset.\n\n**Default**: 0",
        "in": "query",
        "name": "offset",
        "schema": {
          "default": "0",
          "type": "integer"
        }
      },
      "field_search": {
        "description": "Search query.",
        "in": "query",
        "name": "search",
        "schema": {
          "type": "string"
        }
      },
      "field_searchFields": {
        "description": "The comma separated field name list to search.\n\n**Default**: name,basename,description,tag",
        "in": "query",
        "name": "searchFields",
        "schema": {
          "default": "name,basename,description,tag",
          "type": "string"
        }
      },
      "field_sortBy": {
        "description": "\n\n**Default**: name",
        "in": "query",
        "name": "sortBy",
        "schema": {
          "default": "name",
          "type": "string"
        }
      },
      "field_sortOrder": {
        "description": "#### descend\n\nReturn fields in descending order.\n\n#### ascend\n\nReturn fields in ascending order.\n\n\n\n**Default**: ascend",
        "in": "query",
        "name": "sortOrder",
        "schema": {
          "default": "ascend",
          "enum": [
            "descend",
            "ascend"
          ],
          "type": "string"
        }
      },
      "folder_dateField": {
        "description": "Specifies the field name to be used as a date field for filtering. (new in v3)",
        "in": "query",
        "name": "dateField",
        "schema": {
          "default": "created_on",
          "type": "string"
        }
      },
      "folder_dateFrom": {
        "description": "The start date to filtering. Specify in \"YYYY-MM-DD\" format. (new in v3)",
        "in": "query",
        "name": "dateFrom",
        "schema": {
          "type": "string"
        }
      },
      "folder_dateTo": {
        "description": "The end date to filtering. Specify in \"YYYY-MM-DD\" format. (new in v3)",
        "in": "query",
        "name": "dateTo",
        "schema": {
          "type": "string"
        }
      },
      "folder_excludeIds": {
        "description": "The comma separated ID list of folders to exclude from result.",
        "in": "query",
        "name": "excludeIds",
        "schema": {
          "type": "string"
        }
      },
      "folder_fields": {
        "description": "The field list to retrieve as part of the folder resource. That list should be separated by comma. If this parameter is not specified, All fields will be returned.",
        "in": "query",
        "name": "fields",
        "schema": {
          "type": "string"
        }
      },
      "folder_includeIds": {
        "description": "The comma separated ID list of folders to include to result.",
        "in": "query",
        "name": "includeIds",
        "schema": {
          "type": "string"
        }
      },
      "folder_limit": {
        "description": "Maximum number of folders to retrieve.\n\n**Default**: 10",
        "in": "query",
        "name": "limit",
        "schema": {
          "default": "10",
          "type": "integer"
        }
      },
      "folder_offset": {
        "description": "0-indexed offset.\n\n**Default**: 0",
        "in": "query",
        "name": "offset",
        "schema": {
          "default": "0",
          "type": "integer"
        }
      },
      "folder_search": {
        "description": "Search query.",
        "in": "query",
        "name": "search",
        "schema": {
          "type": "string"
        }
      },
      "folder_searchFields": {
        "description": "The comma separated field name list to search.\n\n**Default**: label,basename",
        "in": "query",
        "name": "searchFields",
        "schema": {
          "default": "label,basename",
          "type": "string"
        }
      },
      "folder_sortBy": {
        "description": "\n\n**Default**: user_custom",
        "in": "query",
        "name": "sortBy",
        "schema": {
          "default": "user_custom",
          "type": "string"
        }
      },
      "folder_sortOrder": {
        "description": "#### descend\n\nReturn folders in descending order.\n\n#### ascend\n\nReturn folders in ascending order.\n\n\n\n**Default**: ascend",
        "in": "query",
        "name": "sortOrder",
        "schema": {
          "default": "ascend",
          "enum": [
            "descend",
            "ascend"
          ],
          "type": "string"
        }
      },
      "formatted_text_dateField": {
        "description": "Specifies the field name to be used as a date field for filtering. (new in v3)",
        "in": "query",
        "name": "dateField",
        "schema": {
          "default": "created_on",
          "type": "string"
        }
      },
      "formatted_text_dateFrom": {
        "description": "The start date to filtering. Specify in \"YYYY-MM-DD\" format. (new in v3)",
        "in": "query",
        "name": "dateFrom",
        "schema": {
          "type": "string"
        }
      },
      "formatted_text_dateTo": {
        "description": "The end date to filtering. Specify in \"YYYY-MM-DD\" format. (new in v3)",
        "in": "query",
        "name": "dateTo",
        "schema": {
          "type": "string"
        }
      },
      "formatted_text_excludeIds": {
        "description": "The comma separated ID list of formatted_texts to exclude from result.",
        "in": "query",
        "name": "excludeIds",
        "schema": {
          "type": "string"
        }
      },
      "formatted_text_fields": {
        "description": "The field list to retrieve as part of the formatted_text resource. That list should be separated by comma. If this parameter is not specified, All fields will be returned.",
        "in": "query",
        "name": "fields",
        "schema": {
          "type": "string"
        }
      },
      "formatted_text_includeIds": {
        "description": "The comma separated ID list of formatted_texts to include to result.",
        "in": "query",
        "name": "includeIds",
        "schema": {
          "type": "string"
        }
      },
      "formatted_text_limit": {
        "description": "Maximum number of formatted_texts to retrieve.\n\n**Default**: 10",
        "in": "query",
        "name": "limit",
        "schema": {
          "default": "10",
          "type": "integer"
        }
      },
      "formatted_text_offset": {
        "description": "0-indexed offset.\n\n**Default**: 0",
        "in": "query",
        "name": "offset",
        "schema": {
          "default": "0",
          "type": "integer"
        }
      },
      "formatted_text_search": {
        "description": "Search query.",
        "in": "query",
        "name": "search",
        "schema": {
          "type": "string"
        }
      },
      "formatted_text_searchFields": {
        "description": "The comma separated field name list to search.\n\n**Default**: label,text,description",
        "in": "query",
        "name": "searchFields",
        "schema": {
          "default": "label,text,description",
          "type": "string"
        }
      },
      "formatted_text_sortBy": {
        "description": "\n\n**Default**: created_on",
        "in": "query",
        "name": "sortBy",
        "schema": {
          "default": "created_on",
          "type": "string"
        }
      },
      "formatted_text_sortOrder": {
        "description": "#### descend\n\nReturn formatted_texts in descending order.\n\n#### ascend\n\nReturn formatted_texts in ascending order.\n\n\n\n**Default**: descend",
        "in": "query",
        "name": "sortOrder",
        "schema": {
          "default": "descend",
          "enum": [
            "descend",
            "ascend"
          ],
          "type": "string"
        }
      },
      "group_dateField": {
        "description": "Specifies the field name to be used as a date field for filtering. (new in v3)",
        "in": "query",
        "name": "dateField",
        "schema": {
          "default": "created_on",
          "type": "string"
        }
      },
      "group_dateFrom": {
        "description": "The start date to filtering. Specify in \"YYYY-MM-DD\" format. (new in v3)",
        "in": "query",
        "name": "dateFrom",
        "schema": {
          "type": "string"
        }
      },
      "group_dateTo": {
        "description": "The end date to filtering. Specify in \"YYYY-MM-DD\" format. (new in v3)",
        "in": "query",
        "name": "dateTo",
        "schema": {
          "type": "string"
        }
      },
      "group_excludeIds": {
        "description": "The comma separated ID list of groups to exclude from result.",
        "in": "query",
        "name": "excludeIds",
        "schema": {
          "type": "string"
        }
      },
      "group_fields": {
        "description": "The field list to retrieve as part of the group resource. That list should be separated by comma. If this parameter is not specified, All fields will be returned.",
        "in": "query",
        "name": "fields",
        "schema": {
          "type": "string"
        }
      },
      "group_includeIds": {
        "description": "The comma separated ID list of groups to include to result.",
        "in": "query",
        "name": "includeIds",
        "schema": {
          "type": "string"
        }
      },
      "group_limit": {
        "description": "Maximum number of groups to retrieve.\n\n**Default**: 25",
        "in": "query",
        "name": "limit",
        "schema": {
          "default": "25",
          "type": "integer"
        }
      },
      "group_offset": {
        "description": "0-indexed offset.\n\n**Default**: 0",
        "in": "query",
        "name": "offset",
        "schema": {
          "default": "0",
          "type": "integer"
        }
      },
      "group_search": {
        "description": "Search query.",
        "in": "query",
        "name": "search",
        "schema": {
          "type": "string"
        }
      },
      "group_searchFields": {
        "description": "The comma separated field name list to search.\n\n**Default**: name,displayName,description",
        "in": "query",
        "name": "searchFields",
        "schema": {
          "default": "name,displayName,description",
          "type": "string"
        }
      },
      "group_sortBy": {
        "description": "\n\n**Default**: name",
        "in": "query",
        "name": "sortBy",
        "schema": {
          "default": "name",
          "type": "string"
        }
      },
      "group_sortOrder": {
        "description": "#### descend\n\nReturn groups in descending order.\n\n#### ascend\n\nReturn groups in ascending order.\n\n\n\n**Default**: ascend",
        "in": "query",
        "name": "sortOrder",
        "schema": {
          "default": "ascend",
          "enum": [
            "descend",
            "ascend"
          ],
          "type": "string"
        }
      },
      "log_dateField": {
        "description": "Specifies the field name to be used as a date field for filtering. (new in v3)",
        "in": "query",
        "name": "dateField",
        "schema": {
          "default": "created_on",
          "type": "string"
        }
      },
      "log_dateFrom": {
        "description": "The start date to filtering. Specify in \"YYYY-MM-DD\" format. (new in v3)",
        "in": "query",
        "name": "dateFrom",
        "schema": {
          "type": "string"
        }
      },
      "log_dateTo": {
        "description": "The end date to filtering. Specify in \"YYYY-MM-DD\" format. (new in v3)",
        "in": "query",
        "name": "dateTo",
        "schema": {
          "type": "string"
        }
      },
      "log_excludeIds": {
        "description": "The comma separated ID list of logs to exclude from result.",
        "in": "query",
        "name": "excludeIds",
        "schema": {
          "type": "string"
        }
      },
      "log_fields": {
        "description": "The field list to retrieve as part of the log resource. That list should be separated by comma. If this parameter is not specified, All fields will be returned.",
        "in": "query",
        "name": "fields",
        "schema": {
          "type": "string"
        }
      },
      "log_includeIds": {
        "description": "The comma separated ID list of logs to include to result.",
        "in": "query",
        "name": "includeIds",
        "schema": {
          "type": "string"
        }
      },
      "log_limit": {
        "description": "Maximum number of logs to retrieve.\n\n**Default**: 25",
        "in": "query",
        "name": "limit",
        "schema": {
          "default": "25",
          "type": "integer"
        }
      },
      "log_offset": {
        "description": "0-indexed offset.\n\n**Default**: 0",
        "in": "query",
        "name": "offset",
        "schema": {
          "default": "0",
          "type": "integer"
        }
      },
      "log_search": {
        "description": "Search query.",
        "in": "query",
        "name": "search",
        "schema": {
          "type": "string"
        }
      },
      "log_searchFields": {
        "description": "The comma separated field name list to search.\n\n**Default**: message,ip",
        "in": "query",
        "name": "searchFields",
        "schema": {
          "default": "message,ip",
          "type": "string"
        }
      },
      "log_sortBy": {
        "description": "\n\n**Default**: created_on",
        "in": "query",
        "name": "sortBy",
        "schema": {
          "default": "created_on",
          "type": "string"
        }
      },
      "log_sortOrder": {
        "description": "#### descend\n\nReturn logs in descending order.\n\n#### ascend\n\nReturn logs in ascending order.\n\n\n\n**Default**: descend",
        "in": "query",
        "name": "sortOrder",
        "schema": {
          "default": "descend",
          "enum": [
            "descend",
            "ascend"
          ],
          "type": "string"
        }
      },
      "page_dateField": {
        "description": "Specifies the field name to be used as a date field for filtering. (new in v3)",
        "in": "query",
        "name": "dateField",
        "schema": {
          "default": "created_on",
          "type": "string"
        }
      },
      "page_dateFrom": {
        "description": "The start date to filtering. Specify in \"YYYY-MM-DD\" format. (new in v3)",
        "in": "query",
        "name": "dateFrom",
        "schema": {
          "type": "string"
        }
      },
      "page_dateTo": {
        "description": "The end date to filtering. Specify in \"YYYY-MM-DD\" format. (new in v3)",
        "in": "query",
        "name": "dateTo",
        "schema": {
          "type": "string"
        }
      },
      "page_excludeIds": {
        "description": "The comma separated ID list of pages to exclude from result.",
        "in": "query",
        "name": "excludeIds",
        "schema": {
          "type": "string"
        }
      },
      "page_fields": {
        "description": "The field list to retrieve as part of the page resource. That list should be separated by comma. If this parameter is not specified, All fields will be returned.",
        "in": "query",
        "name": "fields",
        "schema": {
          "type": "string"
        }
      },
      "page_includeIds": {
        "description": "The comma separated ID list of pages to include to result.",
        "in": "query",
        "name": "includeIds",
        "schema": {
          "type": "string"
        }
      },
      "page_limit": {
        "description": "Maximum number of pages to retrieve.\n\n**Default**: 10",
        "in": "query",
        "name": "limit",
        "schema": {
          "default": "10",
          "type": "integer"
        }
      },
      "page_maxComments": {
        "description": "This is an optional parameter. Maximum number of comments to retrieve as part of the pages resource. If this parameter is not supplied, no comments will be returned.",
        "in": "query",
        "name": "maxComments",
        "schema": {
          "type": "integer"
        }
      },
      "page_maxTrackbacks": {
        "description": "This is an optional parameter. Maximum number of received trackbacks to retrieve as part of the pages resource. If this parameter is not supplied, no trackbacks will be returned.",
        "in": "query",
        "name": "maxTrackbacks",
        "schema": {
          "type": "integer"
        }
      },
      "page_no_text_filter": {
        "description": "If you want to fetch the raw text, set to '1'. New in v2\n",
        "in": "query",
        "name": "noTextFilter",
        "schema": {
          "enum": [
            0,
            1
          ],
          "type": "integer"
        }
      },
      "page_offset": {
        "description": "0-indexed offset.\n\n**Default**: 0",
        "in": "query",
        "name": "offset",
        "schema": {
          "default": "0",
          "type": "integer"
        }
      },
      "page_search": {
        "description": "Search query.",
        "in": "query",
        "name": "search",
        "schema": {
          "type": "string"
        }
      },
      "page_searchFields": {
        "description": "The comma separated field name list to search.\n\n**Default**: title,body,more,keywords,excerpt,basename",
        "in": "query",
        "name": "searchFields",
        "schema": {
          "default": "title,body,more,keywords,excerpt,basename",
          "type": "string"
        }
      },
      "page_sortBy": {
        "description": "The field name for sort. You can specify one of following values\n- authored_on\n- title\n- created_on\n- modified_on\n\n\n**Default**: modified_on",
        "in": "query",
        "name": "sortBy",
        "schema": {
          "default": "modified_on",
          "enum": [
            "authored_on",
            "title",
            "created_on",
            "modified_on"
          ],
          "type": "string"
        }
      },
      "page_sortOrder": {
        "description": "#### descend\n\nReturn pages in descending order.\n\n#### ascend\n\nReturn pages in ascending order.\n\n\n\n**Default**: descend",
        "in": "query",
        "name": "sortOrder",
        "schema": {
          "default": "descend",
          "enum": [
            "descend",
            "ascend"
          ],
          "type": "string"
        }
      },
      "page_status": {
        "description": "Filter by container page's status.\n\n#### Draft\n\nentry_status is 1.\n\n#### Publish\n\nentry_status is 2.\n\n#### Review\n\nentry_status is 3.\n\n#### Future\n\nentry_status is 4.\n\n#### Spam\n\nentry_status is 5.\n\n#### Unpublish\n\nentry_status is 6.\n",
        "in": "query",
        "name": "status",
        "schema": {
          "enum": [
            "Draft",
            "Publish",
            "Review",
            "Future",
            "Spam",
            "Unpublish"
          ],
          "type": "string"
        }
      },
      "permission_blogIds": {
        "description": "The comma-separated blog id list that to be included in the result.",
        "in": "query",
        "name": "blogIds",
        "schema": {
          "type": "string"
        }
      },
      "permission_dateField": {
        "description": "Specifies the field name to be used as a date field for filtering. (new in v3)",
        "in": "query",
        "name": "dateField",
        "schema": {
          "default": "created_on",
          "type": "string"
        }
      },
      "permission_dateFrom": {
        "description": "The start date to filtering. Specify in \"YYYY-MM-DD\" format. (new in v3)",
        "in": "query",
        "name": "dateFrom",
        "schema": {
          "type": "string"
        }
      },
      "permission_dateTo": {
        "description": "The end date to filtering. Specify in \"YYYY-MM-DD\" format. (new in v3)",
        "in": "query",
        "name": "dateTo",
        "schema": {
          "type": "string"
        }
      },
      "permission_excludeIds": {
        "description": "The comma separated ID list of permissions to exclude from result.",
        "in": "query",
        "name": "excludeIds",
        "schema": {
          "type": "string"
        }
      },
      "permission_fields": {
        "description": "The field list to retrieve as part of the permission resource. That list should be separated by comma. If this parameter is not specified, All fields will be returned.",
        "in": "query",
        "name": "fields",
        "schema": {
          "type": "string"
        }
      },
      "permission_includeIds": {
        "description": "The comma separated ID list of permissions to include to result.",
        "in": "query",
        "name": "includeIds",
        "schema": {
          "type": "string"
        }
      },
      "permission_limit": {
        "description": "Maximum number of permissions to retrieve.\n\n**Default**: 25",
        "in": "query",
        "name": "limit",
        "schema": {
          "default": "25",
          "type": "integer"
        }
      },
      "permission_offset": {
        "description": "0-indexed offset.\n\n**Default**: 0",
        "in": "query",
        "name": "offset",
        "schema": {
          "default": "0",
          "type": "integer"
        }
      },
      "permission_search": {
        "description": "Search query.",
        "in": "query",
        "name": "search",
        "schema": {
          "type": "string"
        }
      },
      "permission_searchFields": {
        "description": "The comma separated field name list to search.",
        "in": "query",
        "name": "searchFields",
        "schema": {
          "type": "string"
        }
      },
      "permission_sortBy": {
        "description": "The field name for sort. You can specify one of following values\n\n- id\n- blog_id\n- author_id\n- created_by\n- created_on\n\n\n**Default**: blog_id",
        "in": "query",
        "name": "sortBy",
        "schema": {
          "default": "blog_id",
          "enum": [
            "id",
            "blog_id",
            "author_id",
            "created_by",
            "created_on"
          ],
          "type": "string"
        }
      },
      "permission_sortOrder": {
        "description": "#### descend\n\nReturn permissions in descending order.\n\n#### ascend\n\nReturn permissions in ascending order.\n\n\n\n**Default**: ascend",
        "in": "query",
        "name": "sortOrder",
        "schema": {
          "default": "ascend",
          "enum": [
            "descend",
            "ascend"
          ],
          "type": "string"
        }
      },
      "role_dateField": {
        "description": "Specifies the field name to be used as a date field for filtering. (new in v3)",
        "in": "query",
        "name": "dateField",
        "schema": {
          "default": "created_on",
          "type": "string"
        }
      },
      "role_dateFrom": {
        "description": "The start date to filtering. Specify in \"YYYY-MM-DD\" format. (new in v3)",
        "in": "query",
        "name": "dateFrom",
        "schema": {
          "type": "string"
        }
      },
      "role_dateTo": {
        "description": "The end date to filtering. Specify in \"YYYY-MM-DD\" format. (new in v3)",
        "in": "query",
        "name": "dateTo",
        "schema": {
          "type": "string"
        }
      },
      "role_excludeIds": {
        "description": "The comma separated ID list of roles to exclude from result.",
        "in": "query",
        "name": "excludeIds",
        "schema": {
          "type": "string"
        }
      },
      "role_fields": {
        "description": "The field list to retrieve as part of the role resource. That list should be separated by comma. If this parameter is not specified, All fields will be returned.",
        "in": "query",
        "name": "fields",
        "schema": {
          "type": "string"
        }
      },
      "role_includeIds": {
        "description": "The comma separated ID list of roles to include to result.",
        "in": "query",
        "name": "includeIds",
        "schema": {
          "type": "string"
        }
      },
      "role_limit": {
        "description": "Maximum number of roles to retrieve.\n\n**Default**: 25",
        "in": "query",
        "name": "limit",
        "schema": {
          "default": "25",
          "type": "integer"
        }
      },
      "role_offset": {
        "description": "0-indexed offset.\n\n**Default**: 0",
        "in": "query",
        "name": "offset",
        "schema": {
          "default": "0",
          "type": "integer"
        }
      },
      "role_search": {
        "description": "Search query.",
        "in": "query",
        "name": "search",
        "schema": {
          "type": "string"
        }
      },
      "role_searchFields": {
        "description": "The comma separated field name list to search.\n\n**Default**: name,description",
        "in": "query",
        "name": "searchFields",
        "schema": {
          "default": "name,description",
          "type": "string"
        }
      },
      "role_sortBy": {
        "description": "The field name for sort. You can specify one of following values\n\n- created_by\n- modified_by\n- created_on\n- modified_on\n\n\n**Default**: name",
        "in": "query",
        "name": "sortBy",
        "schema": {
          "default": "name",
          "enum": [
            "name",
            "created_by",
            "modified_by",
            "created_on",
            "modified_on"
          ],
          "type": "string"
        }
      },
      "role_sortOrder": {
        "description": "#### descend\n\nReturn roles in descending order.\n\n#### ascend\n\nReturn roles in ascending order.\n\n\n\n**Default**: ascend",
        "in": "query",
        "name": "sortOrder",
        "schema": {
          "default": "ascend",
          "enum": [
            "descend",
            "ascend"
          ],
          "type": "string"
        }
      },
      "site_dateField": {
        "description": "Specifies the field name to be used as a date field for filtering. (new in v3)",
        "in": "query",
        "name": "dateField",
        "schema": {
          "default": "created_on",
          "type": "string"
        }
      },
      "site_dateFrom": {
        "description": "The start date to filtering. Specify in \"YYYY-MM-DD\" format. (new in v3)",
        "in": "query",
        "name": "dateFrom",
        "schema": {
          "type": "string"
        }
      },
      "site_dateTo": {
        "description": "The end date to filtering. Specify in \"YYYY-MM-DD\" format. (new in v3)",
        "in": "query",
        "name": "dateTo",
        "schema": {
          "type": "string"
        }
      },
      "site_excludeIds": {
        "description": "The comma separated ID list of sites to exclude from result.",
        "in": "query",
        "name": "excludeIds",
        "schema": {
          "type": "string"
        }
      },
      "site_fields": {
        "description": "The field list to retrieve as part of the site resource. That list should be separated by comma. If this parameter is not specified, All fields will be returned.",
        "in": "query",
        "name": "fields",
        "schema": {
          "type": "string"
        }
      },
      "site_includeIds": {
        "description": "The comma separated ID list of sites to include to result.",
        "in": "query",
        "name": "includeIds",
        "schema": {
          "type": "string"
        }
      },
      "site_limit": {
        "description": "Maximum number of sites to retrieve.\n\n**Default**: 25",
        "in": "query",
        "name": "limit",
        "schema": {
          "default": "25",
          "type": "integer"
        }
      },
      "site_offset": {
        "description": "0-indexed offset.\n\n**Default**: 0",
        "in": "query",
        "name": "offset",
        "schema": {
          "default": "0",
          "type": "integer"
        }
      },
      "site_search": {
        "description": "Search query.",
        "in": "query",
        "name": "search",
        "schema": {
          "type": "string"
        }
      },
      "site_searchFields": {
        "description": "The comma separated field name list to search.\n\n**Default**: name",
        "in": "query",
        "name": "searchFields",
        "schema": {
          "default": "name",
          "type": "string"
        }
      },
      "site_sortBy": {
        "description": "Only 'name' is available\n\n\n**Default**: name",
        "in": "query",
        "name": "sortBy",
        "schema": {
          "default": "name",
          "enum": [
            "name"
          ],
          "type": "string"
        }
      },
      "site_sortOrder": {
        "description": "#### descend\n\nReturn sites in descending order.\n\n#### ascend\n\nReturn sites in ascending order.\n\n\n\n**Default**: ascend",
        "in": "query",
        "name": "sortOrder",
        "schema": {
          "default": "ascend",
          "enum": [
            "descend",
            "ascend"
          ],
          "type": "string"
        }
      },
      "tag_dateField": {
        "description": "Specifies the field name to be used as a date field for filtering. (new in v3)",
        "in": "query",
        "name": "dateField",
        "schema": {
          "default": "created_on",
          "type": "string"
        }
      },
      "tag_dateFrom": {
        "description": "The start date to filtering. Specify in \"YYYY-MM-DD\" format. (new in v3)",
        "in": "query",
        "name": "dateFrom",
        "schema": {
          "type": "string"
        }
      },
      "tag_dateTo": {
        "description": "The end date to filtering. Specify in \"YYYY-MM-DD\" format. (new in v3)",
        "in": "query",
        "name": "dateTo",
        "schema": {
          "type": "string"
        }
      },
      "tag_excludeIds": {
        "description": "The comma separated ID list of tags to exclude from result.",
        "in": "query",
        "name": "excludeIds",
        "schema": {
          "type": "string"
        }
      },
      "tag_fields": {
        "description": "The field list to retrieve as part of the tag resource. That list should be separated by comma. If this parameter is not specified, All fields will be returned.",
        "in": "query",
        "name": "fields",
        "schema": {
          "type": "string"
        }
      },
      "tag_includeIds": {
        "description": "The comma separated ID list of tags to include to result.",
        "in": "query",
        "name": "includeIds",
        "schema": {
          "type": "string"
        }
      },
      "tag_limit": {
        "description": "Maximum number of tags to retrieve.\n\n**Default**: 25",
        "in": "query",
        "name": "limit",
        "schema": {
          "default": "25",
          "type": "integer"
        }
      },
      "tag_offset": {
        "description": "0-indexed offset.\n\n**Default**: 0",
        "in": "query",
        "name": "offset",
        "schema": {
          "default": "0",
          "type": "integer"
        }
      },
      "tag_search": {
        "description": "Search query.",
        "in": "query",
        "name": "search",
        "schema": {
          "type": "string"
        }
      },
      "tag_searchFields": {
        "description": "The comma separated field name list to search.\n\n**Default**: name",
        "in": "query",
        "name": "searchFields",
        "schema": {
          "default": "name",
          "type": "string"
        }
      },
      "tag_sortBy": {
        "description": "\n\n**Default**: name",
        "in": "query",
        "name": "sortBy",
        "schema": {
          "default": "name",
          "type": "string"
        }
      },
      "tag_sortOrder": {
        "description": "#### descend\n\nReturn tags in descending order.\n\n#### ascend\n\nReturn tags in ascending order.\n\n\n\n**Default**: ascend",
        "in": "query",
        "name": "sortOrder",
        "schema": {
          "default": "ascend",
          "enum": [
            "descend",
            "ascend"
          ],
          "type": "string"
        }
      },
      "template_dateField": {
        "description": "Specifies the field name to be used as a date field for filtering. (new in v3)",
        "in": "query",
        "name": "dateField",
        "schema": {
          "default": "created_on",
          "type": "string"
        }
      },
      "template_dateFrom": {
        "description": "The start date to filtering. Specify in \"YYYY-MM-DD\" format. (new in v3)",
        "in": "query",
        "name": "dateFrom",
        "schema": {
          "type": "string"
        }
      },
      "template_dateTo": {
        "description": "The end date to filtering. Specify in \"YYYY-MM-DD\" format. (new in v3)",
        "in": "query",
        "name": "dateTo",
        "schema": {
          "type": "string"
        }
      },
      "template_excludeIds": {
        "description": "The comma separated ID list of templates to exclude from result.",
        "in": "query",
        "name": "excludeIds",
        "schema": {
          "type": "string"
        }
      },
      "template_fields": {
        "description": "The field list to retrieve as part of the template resource. That list should be separated by comma. If this parameter is not specified, All fields will be returned.",
        "in": "query",
        "name": "fields",
        "schema": {
          "type": "string"
        }
      },
      "template_includeIds": {
        "description": "The comma separated ID list of templates to include to result.",
        "in": "query",
        "name": "includeIds",
        "schema": {
          "type": "string"
        }
      },
      "template_limit": {
        "description": "Maximum number of templates to retrieve.\n\n**Default**: 10",
        "in": "query",
        "name": "limit",
        "schema": {
          "default": "10",
          "type": "integer"
        }
      },
      "template_offset": {
        "description": "0-indexed offset.\n\n**Default**: 0",
        "in": "query",
        "name": "offset",
        "schema": {
          "default": "0",
          "type": "integer"
        }
      },
      "template_search": {
        "description": "Search query.",
        "in": "query",
        "name": "search",
        "schema": {
          "type": "string"
        }
      },
      "template_searchFields": {
        "description": "The comma separated field name list to search.\n\n**Default**: name,templateType,text",
        "in": "query",
        "name": "searchFields",
        "schema": {
          "default": "name,templateType,text",
          "type": "string"
        }
      },
      "template_sortBy": {
        "description": "\n\n**Default**: name",
        "in": "query",
        "name": "sortBy",
        "schema": {
          "default": "name",
          "type": "string"
        }
      },
      "template_sortOrder": {
        "description": "#### descend\n\nReturn templates in descending order.\n\n#### ascend\n\nReturn templates in ascending order.\n\n\n\n**Default**: ascend",
        "in": "query",
        "name": "sortOrder",
        "schema": {
          "default": "ascend",
          "enum": [
            "descend",
            "ascend"
          ],
          "type": "string"
        }
      },
      "templatemap_dateField": {
        "description": "Specifies the field name to be used as a date field for filtering. (new in v3)",
        "in": "query",
        "name": "dateField",
        "schema": {
          "default": "created_on",
          "type": "string"
        }
      },
      "templatemap_dateFrom": {
        "description": "The start date to filtering. Specify in \"YYYY-MM-DD\" format. (new in v3)",
        "in": "query",
        "name": "dateFrom",
        "schema": {
          "type": "string"
        }
      },
      "templatemap_dateTo": {
        "description": "The end date to filtering. Specify in \"YYYY-MM-DD\" format. (new in v3)",
        "in": "query",
        "name": "dateTo",
        "schema": {
          "type": "string"
        }
      },
      "templatemap_excludeIds": {
        "description": "The comma separated ID list of templatemaps to exclude from result.",
        "in": "query",
        "name": "excludeIds",
        "schema": {
          "type": "string"
        }
      },
      "templatemap_fields": {
        "description": "The field list to retrieve as part of the templatemap resource. That list should be separated by comma. If this parameter is not specified, All fields will be returned.",
        "in": "query",
        "name": "fields",
        "schema": {
          "type": "string"
        }
      },
      "templatemap_includeIds": {
        "description": "The comma separated ID list of templatemaps to include to result.",
        "in": "query",
        "name": "includeIds",
        "schema": {
          "type": "string"
        }
      },
      "templatemap_limit": {
        "description": "Maximum number of templatemaps to retrieve.\n\n**Default**: 10",
        "in": "query",
        "name": "limit",
        "schema": {
          "default": "10",
          "type": "integer"
        }
      },
      "templatemap_offset": {
        "description": "0-indexed offset.\n\n**Default**: 0",
        "in": "query",
        "name": "offset",
        "schema": {
          "default": "0",
          "type": "integer"
        }
      },
      "templatemap_search": {
        "description": "Search query.",
        "in": "query",
        "name": "search",
        "schema": {
          "type": "string"
        }
      },
      "templatemap_searchFields": {
        "description": "The comma separated field name list to search.",
        "in": "query",
        "name": "searchFields",
        "schema": {
          "type": "string"
        }
      },
      "templatemap_sortBy": {
        "description": "\n\n**Default**: id",
        "in": "query",
        "name": "sortBy",
        "schema": {
          "default": "id",
          "type": "string"
        }
      },
      "templatemap_sortOrder": {
        "description": "#### descend\n\nReturn templatemaps in descending order.\n\n#### ascend\n\nReturn templatemaps in ascending order.\n\n\n\n**Default**: ascend",
        "in": "query",
        "name": "sortOrder",
        "schema": {
          "default": "ascend",
          "enum": [
            "descend",
            "ascend"
          ],
          "type": "string"
        }
      },
      "trackback_dateField": {
        "description": "Specifies the field name to be used as a date field for filtering. (new in v3)",
        "in": "query",
        "name": "dateField",
        "schema": {
          "default": "created_on",
          "type": "string"
        }
      },
      "trackback_dateFrom": {
        "description": "The start date to filtering. Specify in \"YYYY-MM-DD\" format. (new in v3)",
        "in": "query",
        "name": "dateFrom",
        "schema": {
          "type": "string"
        }
      },
      "trackback_dateTo": {
        "description": "The end date to filtering. Specify in \"YYYY-MM-DD\" format. (new in v3)",
        "in": "query",
        "name": "dateTo",
        "schema": {
          "type": "string"
        }
      },
      "trackback_excludeIds": {
        "description": "The comma separated ID list of trackbacks to exclude from result.",
        "in": "query",
        "name": "excludeIds",
        "schema": {
          "type": "string"
        }
      },
      "trackback_fields": {
        "description": "The field list to retrieve as part of the trackback resource. That list should be separated by comma. If this parameter is not specified, All fields will be returned.",
        "in": "query",
        "name": "fields",
        "schema": {
          "type": "string"
        }
      },
      "trackback_includeIds": {
        "description": "The comma separated ID list of trackbacks to include to result.",
        "in": "query",
        "name": "includeIds",
        "schema": {
          "type": "string"
        }
      },
      "trackback_limit": {
        "description": "Maximum number of trackbacks to retrieve.\n\n**Default**: 10",
        "in": "query",
        "name": "limit",
        "schema": {
          "default": "10",
          "type": "integer"
        }
      },
      "trackback_offset": {
        "description": "0-indexed offset.\n\n**Default**: 0",
        "in": "query",
        "name": "offset",
        "schema": {
          "default": "0",
          "type": "integer"
        }
      },
      "trackback_search": {
        "description": "Search query.",
        "in": "query",
        "name": "search",
        "schema": {
          "type": "string"
        }
      },
      "trackback_searchFields": {
        "description": "The comma separated field name list to search.\n\n**Default**: title,excerpt,blogName",
        "in": "query",
        "name": "searchFields",
        "schema": {
          "default": "title,excerpt,blogName",
          "type": "string"
        }
      },
      "trackback_sortBy": {
        "description": "\n\n**Default**: id",
        "in": "query",
        "name": "sortBy",
        "schema": {
          "default": "id",
          "type": "string"
        }
      },
      "trackback_sortOrder": {
        "description": "#### descend\n\nReturn trackbacks in descending order.\n\n#### ascend\n\nReturn trackbacks in ascending order.\n\n\n\n**Default**: descend",
        "in": "query",
        "name": "sortOrder",
        "schema": {
          "default": "descend",
          "enum": [
            "descend",
            "ascend"
          ],
          "type": "string"
        }
      },
      "user_dateField": {
        "description": "Specifies the field name to be used as a date field for filtering. (new in v3)",
        "in": "query",
        "name": "dateField",
        "schema": {
          "default": "created_on",
          "type": "string"
        }
      },
      "user_dateFrom": {
        "description": "The start date to filtering. Specify in \"YYYY-MM-DD\" format. (new in v3)",
        "in": "query",
        "name": "dateFrom",
        "schema": {
          "type": "string"
        }
      },
      "user_dateTo": {
        "description": "The end date to filtering. Specify in \"YYYY-MM-DD\" format. (new in v3)",
        "in": "query",
        "name": "dateTo",
        "schema": {
          "type": "string"
        }
      },
      "user_excludeIds": {
        "description": "The comma separated ID list of users to exclude from result.",
        "in": "query",
        "name": "excludeIds",
        "schema": {
          "type": "string"
        }
      },
      "user_fields": {
        "description": "The field list to retrieve as part of the user resource. That list should be separated by comma. If this parameter is not specified, All fields will be returned.",
        "in": "query",
        "name": "fields",
        "schema": {
          "type": "string"
        }
      },
      "user_includeIds": {
        "description": "The comma separated ID list of users to include to result.",
        "in": "query",
        "name": "includeIds",
        "schema": {
          "type": "string"
        }
      },
      "user_limit": {
        "description": "Maximum number of users to retrieve.\n\n**Default**: 10",
        "in": "query",
        "name": "limit",
        "schema": {
          "default": "10",
          "type": "integer"
        }
      },
      "user_offset": {
        "description": "0-indexed offset.\n\n**Default**: 0",
        "in": "query",
        "name": "offset",
        "schema": {
          "default": "0",
          "type": "integer"
        }
      },
      "user_search": {
        "description": "Search query.",
        "in": "query",
        "name": "search",
        "schema": {
          "type": "string"
        }
      },
      "user_searchFields": {
        "description": "The comma separated field name list to search.\n\n**Default**: name,displayName,email,url",
        "in": "query",
        "name": "searchFields",
        "schema": {
          "default": "name,displayName,email,url",
          "type": "string"
        }
      },
      "user_sortBy": {
        "description": "\n\n**Default**: name",
        "in": "query",
        "name": "sortBy",
        "schema": {
          "default": "name",
          "type": "string"
        }
      },
      "user_sortOrder": {
        "description": "#### descend\n\nReturn users in descending order.\n\n#### ascend\n\nReturn users in ascending order.\n\n\n\n**Default**: ascend",
        "in": "query",
        "name": "sortOrder",
        "schema": {
          "default": "ascend",
          "enum": [
            "descend",
            "ascend"
          ],
          "type": "string"
        }
      },
      "widget_dateField": {
        "description": "Specifies the field name to be used as a date field for filtering. (new in v3)",
        "in": "query",
        "name": "dateField",
        "schema": {
          "default": "created_on",
          "type": "string"
        }
      },
      "widget_dateFrom": {
        "description": "The start date to filtering. Specify in \"YYYY-MM-DD\" format. (new in v3)",
        "in": "query",
        "name": "dateFrom",
        "schema": {
          "type": "string"
        }
      },
      "widget_dateTo": {
        "description": "The end date to filtering. Specify in \"YYYY-MM-DD\" format. (new in v3)",
        "in": "query",
        "name": "dateTo",
        "schema": {
          "type": "string"
        }
      },
      "widget_excludeIds": {
        "description": "The comma separated ID list of widgets to exclude from result.",
        "in": "query",
        "name": "excludeIds",
        "schema": {
          "type": "string"
        }
      },
      "widget_fields": {
        "description": "The field list to retrieve as part of the widget resource. That list should be separated by comma. If this parameter is not specified, All fields will be returned.",
        "in": "query",
        "name": "fields",
        "schema": {
          "type": "string"
        }
      },
      "widget_includeIds": {
        "description": "The comma separated ID list of widgets to include to result.",
        "in": "query",
        "name": "includeIds",
        "schema": {
          "type": "string"
        }
      },
      "widget_limit": {
        "description": "Maximum number of widgets to retrieve.\n\n**Default**: 10",
        "in": "query",
        "name": "limit",
        "schema": {
          "default": "10",
          "type": "integer"
        }
      },
      "widget_offset": {
        "description": "0-indexed offset.\n\n**Default**: 0",
        "in": "query",
        "name": "offset",
        "schema": {
          "default": "0",
          "type": "integer"
        }
      },
      "widget_search": {
        "description": "Search query.",
        "in": "query",
        "name": "search",
        "schema": {
          "type": "string"
        }
      },
      "widget_searchFields": {
        "description": "The comma separated field name list to search.\n\n**Default**: name,text",
        "in": "query",
        "name": "searchFields",
        "schema": {
          "default": "name,text",
          "type": "string"
        }
      },
      "widget_sortBy": {
        "description": "\n\n**Default**: name",
        "in": "query",
        "name": "sortBy",
        "schema": {
          "default": "name",
          "type": "string"
        }
      },
      "widget_sortOrder": {
        "description": "#### descend\n\nReturn widgets in descending order.\n\n#### ascend\n\nReturn widgets in ascending order.\n\n\n\n**Default**: ascend",
        "in": "query",
        "name": "sortOrder",
        "schema": {
          "default": "ascend",
          "enum": [
            "descend",
            "ascend"
          ],
          "type": "string"
        }
      },
      "widgetset_dateField": {
        "description": "Specifies the field name to be used as a date field for filtering. (new in v3)",
        "in": "query",
        "name": "dateField",
        "schema": {
          "default": "created_on",
          "type": "string"
        }
      },
      "widgetset_dateFrom": {
        "description": "The start date to filtering. Specify in \"YYYY-MM-DD\" format. (new in v3)",
        "in": "query",
        "name": "dateFrom",
        "schema": {
          "type": "string"
        }
      },
      "widgetset_dateTo": {
        "description": "The end date to filtering. Specify in \"YYYY-MM-DD\" format. (new in v3)",
        "in": "query",
        "name": "dateTo",
        "schema": {
          "type": "string"
        }
      },
      "widgetset_excludeIds": {
        "description": "The comma separated ID list of widgetsets to exclude from result.",
        "in": "query",
        "name": "excludeIds",
        "schema": {
          "type": "string"
        }
      },
      "widgetset_fields": {
        "description": "The field list to retrieve as part of the widgetset resource. That list should be separated by comma. If this parameter is not specified, All fields will be returned.",
        "in": "query",
        "name": "fields",
        "schema": {
          "type": "string"
        }
      },
      "widgetset_includeIds": {
        "description": "The comma separated ID list of widgetsets to include to result.",
        "in": "query",
        "name": "includeIds",
        "schema": {
          "type": "string"
        }
      },
      "widgetset_limit": {
        "description": "Maximum number of widgetsets to retrieve.\n\n**Default**: 10",
        "in": "query",
        "name": "limit",
        "schema": {
          "default": "10",
          "type": "integer"
        }
      },
      "widgetset_offset": {
        "description": "0-indexed offset.\n\n**Default**: 0",
        "in": "query",
        "name": "offset",
        "schema": {
          "default": "0",
          "type": "integer"
        }
      },
      "widgetset_search": {
        "description": "Search query.",
        "in": "query",
        "name": "search",
        "schema": {
          "type": "string"
        }
      },
      "widgetset_searchFields": {
        "description": "The comma separated field name list to search.\n\n**Default**: name",
        "in": "query",
        "name": "searchFields",
        "schema": {
          "default": "name",
          "type": "string"
        }
      },
      "widgetset_sortBy": {
        "description": "\n\n**Default**: name",
        "in": "query",
        "name": "sortBy",
        "schema": {
          "default": "name",
          "type": "string"
        }
      },
      "widgetset_sortOrder": {
        "description": "#### descend\n\nReturn widgetsets in descending order.\n\n#### ascend\n\nReturn widgetsets in ascending order.\n\n\n\n**Default**: ascend",
        "in": "query",
        "name": "sortOrder",
        "schema": {
          "default": "ascend",
          "enum": [
            "descend",
            "ascend"
          ],
          "type": "string"
        }
      }
    },
    "schemas": {
      "ErrorContent": {
        "properties": {
          "error": {
            "properties": {
              "code": {
                "type": "number"
              },
              "message": {
                "type": "string"
              }
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "asset": {
        "description": "Updatable fields are label, description, tags, customFields",
        "properties": {
          "blog": {
            "properties": {
              "id": {
                "type": "integer"
              }
            },
            "type": "object"
          },
          "class": {
            "type": "string"
          },
          "createdBy": {
            "properties": {
              "displayName": {
                "type": "string"
              },
              "id": {
                "type": "integer"
              },
              "userpicUrl": {
                "type": "string"
              }
            },
            "type": "object"
          },
          "createdDate": {
            "format": "date-time",
            "type": "string"
          },
          "customFields": {
            "items": {
              "properties": {
                "basename": {
                  "type": "string"
                },
                "value": {
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array"
          },
          "description": {
            "type": "string"
          },
          "fileExtension": {
            "type": "string"
          },
          "filePath": {
            "type": "string"
          },
          "filename": {
            "type": "string"
          },
          "id": {
            "type": "integer"
          },
          "label": {
            "type": "string"
          },
          "meta": {
            "properties": {
              "fileSize": {
                "type": "integer"
              },
              "height": {
                "type": "integer"
              },
              "width": {
                "type": "integer"
              }
            },
            "type": "object"
          },
          "mimeType": {
            "type": "string"
          },
          "modifiedBy": {
            "properties": {
              "displayName": {
                "type": "string"
              },
              "id": {
                "type": "integer"
              },
              "userpicUrl": {
                "type": "string"
              }
            },
            "type": "object"
          },
          "modifiedDate": {
            "format": "date-time",
            "type": "string"
          },
          "parent": {
            "type": "integer"
          },
          "tags": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "type": {
            "type": "string"
          },
          "updatable": {
            "type": "boolean"
          },
          "url": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "asset_updatable": {
        "properties": {
          "customFields": {
            "items": {
              "properties": {
                "basename": {
                  "type": "string"
                },
                "value": {
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array"
          },
          "description": {
            "type": "string"
          },
          "label": {
            "type": "string"
          },
          "tags": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "association": {
        "properties": {
          "blog": {
            "properties": {
              "id": {
                "type": "integer"
              }
            },
            "type": "object"
          },
          "createdBy": {
            "properties": {
              "displayName": {
                "type": "string"
              },
              "id": {
                "type": "integer"
              },
              "userpicUrl": {
                "type": "string"
              }
            },
            "type": "object"
          },
          "createdDate": {
            "format": "date-time",
            "type": "string"
          },
          "permissions": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "role": {
            "properties": {
              "id": {
                "type": "integer"
              },
              "name": {
                "type": "string"
              }
            },
            "type": "object"
          },
          "user": {
            "properties": {
              "displayName": {
                "type": "string"
              },
              "id": {
                "type": "integer"
              },
              "userpicUrl": {
                "type": "string"
              }
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "blog": {
        "description": "Updatable fields are name, description, url, archiveUrl, themeId, serverOffset, language, sitePath, archivePath, fileExtension, archiveTypePreferred, publishEmptyArchive, includeSystem, includeCache, useRevision, maxRevisionsEntry, maxRevisionsTemplate, listOnIndex, daysOrPosts, sortOrderPosts, wordsInExcerpt, basenameLimit, statusDefault, convertParas, contentCss, smartReplace, smartReplaceFields, junkFolderExpiry, junkScoreThreshold, nofollowUrls, followAuthLinks, sanitizeSpec, autolinkUrls, autodiscoverLinks, internalAutodiscovery, newCreatedUserRole, dateLanguage, customDynamicTemplates, customFields, allowCommentsDefault, allowComments, moderateComments, allowCommentHtml, emailNewComments, sortOrderComments, convertParasComments, useCommentConfirmation, allowCommenterRegist, allowUnregComments, requireCommentEmails, commenterAuthenticators, allowPingsDefault, allowPings, moderatePings, emailNewPings, pingGoogle, pingWeblogs, pingOthers, maxRevisionsContentData",
        "properties": {
          "allowCommentHtml": {
            "type": "boolean"
          },
          "allowCommenterRegist": {
            "type": "boolean"
          },
          "allowComments": {
            "type": "boolean"
          },
          "allowCommentsDefault": {
            "type": "boolean"
          },
          "allowPings": {
            "type": "boolean"
          },
          "allowPingsDefault": {
            "type": "boolean"
          },
          "allowToChangeAtUpload": {
            "type": "boolean"
          },
          "allowUnregComments": {
            "type": "boolean"
          },
          "archivePath": {
            "type": "string"
          },
          "archiveTypePreferred": {
            "type": "string"
          },
          "archiveUrl": {
            "type": "string"
          },
          "autoRenameNonAscii": {
            "type": "boolean"
          },
          "autodiscoverLinks": {
            "type": "boolean"
          },
          "autolinkUrls": {
            "type": "boolean"
          },
          "basenameLimit": {
            "type": "integer"
          },
          "ccLicenseImage": {
            "type": "string"
          },
          "ccLicenseUrl": {
            "type": "string"
          },
          "class": {
            "type": "string"
          },
          "commenterAuthenticators": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "contentCss": {
            "type": "string"
          },
          "convertParas": {
            "type": "string"
          },
          "convertParasComments": {
            "type": "string"
          },
          "createdBy": {
            "properties": {
              "displayName": {
                "type": "string"
              },
              "id": {
                "type": "integer"
              },
              "userpicUrl": {
                "type": "string"
              }
            },
            "type": "object"
          },
          "createdDate": {
            "format": "date-time",
            "type": "string"
          },
          "customDynamicTemplates": {
            "type": "string"
          },
          "customFields": {
            "items": {
              "properties": {
                "basename": {
                  "type": "string"
                },
                "value": {
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array"
          },
          "dateLanguage": {
            "type": "string"
          },
          "daysOrPosts": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "dynamicCache": {
            "type": "boolean"
          },
          "dynamicConditional": {
            "type": "boolean"
          },
          "emailNewComments": {
            "type": "string"
          },
          "emailNewPings": {
            "type": "string"
          },
          "entryCustomPrefs": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "extraPath": {
            "type": "string"
          },
          "fileExtension": {
            "type": "string"
          },
          "followAuthLinks": {
            "type": "boolean"
          },
          "host": {
            "type": "string"
          },
          "id": {
            "type": "integer"
          },
          "includeCache": {
            "type": "boolean"
          },
          "includeSystem": {
            "type": "string"
          },
          "internalAutodiscovery": {
            "type": "boolean"
          },
          "junkFolderExpiry": {
            "type": "integer"
          },
          "junkScoreThreshold": {
            "format": "float",
            "type": "number"
          },
          "language": {
            "type": "string"
          },
          "listOnIndex": {
            "type": "integer"
          },
          "maxRevisionsContentData": {
            "type": "integer"
          },
          "maxRevisionsEntry": {
            "type": "integer"
          },
          "maxRevisionsTemplate": {
            "type": "integer"
          },
          "moderateComments": {
            "type": "integer"
          },
          "moderatePings": {
            "type": "boolean"
          },
          "modifiedBy": {
            "properties": {
              "displayName": {
                "type": "string"
              },
              "id": {
                "type": "integer"
              },
              "userpicUrl": {
                "type": "string"
              }
            },
            "type": "object"
          },
          "modifiedDate": {
            "format": "date-time",
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "newCreatedUserRoles": {
            "items": {
              "properties": {
                "id": {
                  "type": "integer"
                },
                "name": {
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array"
          },
          "nofollowUrls": {
            "type": "boolean"
          },
          "normalizeOrientation": {
            "type": "boolean"
          },
          "operationIfExists": {
            "type": "integer"
          },
          "pageCustomPrefs": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "parent": {
            "properties": {
              "id": {
                "type": "integer"
              },
              "name": {
                "type": "string"
              }
            },
            "type": "object"
          },
          "pingGoogle": {
            "type": "boolean"
          },
          "pingOthers": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "pingWeblogs": {
            "type": "boolean"
          },
          "publishEmptyArchive": {
            "type": "boolean"
          },
          "relativeUrl": {
            "type": "string"
          },
          "requireCommentEmails": {
            "type": "boolean"
          },
          "sanitizeSpec": {
            "type": "string"
          },
          "serverOffset": {
            "type": "string"
          },
          "sitePath": {
            "type": "string"
          },
          "smartReplace": {
            "type": "integer"
          },
          "smartReplaceFields": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "sortOrderComments": {
            "type": "string"
          },
          "sortOrderPosts": {
            "type": "string"
          },
          "statusDefault": {
            "type": "string"
          },
          "themeId": {
            "type": "string"
          },
          "timezone": {
            "type": "string"
          },
          "updatable": {
            "type": "boolean"
          },
          "uploadDestination": {
            "properties": {
              "path": {
                "type": "string"
              },
              "raw": {
                "type": "string"
              }
            },
            "type": "object"
          },
          "url": {
            "type": "string"
          },
          "useCommentConfirmation": {
            "type": "boolean"
          },
          "useRevision": {
            "type": "boolean"
          },
          "wordsInExcerpt": {
            "type": "integer"
          }
        },
        "type": "object"
      },
      "blog_updatable": {
        "properties": {
          "allowCommentHtml": {
            "type": "boolean"
          },
          "allowCommenterRegist": {
            "type": "boolean"
          },
          "allowComments": {
            "type": "boolean"
          },
          "allowCommentsDefault": {
            "type": "boolean"
          },
          "allowPings": {
            "type": "boolean"
          },
          "allowPingsDefault": {
            "type": "boolean"
          },
          "allowUnregComments": {
            "type": "boolean"
          },
          "archivePath": {
            "type": "string"
          },
          "archiveTypePreferred": {
            "type": "string"
          },
          "archiveUrl": {
            "type": "string"
          },
          "autodiscoverLinks": {
            "type": "boolean"
          },
          "autolinkUrls": {
            "type": "boolean"
          },
          "basenameLimit": {
            "type": "integer"
          },
          "commenterAuthenticators": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "contentCss": {
            "type": "string"
          },
          "convertParas": {
            "type": "string"
          },
          "convertParasComments": {
            "type": "string"
          },
          "customDynamicTemplates": {
            "type": "string"
          },
          "customFields": {
            "items": {
              "properties": {
                "basename": {
                  "type": "string"
                },
                "value": {
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array"
          },
          "dateLanguage": {
            "type": "string"
          },
          "daysOrPosts": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "emailNewComments": {
            "type": "string"
          },
          "emailNewPings": {
            "type": "string"
          },
          "fileExtension": {
            "type": "string"
          },
          "followAuthLinks": {
            "type": "boolean"
          },
          "includeCache": {
            "type": "boolean"
          },
          "includeSystem": {
            "type": "string"
          },
          "internalAutodiscovery": {
            "type": "boolean"
          },
          "junkFolderExpiry": {
            "type": "integer"
          },
          "junkScoreThreshold": {
            "format": "float",
            "type": "number"
          },
          "language": {
            "type": "string"
          },
          "listOnIndex": {
            "type": "integer"
          },
          "maxRevisionsContentData": {
            "type": "integer"
          },
          "maxRevisionsEntry": {
            "type": "integer"
          },
          "maxRevisionsTemplate": {
            "type": "integer"
          },
          "moderateComments": {
            "type": "integer"
          },
          "moderatePings": {
            "type": "boolean"
          },
          "name": {
            "type": "string"
          },
          "nofollowUrls": {
            "type": "boolean"
          },
          "pingGoogle": {
            "type": "boolean"
          },
          "pingOthers": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "pingWeblogs": {
            "type": "boolean"
          },
          "publishEmptyArchive": {
            "type": "boolean"
          },
          "requireCommentEmails": {
            "type": "boolean"
          },
          "sanitizeSpec": {
            "type": "string"
          },
          "serverOffset": {
            "type": "string"
          },
          "sitePath": {
            "type": "string"
          },
          "smartReplace": {
            "type": "integer"
          },
          "smartReplaceFields": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "sortOrderComments": {
            "type": "string"
          },
          "sortOrderPosts": {
            "type": "string"
          },
          "statusDefault": {
            "type": "string"
          },
          "themeId": {
            "type": "string"
          },
          "url": {
            "type": "string"
          },
          "useCommentConfirmation": {
            "type": "boolean"
          },
          "useRevision": {
            "type": "boolean"
          },
          "wordsInExcerpt": {
            "type": "integer"
          }
        },
        "type": "object"
      },
      "category": {
        "description": "Updatable fields are label, description, basename, customFields, parent",
        "properties": {
          "archiveLink": {
            "type": "string"
          },
          "basename": {
            "type": "string"
          },
          "blog": {
            "properties": {
              "id": {
                "type": "integer"
              }
            },
            "type": "object"
          },
          "class": {
            "type": "string"
          },
          "createdBy": {
            "properties": {
              "displayName": {
                "type": "string"
              },
              "id": {
                "type": "integer"
              },
              "userpicUrl": {
                "type": "string"
              }
            },
            "type": "object"
          },
          "createdDate": {
            "format": "date-time",
            "type": "string"
          },
          "customFields": {
            "items": {
              "properties": {
                "basename": {
                  "type": "string"
                },
                "value": {
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array"
          },
          "description": {
            "type": "string"
          },
          "id": {
            "type": "integer"
          },
          "label": {
            "type": "string"
          },
          "modifiedBy": {
            "properties": {
              "displayName": {
                "type": "string"
              },
              "id": {
                "type": "integer"
              },
              "userpicUrl": {
                "type": "string"
              }
            },
            "type": "object"
          },
          "modifiedDate": {
            "format": "date-time",
            "type": "string"
          },
          "parent": {
            "type": "integer"
          },
          "updatable": {
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "category_set": {
        "description": "Updatable fields are name",
        "properties": {
          "blog": {
            "properties": {
              "id": {
                "type": "integer"
              }
            },
            "type": "object"
          },
          "categories": {
            "items": {
              "properties": {
                "basename": {
                  "type": "string"
                },
                "id": {
                  "type": "integer"
                },
                "label": {
                  "type": "string"
                },
                "parent": {
                  "type": "integer"
                }
              },
              "type": "object"
            },
            "type": "array"
          },
          "contentTypeCount": {
            "type": "string"
          },
          "createdBy": {
            "properties": {
              "displayName": {
                "type": "string"
              },
              "id": {
                "type": "integer"
              },
              "userpicUrl": {
                "type": "string"
              }
            },
            "type": "object"
          },
          "createdDate": {
            "format": "date-time",
            "type": "string"
          },
          "id": {
            "type": "integer"
          },
          "modifiedBy": {
            "properties": {
              "displayName": {
                "type": "string"
              },
              "id": {
                "type": "integer"
              },
              "userpicUrl": {
                "type": "string"
              }
            },
            "type": "object"
          },
          "modifiedDate": {
            "format": "date-time",
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "updatable": {
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "category_set_updatable": {
        "properties": {
          "name": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "category_updatable": {
        "properties": {
          "basename": {
            "type": "string"
          },
          "customFields": {
            "items": {
              "properties": {
                "basename": {
                  "type": "string"
                },
                "value": {
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array"
          },
          "description": {
            "type": "string"
          },
          "label": {
            "type": "string"
          },
          "parent": {
            "type": "integer"
          }
        },
        "type": "object"
      },
      "cd": {
        "description": "Updatable fields are basename, data, date, status, unpublishedDate, label",
        "properties": {
          "author": {
            "properties": {
              "displayName": {
                "type": "string"
              },
              "id": {
                "type": "integer"
              },
              "userpicUrl": {
                "type": "string"
              }
            },
            "type": "object"
          },
          "basename": {
            "type": "string"
          },
          "blog": {
            "properties": {
              "id": {
                "type": "integer"
              }
            },
            "type": "object"
          },
          "createdDate": {
            "format": "date-time",
            "type": "string"
          },
          "data": {
            "items": {
              "properties": {
                "data": {
                  "oneOf": [
                    {
                      "type": "string"
                    },
                    {
                      "items": {
                        "type": "string"
                      },
                      "type": "array"
                    }
                  ]
                },
                "id": {
                  "type": "integer"
                },
                "label": {
                  "type": "string"
                },
                "type": {
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array"
          },
          "date": {
            "format": "date-time",
            "type": "string"
          },
          "id": {
            "type": "integer"
          },
          "label": {
            "type": "string"
          },
          "modifiedDate": {
            "format": "date-time",
            "type": "string"
          },
          "permalink": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "unpublishedDate": {
            "format": "date-time",
            "type": "string"
          },
          "updatable": {
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "cd_updatable": {
        "properties": {
          "basename": {
            "type": "string"
          },
          "data": {
            "items": {
              "properties": {
                "data": {
                  "oneOf": [
                    {
                      "type": "string"
                    },
                    {
                      "items": {
                        "type": "string"
                      },
                      "type": "array"
                    }
                  ]
                },
                "id": {
                  "type": "integer"
                },
                "label": {
                  "type": "string"
                },
                "type": {
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array"
          },
          "date": {
            "format": "date-time",
            "type": "string"
          },
          "label": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "unpublishedDate": {
            "format": "date-time",
            "type": "string"
          }
        },
        "type": "object"
      },
      "cf": {
        "description": "Updatable fields are type, label, description, options",
        "properties": {
          "blog": {
            "properties": {
              "id": {
                "type": "integer"
              }
            },
            "type": "object"
          },
          "createdBy": {
            "properties": {
              "displayName": {
                "type": "string"
              },
              "id": {
                "type": "integer"
              },
              "userpicUrl": {
                "type": "string"
              }
            },
            "type": "object"
          },
          "createdDate": {
            "format": "date-time",
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "id": {
            "type": "integer"
          },
          "label": {
            "type": "string"
          },
          "modifiedBy": {
            "properties": {
              "displayName": {
                "type": "string"
              },
              "id": {
                "type": "integer"
              },
              "userpicUrl": {
                "type": "string"
              }
            },
            "type": "object"
          },
          "modifiedDate": {
            "format": "date-time",
            "type": "string"
          },
          "options": {
            "description": "This schema shows only common options",
            "properties": {
              "description": {
                "type": "string"
              },
              "display": {
                "type": "string"
              },
              "label": {
                "type": "string"
              },
              "required": {
                "type": "string"
              }
            },
            "type": "object"
          },
          "type": {
            "type": "string"
          },
          "uniqueID": {
            "type": "string"
          },
          "updatable": {
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "cf_updatable": {
        "properties": {
          "description": {
            "type": "string"
          },
          "label": {
            "type": "string"
          },
          "options": {
            "description": "This schema shows only common options",
            "properties": {
              "description": {
                "type": "string"
              },
              "display": {
                "type": "string"
              },
              "label": {
                "type": "string"
              },
              "required": {
                "type": "string"
              }
            },
            "type": "object"
          },
          "type": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "comment": {
        "description": "Updatable fields are customFields, body, parent, status",
        "properties": {
          "author": {
            "description": "The commenter of this comment.",
            "properties": {
              "displayName": {
                "description": "The display name of this commenter.",
                "type": "string"
              },
              "id": {
                "description": "The ID of this commenter. If commenter is not a registerd user, this field is empty.",
                "type": "integer"
              },
              "userpicUrl": {
                "description": "The URL of this commenter's userpic. The userpic will be made by UserpicThumbnailSize and UserpicAllowRect settings. If a commenter is not a registered user or a commenter does not set own userpic, will be returned empty string.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "blog": {
            "properties": {
              "id": {
                "type": "integer"
              }
            },
            "type": "object"
          },
          "body": {
            "type": "string"
          },
          "createdBy": {
            "properties": {
              "displayName": {
                "type": "string"
              },
              "id": {
                "type": "integer"
              },
              "userpicUrl": {
                "type": "string"
              }
            },
            "type": "object"
          },
          "createdDate": {
            "format": "date-time",
            "type": "string"
          },
          "customFields": {
            "items": {
              "properties": {
                "basename": {
                  "type": "string"
                },
                "value": {
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array"
          },
          "date": {
            "format": "date-time",
            "type": "string"
          },
          "entry": {
            "description": "The container entry of this comment.",
            "properties": {
              "id": {
                "description": "The ID of the entry that contains this comment.",
                "type": "integer"
              }
            },
            "type": "object"
          },
          "id": {
            "type": "integer"
          },
          "link": {
            "type": "string"
          },
          "modifiedBy": {
            "properties": {
              "displayName": {
                "type": "string"
              },
              "id": {
                "type": "integer"
              },
              "userpicUrl": {
                "type": "string"
              }
            },
            "type": "object"
          },
          "modifiedDate": {
            "format": "date-time",
            "type": "string"
          },
          "parent": {
            "type": "integer"
          },
          "status": {
            "type": "string"
          },
          "updatable": {
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "comment_updatable": {
        "properties": {
          "body": {
            "type": "string"
          },
          "customFields": {
            "items": {
              "properties": {
                "basename": {
                  "type": "string"
                },
                "value": {
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array"
          },
          "parent": {
            "type": "integer"
          },
          "status": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "content_type": {
        "description": "Updatable fields are name, description, userDisplayOption, dataLabel",
        "properties": {
          "blog": {
            "properties": {
              "id": {
                "type": "integer"
              }
            },
            "type": "object"
          },
          "contentFields": {
            "items": {
              "properties": {
                "id": {
                  "type": "integer"
                },
                "label": {
                  "type": "string"
                },
                "type": {
                  "type": "string"
                },
                "uniqueID": {
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array"
          },
          "createdBy": {
            "properties": {
              "displayName": {
                "type": "string"
              },
              "id": {
                "type": "integer"
              },
              "userpicUrl": {
                "type": "string"
              }
            },
            "type": "object"
          },
          "createdDate": {
            "format": "date-time",
            "type": "string"
          },
          "dataLabel": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "id": {
            "type": "integer"
          },
          "modifiedBy": {
            "properties": {
              "displayName": {
                "type": "string"
              },
              "id": {
                "type": "integer"
              },
              "userpicUrl": {
                "type": "string"
              }
            },
            "type": "object"
          },
          "modifiedDate": {
            "format": "date-time",
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "uniqueID": {
            "type": "string"
          },
          "updatable": {
            "type": "boolean"
          },
          "userDisplayOption": {
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "content_type_updatable": {
        "properties": {
          "dataLabel": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "userDisplayOption": {
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "endpoint": {
        "properties": {
          "component": {
            "properties": {
              "id": {
                "type": "string"
              },
              "name": {
                "type": "string"
              }
            },
            "type": "object"
          },
          "format": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "resources": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "route": {
            "type": "string"
          },
          "verb": {
            "type": "string"
          },
          "version": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "entry": {
        "description": "Updatable fields are status, title, body, more, excerpt, keywords, tags, date, basename, customFields, allowComments, allowTrackbacks, format, unpublishedDate, categories, assets",
        "properties": {
          "allowComments": {
            "type": "boolean"
          },
          "allowTrackbacks": {
            "type": "boolean"
          },
          "assets": {
            "items": {
              "$ref": "#/components/schemas/asset"
            },
            "type": "array"
          },
          "author": {
            "properties": {
              "displayName": {
                "type": "string"
              },
              "id": {
                "type": "integer"
              },
              "userpicUrl": {
                "type": "string"
              }
            },
            "type": "object"
          },
          "basename": {
            "type": "string"
          },
          "blog": {
            "properties": {
              "id": {
                "type": "integer"
              }
            },
            "type": "object"
          },
          "body": {
            "type": "string"
          },
          "categories": {
            "items": {
              "properties": {
                "id": {
                  "type": "integer"
                },
                "label": {
                  "type": "string"
                },
                "parent": {
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array"
          },
          "class": {
            "type": "string"
          },
          "commentCount": {
            "type": "integer"
          },
          "comments": {
            "items": {
              "$ref": "#/components/schemas/comment"
            },
            "type": "array"
          },
          "createdDate": {
            "format": "date-time",
            "type": "string"
          },
          "customFields": {
            "items": {
              "properties": {
                "basename": {
                  "type": "string"
                },
                "value": {
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array"
          },
          "date": {
            "format": "date-time",
            "type": "string"
          },
          "excerpt": {
            "type": "string"
          },
          "format": {
            "type": "string"
          },
          "id": {
            "type": "integer"
          },
          "keywords": {
            "type": "string"
          },
          "modifiedDate": {
            "format": "date-time",
            "type": "string"
          },
          "more": {
            "type": "string"
          },
          "permalink": {
            "type": "string"
          },
          "pingsSentUrl": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "status": {
            "type": "string"
          },
          "tags": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "title": {
            "type": "string"
          },
          "trackbackCount": {
            "type": "integer"
          },
          "trackbacks": {
            "items": {
              "$ref": "#/components/schemas/trackback"
            },
            "type": "array"
          },
          "unpublishedDate": {
            "format": "date-time",
            "type": "string"
          },
          "updatable": {
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "entry_updatable": {
        "properties": {
          "allowComments": {
            "type": "boolean"
          },
          "allowTrackbacks": {
            "type": "boolean"
          },
          "assets": {
            "items": {
              "properties": {
                "id": {
                  "type": "integer"
                }
              },
              "type": "object"
            },
            "type": "array"
          },
          "basename": {
            "type": "string"
          },
          "body": {
            "type": "string"
          },
          "categories": {
            "items": {
              "properties": {
                "id": {
                  "type": "integer"
                }
              },
              "type": "object"
            },
            "type": "array"
          },
          "customFields": {
            "items": {
              "properties": {
                "basename": {
                  "type": "string"
                },
                "value": {
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array"
          },
          "date": {
            "format": "date-time",
            "type": "string"
          },
          "excerpt": {
            "type": "string"
          },
          "format": {
            "type": "string"
          },
          "keywords": {
            "type": "string"
          },
          "more": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "tags": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "title": {
            "type": "string"
          },
          "unpublishedDate": {
            "format": "date-time",
            "type": "string"
          }
        },
        "type": "object"
      },
      "field": {
        "description": "Updatable fields are name, description, required, options, default, basename, tag, systemObject, type",
        "properties": {
          "basename": {
            "type": "string"
          },
          "blog": {
            "properties": {
              "id": {
                "type": "integer"
              }
            },
            "type": "object"
          },
          "default": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "id": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "options": {
            "type": "string"
          },
          "required": {
            "type": "boolean"
          },
          "showInTheseCategories": {
            "items": {
              "properties": {
                "id": {
                  "type": "string"
                },
                "label": {
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array"
          },
          "systemObject": {
            "type": "string"
          },
          "tag": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "updatable": {
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "field_updatable": {
        "properties": {
          "basename": {
            "type": "string"
          },
          "default": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "options": {
            "type": "string"
          },
          "required": {
            "type": "boolean"
          },
          "systemObject": {
            "type": "string"
          },
          "tag": {
            "type": "string"
          },
          "type": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "folder": {
        "description": "Updatable fields are label, description, basename, parent, customFields",
        "properties": {
          "archiveLink": {
            "type": "string"
          },
          "basename": {
            "type": "string"
          },
          "blog": {
            "properties": {
              "id": {
                "type": "integer"
              }
            },
            "type": "object"
          },
          "class": {
            "type": "string"
          },
          "createdBy": {
            "properties": {
              "displayName": {
                "type": "string"
              },
              "id": {
                "type": "integer"
              },
              "userpicUrl": {
                "type": "string"
              }
            },
            "type": "object"
          },
          "createdDate": {
            "format": "date-time",
            "type": "string"
          },
          "customFields": {
            "items": {
              "properties": {
                "basename": {
                  "type": "string"
                },
                "value": {
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array"
          },
          "description": {
            "type": "string"
          },
          "id": {
            "type": "integer"
          },
          "label": {
            "type": "string"
          },
          "modifiedBy": {
            "properties": {
              "displayName": {
                "type": "string"
              },
              "id": {
                "type": "integer"
              },
              "userpicUrl": {
                "type": "string"
              }
            },
            "type": "object"
          },
          "modifiedDate": {
            "format": "date-time",
            "type": "string"
          },
          "parent": {
            "type": "integer"
          },
          "path": {
            "type": "string"
          },
          "updatable": {
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "folder_updatable": {
        "properties": {
          "basename": {
            "type": "string"
          },
          "customFields": {
            "items": {
              "properties": {
                "basename": {
                  "type": "string"
                },
                "value": {
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array"
          },
          "description": {
            "type": "string"
          },
          "label": {
            "type": "string"
          },
          "parent": {
            "type": "integer"
          }
        },
        "type": "object"
      },
      "formatted_text": {
        "description": "Updatable fields are label, text, description",
        "properties": {
          "blog": {
            "properties": {
              "id": {
                "type": "integer"
              }
            },
            "type": "object"
          },
          "createdBy": {
            "properties": {
              "displayName": {
                "type": "string"
              },
              "id": {
                "type": "integer"
              },
              "userpicUrl": {
                "type": "string"
              }
            },
            "type": "object"
          },
          "createdDate": {
            "format": "date-time",
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "id": {
            "type": "integer"
          },
          "label": {
            "type": "string"
          },
          "modifiedBy": {
            "properties": {
              "displayName": {
                "type": "string"
              },
              "id": {
                "type": "integer"
              },
              "userpicUrl": {
                "type": "string"
              }
            },
            "type": "object"
          },
          "modifiedDate": {
            "format": "date-time",
            "type": "string"
          },
          "text": {
            "type": "string"
          },
          "updatable": {
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "formatted_text_updatable": {
        "properties": {
          "description": {
            "type": "string"
          },
          "label": {
            "type": "string"
          },
          "text": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "group": {
        "description": "Updatable fields are status, name, displayName, description",
        "properties": {
          "createdBy": {
            "properties": {
              "displayName": {
                "type": "string"
              },
              "id": {
                "type": "integer"
              },
              "userpicUrl": {
                "type": "string"
              }
            },
            "type": "object"
          },
          "createdDate": {
            "format": "date-time",
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "displayName": {
            "type": "string"
          },
          "externalId": {
            "type": "string"
          },
          "id": {
            "type": "integer"
          },
          "memberCount": {
            "type": "integer"
          },
          "modifiedBy": {
            "properties": {
              "displayName": {
                "type": "string"
              },
              "id": {
                "type": "integer"
              },
              "userpicUrl": {
                "type": "string"
              }
            },
            "type": "object"
          },
          "modifiedDate": {
            "format": "date-time",
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "permissionCount": {
            "type": "integer"
          },
          "status": {
            "type": "string"
          },
          "updatable": {
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "group_updatable": {
        "properties": {
          "description": {
            "type": "string"
          },
          "displayName": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "status": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "log": {
        "description": "Updatable fields are class, message, level, metadata, category, by",
        "properties": {
          "blog": {
            "properties": {
              "id": {
                "type": "integer"
              }
            },
            "type": "object"
          },
          "by": {
            "properties": {
              "displayName": {
                "type": "string"
              },
              "id": {
                "type": "integer"
              },
              "userpicUrl": {
                "type": "string"
              }
            },
            "type": "object"
          },
          "category": {
            "type": "string"
          },
          "class": {
            "type": "string"
          },
          "date": {
            "format": "date-time",
            "type": "string"
          },
          "id": {
            "type": "integer"
          },
          "ip": {
            "type": "string"
          },
          "level": {
            "type": "string"
          },
          "message": {
            "type": "string"
          },
          "metadata": {
            "type": "string"
          },
          "updatable": {
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "log_updatable": {
        "properties": {
          "by": {
            "properties": {
              "displayName": {
                "type": "string"
              },
              "id": {
                "type": "integer"
              },
              "userpicUrl": {
                "type": "string"
              }
            },
            "type": "object"
          },
          "category": {
            "type": "string"
          },
          "class": {
            "type": "string"
          },
          "level": {
            "type": "string"
          },
          "message": {
            "type": "string"
          },
          "metadata": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "page": {
        "description": "Updatable fields are status, title, body, more, excerpt, keywords, tags, date, basename, format, unpublishedDate, customFields",
        "properties": {
          "assets": {
            "items": {
              "$ref": "#/components/schemas/asset"
            },
            "type": "array"
          },
          "author": {
            "properties": {
              "displayName": {
                "type": "string"
              },
              "id": {
                "type": "integer"
              },
              "userpicUrl": {
                "type": "string"
              }
            },
            "type": "object"
          },
          "basename": {
            "type": "string"
          },
          "blog": {
            "properties": {
              "id": {
                "type": "integer"
              }
            },
            "type": "object"
          },
          "body": {
            "type": "string"
          },
          "categories": {
            "items": {
              "properties": {
                "id": {
                  "type": "integer"
                },
                "label": {
                  "type": "string"
                },
                "parent": {
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array"
          },
          "class": {
            "type": "string"
          },
          "createdDate": {
            "format": "date-time",
            "type": "string"
          },
          "customFields": {
            "items": {
              "properties": {
                "basename": {
                  "type": "string"
                },
                "value": {
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array"
          },
          "date": {
            "format": "date-time",
            "type": "string"
          },
          "excerpt": {
            "type": "string"
          },
          "folder": {
            "properties": {
              "id": {
                "type": "integer"
              },
              "label": {
                "type": "string"
              },
              "parent": {
                "type": "string"
              }
            },
            "type": "object"
          },
          "format": {
            "type": "string"
          },
          "id": {
            "type": "integer"
          },
          "keywords": {
            "type": "string"
          },
          "modifiedDate": {
            "format": "date-time",
            "type": "string"
          },
          "more": {
            "type": "string"
          },
          "permalink": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "tags": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "title": {
            "type": "string"
          },
          "unpublishedDate": {
            "format": "date-time",
            "type": "string"
          },
          "updatable": {
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "page_updatable": {
        "properties": {
          "basename": {
            "type": "string"
          },
          "body": {
            "type": "string"
          },
          "customFields": {
            "items": {
              "properties": {
                "basename": {
                  "type": "string"
                },
                "value": {
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array"
          },
          "date": {
            "format": "date-time",
            "type": "string"
          },
          "excerpt": {
            "type": "string"
          },
          "format": {
            "type": "string"
          },
          "keywords": {
            "type": "string"
          },
          "more": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "tags": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "title": {
            "type": "string"
          },
          "unpublishedDate": {
            "format": "date-time",
            "type": "string"
          }
        },
        "type": "object"
      },
      "permission": {
        "properties": {
          "blog": {
            "properties": {
              "id": {
                "type": "integer"
              }
            },
            "type": "object"
          },
          "createdBy": {
            "properties": {
              "displayName": {
                "type": "string"
              },
              "id": {
                "type": "integer"
              },
              "userpicUrl": {
                "type": "string"
              }
            },
            "type": "object"
          },
          "createdDate": {
            "format": "date-time",
            "type": "string"
          },
          "id": {
            "type": "integer"
          },
          "permissions": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "roles": {
            "properties": {
              "id": {
                "type": "integer"
              },
              "name": {
                "type": "string"
              }
            },
            "type": "object"
          },
          "user": {
            "properties": {
              "displayName": {
                "type": "string"
              },
              "id": {
                "type": "integer"
              },
              "userpicUrl": {
                "type": "string"
              }
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "plugin": {
        "properties": {
          "attributes": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "authorLink": {
            "type": "string"
          },
          "authorName": {
            "type": "string"
          },
          "configLink": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "documentLink": {
            "type": "string"
          },
          "icon": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "junkFilters": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "name": {
            "type": "string"
          },
          "pluginLink": {
            "type": "string"
          },
          "pluginSet": {
            "type": "string"
          },
          "signature": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "tags": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "textFilters": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "version": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "role": {
        "description": "Updatable fields are name, description, permissions",
        "properties": {
          "createdBy": {
            "properties": {
              "displayName": {
                "type": "string"
              },
              "id": {
                "type": "integer"
              },
              "userpicUrl": {
                "type": "string"
              }
            },
            "type": "object"
          },
          "createdDate": {
            "format": "date-time",
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "id": {
            "type": "integer"
          },
          "modifiedBy": {
            "properties": {
              "displayName": {
                "type": "string"
              },
              "id": {
                "type": "integer"
              },
              "userpicUrl": {
                "type": "string"
              }
            },
            "type": "object"
          },
          "modifiedDate": {
            "format": "date-time",
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "permissions": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "updatable": {
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "role_updatable": {
        "properties": {
          "description": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "permissions": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "statisticsdate": {
        "properties": {
          "date": {
            "description": "The date of the target. The format is \"YYYY-MM-DD\".",
            "format": "date",
            "type": "string"
          },
          "pageviews": {
            "description": "The pageviews for the path. This property exists only if the metrics to retrieve is \"pageviews\"",
            "type": "string"
          },
          "visits": {
            "description": "The visits for the path. This property exists only if the metrics to retrieve is \"visits\"",
            "type": "string"
          }
        },
        "type": "object"
      },
      "statisticspath": {
        "properties": {
          "archiveType": {
            "description": "The archive type of the path. This property is null if the path is not managed by MT.",
            "type": "string"
          },
          "author": {
            "description": "This property is null if \"archiveType\" is neither \"Author\" nor \"Author-â\".",
            "properties": {
              "id": {
                "description": "The ID of author.",
                "type": "integer"
              }
            },
            "type": "object"
          },
          "category": {
            "description": "This property is null if \"archiveType\" is neither \"Category\" nor \"Category-â\".",
            "properties": {
              "id": {
                "description": "The ID of category.",
                "type": "integer"
              }
            },
            "type": "object"
          },
          "entry": {
            "description": "This property is null if \"archiveType\" is not \"Individual\".",
            "properties": {
              "id": {
                "description": "The ID of entry.",
                "type": "integer"
              }
            },
            "type": "object"
          },
          "pageviews": {
            "description": "The pageviews for the path. This property exists only if the metrics to retrieve is \"pageviews\"",
            "type": "string"
          },
          "path": {
            "description": "The relative path of the target.",
            "type": "string"
          },
          "visits": {
            "description": "The visits for the path. This property exists only if the metrics to retrieve is \"visits\"",
            "type": "string"
          }
        },
        "type": "object"
      },
      "tag": {
        "description": "Updatable fields are name",
        "properties": {
          "assetCount": {
            "type": "integer"
          },
          "entryCount": {
            "type": "integer"
          },
          "id": {
            "type": "integer"
          },
          "isPrivate": {
            "type": "boolean"
          },
          "name": {
            "type": "string"
          },
          "normalizedName": {
            "type": "string"
          },
          "pageCount": {
            "type": "integer"
          },
          "updatable": {
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "tag_updatable": {
        "properties": {
          "name": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "template": {
        "description": "Updatable fields are name, type, text, outputFile, templateType, linkToFile, buildType, customFields, contentType",
        "properties": {
          "archiveTypes": {
            "items": {
              "$ref": "#/components/schemas/templatemap"
            },
            "type": "array"
          },
          "blog": {
            "properties": {
              "id": {
                "type": "integer"
              }
            },
            "type": "object"
          },
          "buildType": {
            "type": "string"
          },
          "contentType": {
            "properties": {
              "id": {
                "type": "integer"
              }
            },
            "type": "object"
          },
          "createdBy": {
            "properties": {
              "displayName": {
                "type": "string"
              },
              "id": {
                "type": "integer"
              },
              "userpicUrl": {
                "type": "string"
              }
            },
            "type": "object"
          },
          "createdDate": {
            "format": "date-time",
            "type": "string"
          },
          "customFields": {
            "items": {
              "properties": {
                "basename": {
                  "type": "string"
                },
                "value": {
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array"
          },
          "id": {
            "type": "integer"
          },
          "linkToFile": {
            "type": "string"
          },
          "modifiedBy": {
            "properties": {
              "displayName": {
                "type": "string"
              },
              "id": {
                "type": "integer"
              },
              "userpicUrl": {
                "type": "string"
              }
            },
            "type": "object"
          },
          "modifiedDate": {
            "format": "date-time",
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "outputFile": {
            "type": "string"
          },
          "templateType": {
            "type": "string"
          },
          "text": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "updatable": {
            "type": "boolean"
          },
          "widgets": {
            "items": {
              "properties": {
                "id": {
                  "type": "integer"
                },
                "name": {
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "template_updatable": {
        "properties": {
          "buildType": {
            "type": "string"
          },
          "contentType": {
            "properties": {
              "id": {
                "type": "integer"
              }
            },
            "type": "object"
          },
          "customFields": {
            "items": {
              "properties": {
                "basename": {
                  "type": "string"
                },
                "value": {
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array"
          },
          "linkToFile": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "outputFile": {
            "type": "string"
          },
          "templateType": {
            "type": "string"
          },
          "text": {
            "type": "string"
          },
          "type": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "templatemap": {
        "description": "Updatable fields are archiveType, fileTemplate, isPreferred, buildType",
        "properties": {
          "archiveType": {
            "type": "string"
          },
          "buildType": {
            "type": "string"
          },
          "fileTemplate": {
            "type": "string"
          },
          "id": {
            "type": "integer"
          },
          "isPreferred": {
            "type": "boolean"
          },
          "updatable": {
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "templatemap_updatable": {
        "properties": {
          "archiveType": {
            "type": "string"
          },
          "buildType": {
            "type": "string"
          },
          "fileTemplate": {
            "type": "string"
          },
          "isPreferred": {
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "theme": {
        "properties": {
          "authorLink": {
            "type": "string"
          },
          "authorName": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "inUse": {
            "type": "boolean"
          },
          "label": {
            "type": "string"
          },
          "uninstallable": {
            "type": "boolean"
          },
          "version": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "trackback": {
        "description": "Updatable fields are customFields, status",
        "properties": {
          "blog": {
            "properties": {
              "id": {
                "type": "integer"
              }
            },
            "type": "object"
          },
          "blogName": {
            "type": "string"
          },
          "createdBy": {
            "properties": {
              "displayName": {
                "type": "string"
              },
              "id": {
                "type": "integer"
              },
              "userpicUrl": {
                "type": "string"
              }
            },
            "type": "object"
          },
          "createdDate": {
            "format": "date-time",
            "type": "string"
          },
          "customFields": {
            "items": {
              "properties": {
                "basename": {
                  "type": "string"
                },
                "value": {
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array"
          },
          "date": {
            "format": "date-time",
            "type": "string"
          },
          "entry": {
            "type": "string"
          },
          "excerpt": {
            "type": "string"
          },
          "id": {
            "type": "integer"
          },
          "ip": {
            "type": "string"
          },
          "modifiedBy": {
            "properties": {
              "displayName": {
                "type": "string"
              },
              "id": {
                "type": "integer"
              },
              "userpicUrl": {
                "type": "string"
              }
            },
            "type": "object"
          },
          "modifiedDate": {
            "format": "date-time",
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "updatable": {
            "type": "boolean"
          },
          "url": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "trackback_updatable": {
        "properties": {
          "customFields": {
            "items": {
              "properties": {
                "basename": {
                  "type": "string"
                },
                "value": {
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array"
          },
          "status": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "user": {
        "description": "Updatable fields are displayName, email, url, status, name, password, language, dateFormat, textFormat, tagDelimiter, systemPermissions, customFields, apiPassword",
        "properties": {
          "apiPassword": {
            "type": "string"
          },
          "createdBy": {
            "properties": {
              "displayName": {
                "type": "string"
              },
              "id": {
                "type": "integer"
              },
              "userpicUrl": {
                "type": "string"
              }
            },
            "type": "object"
          },
          "createdDate": {
            "format": "date-time",
            "type": "string"
          },
          "customFields": {
            "items": {
              "properties": {
                "basename": {
                  "type": "string"
                },
                "value": {
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array"
          },
          "dateFormat": {
            "type": "string"
          },
          "displayName": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "id": {
            "type": "integer"
          },
          "isSuperuser": {
            "type": "boolean"
          },
          "language": {
            "type": "string"
          },
          "lockedOut": {
            "type": "boolean"
          },
          "modifiedBy": {
            "properties": {
              "displayName": {
                "type": "string"
              },
              "id": {
                "type": "integer"
              },
              "userpicUrl": {
                "type": "string"
              }
            },
            "type": "object"
          },
          "modifiedDate": {
            "format": "date-time",
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "password": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "systemPermissions": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "tagDelimiter": {
            "type": "string"
          },
          "textFormat": {
            "type": "string"
          },
          "updatable": {
            "type": "boolean"
          },
          "url": {
            "type": "string"
          },
          "userpicUrl": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "user_updatable": {
        "properties": {
          "apiPassword": {
            "type": "string"
          },
          "customFields": {
            "items": {
              "properties": {
                "basename": {
                  "type": "string"
                },
                "value": {
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array"
          },
          "dateFormat": {
            "type": "string"
          },
          "displayName": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "language": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "password": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "systemPermissions": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "tagDelimiter": {
            "type": "string"
          },
          "textFormat": {
            "type": "string"
          },
          "url": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "website": {
        "description": "Updatable fields are name, description, url, archiveUrl, themeId, serverOffset, language, sitePath, archivePath, fileExtension, archiveTypePreferred, publishEmptyArchive, includeSystem, includeCache, useRevision, maxRevisionsEntry, maxRevisionsTemplate, listOnIndex, daysOrPosts, sortOrderPosts, wordsInExcerpt, basenameLimit, statusDefault, convertParas, contentCss, smartReplace, smartReplaceFields, junkFolderExpiry, junkScoreThreshold, nofollowUrls, followAuthLinks, sanitizeSpec, autolinkUrls, autodiscoverLinks, internalAutodiscovery, newCreatedUserRole, dateLanguage, customDynamicTemplates, customFields, allowCommentsDefault, allowComments, moderateComments, allowCommentHtml, emailNewComments, sortOrderComments, convertParasComments, useCommentConfirmation, allowCommenterRegist, allowUnregComments, requireCommentEmails, commenterAuthenticators, allowPingsDefault, allowPings, moderatePings, emailNewPings, pingGoogle, pingWeblogs, pingOthers, maxRevisionsContentData",
        "properties": {
          "allowCommentHtml": {
            "type": "boolean"
          },
          "allowCommenterRegist": {
            "type": "boolean"
          },
          "allowComments": {
            "type": "boolean"
          },
          "allowCommentsDefault": {
            "type": "boolean"
          },
          "allowPings": {
            "type": "boolean"
          },
          "allowPingsDefault": {
            "type": "boolean"
          },
          "allowToChangeAtUpload": {
            "type": "boolean"
          },
          "allowUnregComments": {
            "type": "boolean"
          },
          "archivePath": {
            "type": "string"
          },
          "archiveTypePreferred": {
            "type": "string"
          },
          "archiveUrl": {
            "type": "string"
          },
          "autoRenameNonAscii": {
            "type": "boolean"
          },
          "autodiscoverLinks": {
            "type": "boolean"
          },
          "autolinkUrls": {
            "type": "boolean"
          },
          "basenameLimit": {
            "type": "integer"
          },
          "ccLicenseImage": {
            "type": "string"
          },
          "ccLicenseUrl": {
            "type": "string"
          },
          "class": {
            "type": "string"
          },
          "commenterAuthenticators": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "contentCss": {
            "type": "string"
          },
          "convertParas": {
            "type": "string"
          },
          "convertParasComments": {
            "type": "string"
          },
          "createdBy": {
            "properties": {
              "displayName": {
                "type": "string"
              },
              "id": {
                "type": "integer"
              },
              "userpicUrl": {
                "type": "string"
              }
            },
            "type": "object"
          },
          "createdDate": {
            "format": "date-time",
            "type": "string"
          },
          "customDynamicTemplates": {
            "type": "string"
          },
          "customFields": {
            "items": {
              "properties": {
                "basename": {
                  "type": "string"
                },
                "value": {
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array"
          },
          "dateLanguage": {
            "type": "string"
          },
          "daysOrPosts": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "dynamicCache": {
            "type": "boolean"
          },
          "dynamicConditional": {
            "type": "boolean"
          },
          "emailNewComments": {
            "type": "string"
          },
          "emailNewPings": {
            "type": "string"
          },
          "entryCustomPrefs": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "extraPath": {
            "type": "string"
          },
          "fileExtension": {
            "type": "string"
          },
          "followAuthLinks": {
            "type": "boolean"
          },
          "host": {
            "type": "string"
          },
          "id": {
            "type": "integer"
          },
          "includeCache": {
            "type": "boolean"
          },
          "includeSystem": {
            "type": "string"
          },
          "internalAutodiscovery": {
            "type": "boolean"
          },
          "junkFolderExpiry": {
            "type": "integer"
          },
          "junkScoreThreshold": {
            "format": "float",
            "type": "number"
          },
          "language": {
            "type": "string"
          },
          "listOnIndex": {
            "type": "integer"
          },
          "maxRevisionsContentData": {
            "type": "integer"
          },
          "maxRevisionsEntry": {
            "type": "integer"
          },
          "maxRevisionsTemplate": {
            "type": "integer"
          },
          "moderateComments": {
            "type": "integer"
          },
          "moderatePings": {
            "type": "boolean"
          },
          "modifiedBy": {
            "properties": {
              "displayName": {
                "type": "string"
              },
              "id": {
                "type": "integer"
              },
              "userpicUrl": {
                "type": "string"
              }
            },
            "type": "object"
          },
          "modifiedDate": {
            "format": "date-time",
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "newCreatedUserRoles": {
            "items": {
              "properties": {
                "id": {
                  "type": "integer"
                },
                "name": {
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array"
          },
          "nofollowUrls": {
            "type": "boolean"
          },
          "normalizeOrientation": {
            "type": "boolean"
          },
          "operationIfExists": {
            "type": "integer"
          },
          "pageCustomPrefs": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "parent": {
            "properties": {
              "id": {
                "type": "integer"
              },
              "name": {
                "type": "string"
              }
            },
            "type": "object"
          },
          "pingGoogle": {
            "type": "boolean"
          },
          "pingOthers": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "pingWeblogs": {
            "type": "boolean"
          },
          "publishEmptyArchive": {
            "type": "boolean"
          },
          "relativeUrl": {
            "type": "string"
          },
          "requireCommentEmails": {
            "type": "boolean"
          },
          "sanitizeSpec": {
            "type": "string"
          },
          "serverOffset": {
            "type": "string"
          },
          "sitePath": {
            "type": "string"
          },
          "smartReplace": {
            "type": "integer"
          },
          "smartReplaceFields": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "sortOrderComments": {
            "type": "string"
          },
          "sortOrderPosts": {
            "type": "string"
          },
          "statusDefault": {
            "type": "string"
          },
          "themeId": {
            "type": "string"
          },
          "timezone": {
            "type": "string"
          },
          "updatable": {
            "type": "boolean"
          },
          "uploadDestination": {
            "properties": {
              "path": {
                "type": "string"
              },
              "raw": {
                "type": "string"
              }
            },
            "type": "object"
          },
          "url": {
            "type": "string"
          },
          "useCommentConfirmation": {
            "type": "boolean"
          },
          "useRevision": {
            "type": "boolean"
          },
          "wordsInExcerpt": {
            "type": "integer"
          }
        },
        "type": "object"
      },
      "website_updatable": {
        "properties": {
          "allowCommentHtml": {
            "type": "boolean"
          },
          "allowCommenterRegist": {
            "type": "boolean"
          },
          "allowComments": {
            "type": "boolean"
          },
          "allowCommentsDefault": {
            "type": "boolean"
          },
          "allowPings": {
            "type": "boolean"
          },
          "allowPingsDefault": {
            "type": "boolean"
          },
          "allowUnregComments": {
            "type": "boolean"
          },
          "archivePath": {
            "type": "string"
          },
          "archiveTypePreferred": {
            "type": "string"
          },
          "archiveUrl": {
            "type": "string"
          },
          "autodiscoverLinks": {
            "type": "boolean"
          },
          "autolinkUrls": {
            "type": "boolean"
          },
          "basenameLimit": {
            "type": "integer"
          },
          "commenterAuthenticators": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "contentCss": {
            "type": "string"
          },
          "convertParas": {
            "type": "string"
          },
          "convertParasComments": {
            "type": "string"
          },
          "customDynamicTemplates": {
            "type": "string"
          },
          "customFields": {
            "items": {
              "properties": {
                "basename": {
                  "type": "string"
                },
                "value": {
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array"
          },
          "dateLanguage": {
            "type": "string"
          },
          "daysOrPosts": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "emailNewComments": {
            "type": "string"
          },
          "emailNewPings": {
            "type": "string"
          },
          "fileExtension": {
            "type": "string"
          },
          "followAuthLinks": {
            "type": "boolean"
          },
          "includeCache": {
            "type": "boolean"
          },
          "includeSystem": {
            "type": "string"
          },
          "internalAutodiscovery": {
            "type": "boolean"
          },
          "junkFolderExpiry": {
            "type": "integer"
          },
          "junkScoreThreshold": {
            "format": "float",
            "type": "number"
          },
          "language": {
            "type": "string"
          },
          "listOnIndex": {
            "type": "integer"
          },
          "maxRevisionsContentData": {
            "type": "integer"
          },
          "maxRevisionsEntry": {
            "type": "integer"
          },
          "maxRevisionsTemplate": {
            "type": "integer"
          },
          "moderateComments": {
            "type": "integer"
          },
          "moderatePings": {
            "type": "boolean"
          },
          "name": {
            "type": "string"
          },
          "nofollowUrls": {
            "type": "boolean"
          },
          "pingGoogle": {
            "type": "boolean"
          },
          "pingOthers": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "pingWeblogs": {
            "type": "boolean"
          },
          "publishEmptyArchive": {
            "type": "boolean"
          },
          "requireCommentEmails": {
            "type": "boolean"
          },
          "sanitizeSpec": {
            "type": "string"
          },
          "serverOffset": {
            "type": "string"
          },
          "sitePath": {
            "type": "string"
          },
          "smartReplace": {
            "type": "integer"
          },
          "smartReplaceFields": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "sortOrderComments": {
            "type": "string"
          },
          "sortOrderPosts": {
            "type": "string"
          },
          "statusDefault": {
            "type": "string"
          },
          "themeId": {
            "type": "string"
          },
          "url": {
            "type": "string"
          },
          "useCommentConfirmation": {
            "type": "boolean"
          },
          "useRevision": {
            "type": "boolean"
          },
          "wordsInExcerpt": {
            "type": "integer"
          }
        },
        "type": "object"
      }
    },
    "securitySchemes": {
      "mtauth": {
        "description": "MTAuth accessToken={accessToken}",
        "in": "header",
        "name": "X-MT-Authorization",
        "type": "apiKey"
      }
    }
  },
  "externalDocs": {
    "description": "Find out more about Movable Type Data API",
    "url": "https://www.movabletype.jp/developers/data-api/"
  },
  "info": {
    "title": "Movable Type Data API",
    "version": "r.5401"
  },
  "openapi": "3.0.0",
  "paths": {
    "/": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Bad request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Invalid login"
          }
        },
        "summary": "Retrieve OpenAPI schema",
        "tags": [
          "Common API"
        ]
      }
    },
    "/assets/upload": {
      "post": {
        "description": "#### Permissions\n\n- upload\n",
        "parameters": [
          {
            "description": "If specify \"1\", the API always overwrites an existing file with the uploaded file. This parameter has been available since Movable Type 6.1.2",
            "in": "query",
            "name": "overwrite_once",
            "schema": {
              "enum": [
                0,
                1
              ],
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "properties": {
                  "autoRenameIfExists": {
                    "default": 0,
                    "description": "If this value is \"1\" and a file with the same filename exists, the uploaded file is automatically renamed to a random generated name. Default is \"0\".",
                    "enum": [
                      0,
                      1
                    ],
                    "type": "integer"
                  },
                  "autoRenameNonAscii": {
                    "description": "If this value is \"1\", the filename is renamed non-ascii filename automatically",
                    "enum": [
                      0,
                      1
                    ],
                    "type": "integer"
                  },
                  "file": {
                    "description": "Actual file data",
                    "format": "binary",
                    "type": "string"
                  },
                  "normalizeOrientation": {
                    "default": 1,
                    "description": "If this value is \"1\" and the uploaded file has orientation information in Exif data, this file's orientation is automatically normalized. Default is \"1\".",
                    "enum": [
                      0,
                      1
                    ],
                    "type": "integer"
                  },
                  "path": {
                    "description": "The upload destination. You can specify the path to the under the site path.",
                    "type": "string"
                  },
                  "site_id": {
                    "description": "The site ID.",
                    "type": "integer"
                  }
                },
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/asset"
                }
              }
            },
            "description": "No Errors."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Bad request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Invalid login"
          },
          "403": {
            "description": "Do not have permission to upload."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Site not found."
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "properties": {
                        "code": {
                          "type": "integer"
                        },
                        "data": {
                          "properties": {
                            "fileName": {
                              "type": "string"
                            },
                            "path": {
                              "type": "string"
                            },
                            "temp": {
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "message": {
                          "type": "string"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Uploaded file already exists."
          },
          "413": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Upload file size is larger than CGIMaxUpload."
          }
        },
        "security": [
          {
            "mtauth": []
          }
        ],
        "summary": "Upload a file",
        "tags": [
          "Assets"
        ]
      }
    },
    "/authentication": {
      "delete": {
        "description": "Invalidate current session. This is like logout. All access tokens related to that session are invalidated too.\n\nAuthorization is required. but if there is an effective session, user can revoke by the following methods.\n\nIn the case of a web browser, can be authorized by httponly-cookie.\n\nIn the case of other than a browser, can be authorized by sending a sessionId that is retrieved via authentication endpoints in MTAuth request header.\n\n`MTAuth sessionId={retrieved sessionId}`\n\n#### Notes\n- This method accepts DELETE and POST with __method=DELETE.\n",
        "parameters": [
          {
            "description": "Input `MTAuth sessionId={sessionId}`",
            "in": "header",
            "name": "X-MT-Authorization",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "properties": {
                  "clientId": {
                    "description": "This is not required if you specify session id via \"X-MT-Authorization\" request header. You can create new access token if you have a session id related to this clientId, although you do not have an access token. ",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "status": {
                      "description": "The value of this parameter is always \"success\".",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Bad request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Invalid login"
          },
          "405": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Request method is not DELETE or POST with __method=DELETE"
          }
        },
        "summary": "Invalidate current access token. This is not logout",
        "tags": [
          "Authentication"
        ]
      },
      "post": {
        "description": "Create a new session and access token. This is like sign-in.",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "properties": {
                  "clientId": {
                    "description": "This is not required if you specify session id via \"X-MT-Authorization\" request header. You can create new access token if you have a session id related to this clientId, although you do not have an access token. ",
                    "type": "string"
                  },
                  "mtDataApiLoginMagicToken": {
                    "description": "This is not required if you authenticate except via browser. If this parameter is passed and valid the MT will set cookie in order to start a session. ",
                    "type": "string"
                  },
                  "password": {
                    "description": "Your Web Service Password",
                    "format": "password",
                    "type": "string"
                  },
                  "remember": {
                    "description": "If true (generally, \"1\" is specified.), a new session will be created as a persistent session. If you want to specify false, you can pass \"\" or \"0\" to this parameter.",
                    "enum": [
                      0,
                      1
                    ],
                    "type": "integer"
                  },
                  "username": {
                    "description": "Your Sign-in Name",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "accessToken": {
                      "description": "Access token",
                      "type": "string"
                    },
                    "expiresIn": {
                      "description": "This access token will be invalidated automatically after the number of seconds specified here.",
                      "type": "integer"
                    },
                    "remember": {
                      "description": "If true, a new session has been created as a persistent session.",
                      "type": "boolean"
                    },
                    "sessionId": {
                      "description": "Session ID. This value is included only when mtDataApiLoginMagicToken is not passed. If mtDataApiLoginMagicToken is passed (and is valid value), sessionId is stored in httponly-cookie.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Bad request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Invalid login"
          }
        },
        "summary": "User authentication by username and password",
        "tags": [
          "Authentication"
        ]
      }
    },
    "/authorization": {
      "get": {
        "description": "Return authorization(login) form as HTML.",
        "parameters": [
          {
            "description": "This is required. When you succeed in login, you are redirected to the redirectUrl with \"#_login\". ",
            "in": "query",
            "name": "redirectUrl",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "This is required. the client ID of the application.",
            "in": "query",
            "name": "clientId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "text/html": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Bad request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Invalid login"
          }
        },
        "summary": "Return authorization(login) form as HTML",
        "tags": [
          "Authentication"
        ]
      }
    },
    "/endpoints": {
      "get": {
        "description": "Retrieve a list of endpoints.",
        "parameters": [
          {
            "description": "This is an optional parameter. The comma separated ID list of components (a.k.a plugin) to include to result. ",
            "in": "query",
            "name": "includeComponents",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "This is an optional parameter. The comma separated ID list of components (a.k.a plugin) to exclude from result. ",
            "in": "query",
            "name": "excludeComponents",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "items": {
                      "description": "An array of Endpoints resource.",
                      "items": {
                        "$ref": "#/components/schemas/endpoint"
                      },
                      "type": "array"
                    },
                    "totalResults": {
                      "description": "The total number of endpoints found.",
                      "type": "integer"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Bad request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Invalid login"
          }
        },
        "summary": "Retrieve a list of endpoints",
        "tags": [
          "Endpoints"
        ]
      }
    },
    "/groups": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/group_search"
          },
          {
            "$ref": "#/components/parameters/group_searchFields"
          },
          {
            "$ref": "#/components/parameters/group_limit"
          },
          {
            "$ref": "#/components/parameters/group_offset"
          },
          {
            "$ref": "#/components/parameters/group_sortBy"
          },
          {
            "$ref": "#/components/parameters/group_sortOrder"
          },
          {
            "$ref": "#/components/parameters/group_fields"
          },
          {
            "$ref": "#/components/parameters/group_dateField"
          },
          {
            "$ref": "#/components/parameters/group_dateFrom"
          },
          {
            "$ref": "#/components/parameters/group_dateTo"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "items": {
                      "description": "An array of group resource.",
                      "items": {
                        "$ref": "#/components/schemas/group"
                      },
                      "type": "array"
                    },
                    "totalResults": {
                      "description": " The total number of groups.",
                      "type": "integer"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "No Errors."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Bad request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Invalid login"
          },
          "403": {
            "description": "Do not have permission to retrieve the requested groups."
          }
        },
        "security": [
          {
            "mtauth": []
          }
        ],
        "summary": "Retrieve a list of groups",
        "tags": [
          "Groups"
        ]
      },
      "post": {
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "properties": {
                  "group": {
                    "$ref": "#/components/schemas/group_updatable"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/group"
                }
              }
            },
            "description": "No Errors."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Bad request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Invalid login"
          },
          "403": {
            "description": "Do not have permission to create a group."
          }
        },
        "security": [
          {
            "mtauth": []
          }
        ],
        "summary": "Create a new group",
        "tags": [
          "Groups"
        ]
      }
    },
    "/groups/synchronize": {
      "post": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "status": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "No Errors."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Bad request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Invalid login"
          },
          "403": {
            "description": "Do not have permission to synchronize groups."
          }
        },
        "security": [
          {
            "mtauth": []
          }
        ],
        "summary": "Synchronize groups",
        "tags": [
          "Groups"
        ]
      }
    },
    "/groups/{group_id}": {
      "delete": {
        "description": "\n#### Notes\n- This method accepts DELETE and POST with __method=DELETE.\n",
        "parameters": [
          {
            "in": "path",
            "name": "group_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/group"
                }
              }
            },
            "description": "No Errors."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Bad request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Invalid login"
          },
          "403": {
            "description": "Do not have permission to delete a group."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Group not found."
          },
          "405": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Request method is not DELETE or POST with __method=DELETE"
          }
        },
        "security": [
          {
            "mtauth": []
          }
        ],
        "summary": "Delete a group",
        "tags": [
          "Groups"
        ]
      },
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "group_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "$ref": "#/components/parameters/group_fields"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/group"
                }
              }
            },
            "description": "No Errors."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Bad request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Invalid login"
          },
          "403": {
            "description": "Do not have permission to retrieve the requested group."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Group not found."
          }
        },
        "security": [
          {
            "mtauth": []
          }
        ],
        "summary": "Retrieve single group by its ID",
        "tags": [
          "Groups"
        ]
      },
      "put": {
        "description": "\n#### Notes\n- This method accepts PUT and POST with __method=PUT.\n",
        "parameters": [
          {
            "in": "path",
            "name": "group_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "properties": {
                  "group": {
                    "$ref": "#/components/schemas/group_updatable"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/group"
                }
              }
            },
            "description": "No Errors."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Bad request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Invalid login"
          },
          "403": {
            "description": "Do not have permission to update a group."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Group not found."
          },
          "405": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Request method is not PUT or POST with __method=PUT"
          }
        },
        "security": [
          {
            "mtauth": []
          }
        ],
        "summary": "Update a group",
        "tags": [
          "Groups"
        ]
      }
    },
    "/groups/{group_id}/members": {
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "group_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "$ref": "#/components/parameters/group_search"
          },
          {
            "$ref": "#/components/parameters/group_searchFields"
          },
          {
            "$ref": "#/components/parameters/group_limit"
          },
          {
            "$ref": "#/components/parameters/group_offset"
          },
          {
            "$ref": "#/components/parameters/group_sortBy"
          },
          {
            "$ref": "#/components/parameters/group_sortOrder"
          },
          {
            "$ref": "#/components/parameters/group_fields"
          },
          {
            "$ref": "#/components/parameters/user_dateField"
          },
          {
            "$ref": "#/components/parameters/user_dateFrom"
          },
          {
            "$ref": "#/components/parameters/user_dateTo"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "items": {
                      "description": "An array of member resource.",
                      "items": {
                        "$ref": "#/components/schemas/user"
                      },
                      "type": "array"
                    },
                    "totalResults": {
                      "description": " The total number of members.",
                      "type": "integer"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "No Errors."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Bad request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Invalid login"
          },
          "403": {
            "description": "Do not have permission to retrieve the list of group members."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Group not found."
          }
        },
        "security": [
          {
            "mtauth": []
          }
        ],
        "summary": "Retrieve a list of members for specified group",
        "tags": [
          "Groups"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "path",
            "name": "group_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "properties": {
                  "member": {
                    "properties": {
                      "id": {
                        "type": "integer"
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/user"
                }
              }
            },
            "description": "No Errors."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Bad request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Invalid login"
          },
          "403": {
            "description": "Do not have permission to add a member to group."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Group or Member not found."
          }
        },
        "security": [
          {
            "mtauth": []
          }
        ],
        "tags": [
          "Groups"
        ]
      }
    },
    "/groups/{group_id}/members/{member_id}": {
      "delete": {
        "description": "\n#### Notes\n- This method accepts DELETE and POST with __method=DELETE.\n",
        "parameters": [
          {
            "in": "path",
            "name": "group_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "member_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/user"
                }
              }
            },
            "description": "No Errors."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Bad request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Invalid login"
          },
          "403": {
            "description": "Do not have permission to remove a member from group."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Group or Member not found."
          },
          "405": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Request method is not DELETE or POST with __method=DELETE"
          }
        },
        "security": [
          {
            "mtauth": []
          }
        ],
        "tags": [
          "Groups"
        ]
      },
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "group_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "member_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "$ref": "#/components/parameters/group_fields"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/user"
                }
              }
            },
            "description": "No Errors."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Bad request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Invalid login"
          },
          "403": {
            "description": "Do not have permission to retrieve the requested group member."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Group or Member not found."
          }
        },
        "security": [
          {
            "mtauth": []
          }
        ],
        "summary": "Retrieve single member by its ID for specified group",
        "tags": [
          "Groups"
        ]
      }
    },
    "/groups/{group_id}/permissions": {
      "get": {
        "description": "- Authentication is required\n- If you want to get others list, you should have Administer privilege.\n",
        "parameters": [
          {
            "in": "path",
            "name": "group_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "$ref": "#/components/parameters/permission_limit"
          },
          {
            "$ref": "#/components/parameters/permission_offset"
          },
          {
            "$ref": "#/components/parameters/permission_sortBy"
          },
          {
            "$ref": "#/components/parameters/permission_sortOrder"
          },
          {
            "$ref": "#/components/parameters/permission_fields"
          },
          {
            "$ref": "#/components/parameters/permission_blogIds"
          },
          {
            "$ref": "#/components/parameters/permission_dateField"
          },
          {
            "$ref": "#/components/parameters/permission_dateFrom"
          },
          {
            "$ref": "#/components/parameters/permission_dateTo"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "items": {
                      "description": "An array of permission resource.",
                      "items": {
                        "$ref": "#/components/schemas/association"
                      },
                      "type": "array"
                    },
                    "totalResults": {
                      "description": " The total number of permissions.",
                      "type": "integer"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "No Errors."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Bad request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Invalid login"
          },
          "403": {
            "description": "Do not have permission to retrieve the requested group's permissions."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Group not found."
          }
        },
        "security": [
          {
            "mtauth": []
          }
        ],
        "summary": "Retrieve a list of permissions for group",
        "tags": [
          "Groups",
          "Permissions"
        ]
      }
    },
    "/groups/{group_id}/permissions/grant": {
      "post": {
        "description": "- Authentication is required\n- You should have grant_administer_role or grant_role_for_blog (Need grant_administer_role when granting role having administer_blog)\n",
        "parameters": [
          {
            "in": "path",
            "name": "group_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "properties": {
                  "role_id": {
                    "description": "The role ID",
                    "type": "integer"
                  },
                  "site_id": {
                    "description": "The site ID",
                    "type": "integer"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "status": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "No Errors."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Bad request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Invalid login"
          },
          "403": {
            "description": "Do not have permission to grant a permission."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Site or Group not found"
          }
        },
        "security": [
          {
            "mtauth": []
          }
        ],
        "summary": "Grant permissions to group",
        "tags": [
          "Groups",
          "Permissions"
        ]
      }
    },
    "/groups/{group_id}/permissions/revoke": {
      "post": {
        "description": "- Authentication is required\n- You should have revoke_role(Need revoke_administer_role when granting role having administer_blog )\n",
        "parameters": [
          {
            "in": "path",
            "name": "group_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "properties": {
                  "role_id": {
                    "description": "The role ID",
                    "type": "integer"
                  },
                  "site_id": {
                    "description": "The site ID",
                    "type": "integer"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "status": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "No Errors."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Bad request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Invalid login"
          },
          "403": {
            "description": "Do not have permission to revoke a permission."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Site or Group not found"
          }
        },
        "security": [
          {
            "mtauth": []
          }
        ],
        "summary": "Revoke permissions from group",
        "tags": [
          "Groups",
          "Permissions"
        ]
      }
    },
    "/permissions": {
      "get": {
        "description": "- Authentication is required\n- Need Administer privilege.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/permission_limit"
          },
          {
            "$ref": "#/components/parameters/permission_offset"
          },
          {
            "$ref": "#/components/parameters/permission_sortBy"
          },
          {
            "$ref": "#/components/parameters/permission_sortOrder"
          },
          {
            "$ref": "#/components/parameters/permission_fields"
          },
          {
            "$ref": "#/components/parameters/permission_blogIds"
          },
          {
            "$ref": "#/components/parameters/permission_dateField"
          },
          {
            "$ref": "#/components/parameters/permission_dateFrom"
          },
          {
            "$ref": "#/components/parameters/permission_dateTo"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "items": {
                      "description": "An array of permission resource.",
                      "items": {
                        "$ref": "#/components/schemas/permission"
                      },
                      "type": "array"
                    },
                    "totalResults": {
                      "description": " The total number of permissions.",
                      "type": "integer"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "No Errors."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Bad request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Invalid login"
          },
          "403": {
            "description": "Do not have permission to retrieve the list of permissions."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Site not found."
          }
        },
        "security": [
          {
            "mtauth": []
          }
        ],
        "summary": "Retrieve a list of permissions",
        "tags": [
          "Permissions"
        ]
      }
    },
    "/plugins": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "items": {
                      "description": "An array of plugin resource.",
                      "items": {
                        "$ref": "#/components/schemas/plugin"
                      },
                      "type": "array"
                    },
                    "totalResults": {
                      "description": " The total number of plugins.",
                      "type": "integer"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "No Errors."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Bad request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Invalid login"
          },
          "403": {
            "description": "Do not have permission to retrieve the list of plugins."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Site not found."
          }
        },
        "security": [
          {
            "mtauth": []
          }
        ],
        "summary": "Retrieve a list of plugins in the specified site",
        "tags": [
          "Plugins"
        ]
      }
    },
    "/plugins/disable": {
      "post": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "status": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "No Errors."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Bad request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Invalid login"
          },
          "403": {
            "description": "Do not have permission to disable all plugins."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Site or Plugin not found"
          }
        },
        "security": [
          {
            "mtauth": []
          }
        ],
        "summary": "Disable all plugins",
        "tags": [
          "Plugins"
        ]
      }
    },
    "/plugins/enable": {
      "post": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "status": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "No Errors."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Bad request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Invalid login"
          },
          "403": {
            "description": "Do not have permission to enable all plugins."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Site or Plugin not found"
          }
        },
        "security": [
          {
            "mtauth": []
          }
        ],
        "summary": "Enable all plugins",
        "tags": [
          "Plugins"
        ]
      }
    },
    "/plugins/{plugin_id}": {
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "plugin_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/plugin"
                }
              }
            },
            "description": "No Errors."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Bad request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Invalid login"
          },
          "403": {
            "description": "Do not have permission to retrieve the requested plugin."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Site or Plugin not found."
          }
        },
        "security": [
          {
            "mtauth": []
          }
        ],
        "summary": "Retrieve single plugin by its ID",
        "tags": [
          "Plugins"
        ]
      }
    },
    "/plugins/{plugin_id}/disable": {
      "post": {
        "parameters": [
          {
            "in": "path",
            "name": "plugin_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "status": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "No Errors."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Bad request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Invalid login"
          },
          "403": {
            "description": "Do not have permission to disable a plugin."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Site or Plugin not found"
          }
        },
        "security": [
          {
            "mtauth": []
          }
        ],
        "summary": "Disable a plugin",
        "tags": [
          "Plugins"
        ]
      }
    },
    "/plugins/{plugin_id}/enable": {
      "post": {
        "parameters": [
          {
            "in": "path",
            "name": "plugin_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "status": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "No Errors."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Bad request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Invalid login"
          },
          "403": {
            "description": "Do not have permission to enable a plugin."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Site or Plugin not found"
          }
        },
        "security": [
          {
            "mtauth": []
          }
        ],
        "summary": "Enable a plugin",
        "tags": [
          "Plugins"
        ]
      }
    },
    "/publish/contentData": {
      "get": {
        "description": "**Authentication Required** Publish content data. This endpoint requires following permissions.\n\n- Manage Content Data (site, sistem, each content type)\n- Edit All Content Data (each content type)\n",
        "parameters": [
          {
            "description": "Target site ID. Either blogID or blogIds must be specified.",
            "in": "query",
            "name": "blogId",
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "The comma separated site ID list. Either blogID or blogIds must be specified.",
            "in": "query",
            "name": "blogIds",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The comma separated content data ID list. You should specifiy this parameter to next call if this endpoint returns âRebuildingâ status and you want to continue to publish.",
            "in": "query",
            "name": "ids",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The string of build start time. You should specifiy this parameter to next call if this endpoint returns âRebuildingâ status and you want to continue to publish.",
            "in": "query",
            "name": "startTime",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "restIds": {
                      "description": "The comma separated content data ID list. You should specifiy this parameter to next call if this endpoint returns 'Rebuilding' status and you want to continue to publish.",
                      "type": "string"
                    },
                    "startTime": {
                      "description": "The string of build start time. You should specifiy this parameter to next call if this endpoint returns 'Rebuilding' status and you want to continue to publish.",
                      "type": "string"
                    },
                    "status": {
                      "description": "\"The result status of this call. `Rebuilding`: It means that there is still content that needs to be rebuilt. / `Complete`: Publishing process has been finished.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "No Errors"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Bad request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Invalid login"
          },
          "403": {
            "description": "Do not have permission to publish content_data."
          }
        },
        "security": [
          {
            "mtauth": []
          }
        ],
        "summary": "Publish Content Data",
        "tags": [
          "Content Data",
          "Publish"
        ]
      }
    },
    "/publish/entries": {
      "get": {
        "description": "Rebuild the static archives in relation to specified entries.\n\nAuthorization is required.\n",
        "parameters": [
          {
            "description": "This is an required parameter. The comma separated ID list of entries to rebuild.",
            "in": "query",
            "name": "ids",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "This is an optional parameter.",
            "in": "query",
            "name": "blogId",
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "This is an optional parameter.",
            "in": "query",
            "name": "startTime",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "restIds": {
                      "description": "The comma separated ID list of entries which has not been rebuilt",
                      "type": "string"
                    },
                    "startTime": {
                      "description": "The time which started rebuilding.",
                      "format": "date-time",
                      "type": "string"
                    },
                    "status": {
                      "description": "The status text of this rebuild.\n\n#### Rebuilding\n\nNot yet completed.\nUser should start next phase that implies by X-MT-Next-Phase-URL response header.\n(In JavaScript library, a next phase is started automatically.)\n\n#### Complete\n\nAll the static archives were rebuilded.\n",
                      "enum": [
                        "Rebuilding",
                        "Complete"
                      ],
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK",
            "headers": {
              "X-MT-Next-Phase-URL": {
                "description": "If status is \"Rebuilding\", user should start next phase that implies by this header, manually.(In JavaScript library, a next phase is started automatically.) ",
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Bad request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Invalid login"
          },
          "403": {
            "description": "Do not have permission to publish."
          }
        },
        "security": [
          {
            "mtauth": []
          }
        ],
        "summary": "Rebuild the static archives in relation to specified entries",
        "tags": [
          "Entries",
          "Publish"
        ]
      }
    },
    "/recover_password": {
      "post": {
        "description": "- This method always returns successful code if it does not found a user, because security reason.\n- Authentication is not required.\n\n#### Permissions\n\n- administer\n",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "properties": {
                  "email": {
                    "description": "Email address for user",
                    "type": "string"
                  },
                  "name": {
                    "description": "Name for user",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "status": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "No Errors."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Bad request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Invalid login"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Site or User not found"
          }
        },
        "summary": "Send the link for password recovery to specified email",
        "tags": [
          "Users"
        ]
      }
    },
    "/roles": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/role_search"
          },
          {
            "$ref": "#/components/parameters/role_searchFields"
          },
          {
            "$ref": "#/components/parameters/role_limit"
          },
          {
            "$ref": "#/components/parameters/role_offset"
          },
          {
            "$ref": "#/components/parameters/role_sortBy"
          },
          {
            "$ref": "#/components/parameters/role_sortOrder"
          },
          {
            "$ref": "#/components/parameters/role_fields"
          },
          {
            "$ref": "#/components/parameters/role_dateField"
          },
          {
            "$ref": "#/components/parameters/role_dateFrom"
          },
          {
            "$ref": "#/components/parameters/role_dateTo"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "items": {
                      "description": "An array of role resource. ",
                      "items": {
                        "$ref": "#/components/schemas/role"
                      },
                      "type": "array"
                    },
                    "totalResults": {
                      "description": " The total number of roles.",
                      "type": "integer"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Bad request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Invalid login"
          },
          "403": {
            "description": "Do not have permission to retrieve the list of roles."
          }
        },
        "security": [
          {
            "mtauth": []
          }
        ],
        "summary": "Retrieve a list of roles",
        "tags": [
          "Roles"
        ]
      },
      "post": {
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "properties": {
                  "role": {
                    "$ref": "#/components/schemas/role_updatable"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/role"
                }
              }
            },
            "description": "No Errors."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Bad request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Invalid login"
          },
          "403": {
            "description": "Do not have permission to create a role."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Site not found."
          }
        },
        "security": [
          {
            "mtauth": []
          }
        ],
        "summary": "Create a new role",
        "tags": [
          "Roles"
        ]
      }
    },
    "/roles/{role_id}": {
      "delete": {
        "description": "\n#### Notes\n- This method accepts DELETE and POST with __method=DELETE.\n",
        "parameters": [
          {
            "in": "path",
            "name": "role_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/role"
                }
              }
            },
            "description": "No Errors."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Bad request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Invalid login"
          },
          "403": {
            "description": "Do not have permission to delete a role."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Site or Role not found."
          },
          "405": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Request method is not DELETE or POST with __method=DELETE"
          }
        },
        "security": [
          {
            "mtauth": []
          }
        ],
        "summary": "Delete an existing role",
        "tags": [
          "Roles"
        ]
      },
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "role_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "$ref": "#/components/parameters/role_fields"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/role"
                }
              }
            },
            "description": "No Errors."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Bad request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Invalid login"
          },
          "403": {
            "description": "Do not have permission to retrieve the requested role."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Site or Role not found."
          }
        },
        "security": [
          {
            "mtauth": []
          }
        ],
        "summary": "Retrieve a single role by its ID",
        "tags": [
          "Roles"
        ]
      },
      "put": {
        "description": "\n#### Notes\n- This method accepts PUT and POST with __method=PUT.\n",
        "parameters": [
          {
            "in": "path",
            "name": "role_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "properties": {
                  "role": {
                    "$ref": "#/components/schemas/role_updatable"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/role"
                }
              }
            },
            "description": "No Errors."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Bad request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Invalid login"
          },
          "403": {
            "description": "Do not have permission to update a role."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Site or Role not found."
          },
          "405": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Request method is not PUT or POST with __method=PUT"
          }
        },
        "security": [
          {
            "mtauth": []
          }
        ],
        "summary": "Update an existing role",
        "tags": [
          "Roles"
        ]
      }
    },
    "/roles/{role_id}/permissions": {
      "get": {
        "description": "- Authentication is required\n\n#### Permissions\n\n- Administer\n",
        "parameters": [
          {
            "in": "path",
            "name": "role_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "$ref": "#/components/parameters/permission_limit"
          },
          {
            "$ref": "#/components/parameters/permission_offset"
          },
          {
            "$ref": "#/components/parameters/permission_sortBy"
          },
          {
            "$ref": "#/components/parameters/permission_sortOrder"
          },
          {
            "$ref": "#/components/parameters/permission_fields"
          },
          {
            "$ref": "#/components/parameters/permission_blogIds"
          },
          {
            "$ref": "#/components/parameters/permission_dateField"
          },
          {
            "$ref": "#/components/parameters/permission_dateFrom"
          },
          {
            "$ref": "#/components/parameters/permission_dateTo"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "items": {
                      "description": "An array of permission resource.",
                      "items": {
                        "$ref": "#/components/schemas/permission"
                      },
                      "type": "array"
                    },
                    "totalResults": {
                      "description": " The total number of permissions.",
                      "type": "integer"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "No Errors."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Bad request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Invalid login"
          },
          "403": {
            "description": "Do not have permission to retrieve the list of permissions."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Site or Role not found."
          }
        },
        "security": [
          {
            "mtauth": []
          }
        ],
        "summary": "Retrieve a list of permissions by role",
        "tags": [
          "Roles",
          "Permissions"
        ]
      }
    },
    "/search": {
      "get": {
        "parameters": [
          {
            "description": "Input `MTAuth accessToken={accessToken}`",
            "in": "header",
            "name": "X-MT-Authorization",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The search term.\n\nYou can specify search term, like [foo], [foo AND bar], 'foo NOT bar'.\n\nAlso, you can specify category filter, like [category:foo], [category:\"hoge OR 'foo bar'\"]\n\nAlso, you can specify author filter, like [author:Melody]\n\nAlso, you can specify Custom Fields filter, like [field:address:akasaka] in this case, address is basename of Custom Fields. akasaka is filter value.\n",
            "in": "query",
            "name": "search",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The site ID for search. If you want to specify multiple site ID, you must use IncludeBlogs.",
            "in": "query",
            "name": "blog_id",
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "The list of the site ID that will be included in the search it should be separated by comma.",
            "in": "query",
            "name": "IncludeBlogs",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The list of the site ID will be excluded from the search it should be separated by comma.",
            "in": "query",
            "name": "ExcludeBlogs",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Maximum number of entries to retrieve.\n\n**Default**: 20\n",
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "0-indexed offset.\n\n**Default**: 0\n",
            "in": "query",
            "name": "offset",
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "The sort column for the search results. Available values are as follows.\n\n#### created_on\n\nWill sort the entries by the authored on date.\n\n#### title\n\nWill sort the entries by title.\n",
            "in": "query",
            "name": "SearchSortBy",
            "schema": {
              "enum": [
                "created_on",
                "title"
              ],
              "type": "string"
            }
          },
          {
            "description": "Defines the sort order search results. Available values are as follows.\n\n#### ascend\n\nwill list the entries in chronological order (oldest entry at the top)\n\n#### descend\n\nwill list the entries in reverse chronological order (newest entry at the top).\n\n**Default**: ascend\n",
            "in": "query",
            "name": "SearchResultDisplay",
            "schema": {
              "default": "ascend",
              "enum": [
                "ascend",
                "descend"
              ],
              "type": "string"
            }
          },
          {
            "description": "Maximum number of entries to retrieve.\n\nNOTE: By default, \"SearchMaxResults\" override is disabled.\n\n**Default**: 20\n",
            "in": "query",
            "name": "SearchMaxResults",
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "Class name of the object to be searched. Available values are as follows.\n\n- entry: Search results will only contain entries.\n- page: Search results will only contain pages.\n",
            "in": "query",
            "name": "class",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "If 1 specified, searching content data only.",
            "in": "query",
            "name": "cdSearch",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "items": {
                      "description": "An array of Entries resource. ",
                      "items": {
                        "$ref": "#/components/schemas/entry"
                      },
                      "type": "array"
                    },
                    "totalResults": {
                      "description": " The total number of entries.",
                      "type": "integer"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Bad request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Invalid login"
          },
          "403": {
            "description": "Do not have permission to search objects."
          }
        },
        "summary": "Searching entries",
        "tags": [
          "Search"
        ]
      }
    },
    "/sites": {
      "get": {
        "parameters": [
          {
            "description": "Input `MTAuth accessToken={accessToken}`",
            "in": "header",
            "name": "X-MT-Authorization",
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/site_search"
          },
          {
            "$ref": "#/components/parameters/site_searchFields"
          },
          {
            "$ref": "#/components/parameters/site_limit"
          },
          {
            "$ref": "#/components/parameters/site_offset"
          },
          {
            "$ref": "#/components/parameters/site_sortBy"
          },
          {
            "$ref": "#/components/parameters/site_sortOrder"
          },
          {
            "$ref": "#/components/parameters/site_fields"
          },
          {
            "$ref": "#/components/parameters/site_includeIds"
          },
          {
            "$ref": "#/components/parameters/site_excludeIds"
          },
          {
            "$ref": "#/components/parameters/site_dateField"
          },
          {
            "$ref": "#/components/parameters/site_dateFrom"
          },
          {
            "$ref": "#/components/parameters/site_dateTo"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "items": {
                      "description": "An array of sites resource. The list will sorted descending by blog name. ",
                      "items": {
                        "$ref": "#/components/schemas/blog"
                      },
                      "type": "array"
                    },
                    "totalResults": {
                      "description": "The total number of sites found.",
                      "type": "integer"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "No Errors."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Bad request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Invalid login"
          },
          "403": {
            "description": "Do not have permission to retrieve the list of blogs."
          }
        },
        "summary": "Retrieve sites",
        "tags": [
          "Sites"
        ]
      },
      "post": {
        "description": "- Authorization is required.\n\n#### Permissions\n\n- create_website\n",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "properties": {
                  "website": {
                    "$ref": "#/components/schemas/blog_updatable"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/blog"
                }
              }
            },
            "description": "No Errors."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Bad request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Invalid login"
          },
          "403": {
            "description": "Do not have permission to create a website."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Site not found."
          }
        },
        "security": [
          {
            "mtauth": []
          }
        ],
        "summary": "Create a new website",
        "tags": [
          "Sites"
        ]
      }
    },
    "/sites/{site_id}": {
      "delete": {
        "description": "- Authorization is required.\n\n#### Permissions\n\n- delete_website (for website)\n- delete_blog (for blog)\n\n#### Notes\n- This method accepts DELETE and POST with __method=DELETE.\n",
        "parameters": [
          {
            "in": "path",
            "name": "site_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/blog"
                }
              }
            },
            "description": "No Errors."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Bad request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Invalid login"
          },
          "403": {
            "description": "Do not have permission to delete a site."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Site not found."
          },
          "405": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Request method is not DELETE or POST with __method=DELETE"
          }
        },
        "security": [
          {
            "mtauth": []
          }
        ],
        "summary": "Delete an existing blog or website",
        "tags": [
          "Sites"
        ]
      },
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "site_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "Input `MTAuth accessToken={accessToken}`",
            "in": "header",
            "name": "X-MT-Authorization",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "This is an optional parameter. The field list to retrieve as part of the Entries resource. If this parameter is not specified, All fields will be returned.",
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/blog"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Bad request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Invalid login"
          },
          "403": {
            "description": "Do not have permission to retrieve the requested blog."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Not Found"
          }
        },
        "summary": "Retrieve a single blog by its ID",
        "tags": [
          "Sites"
        ]
      },
      "post": {
        "description": "- Authorization is required.\n\n#### Permissions\n\n- create_blog\n",
        "parameters": [
          {
            "in": "path",
            "name": "site_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "properties": {
                  "blog": {
                    "$ref": "#/components/schemas/blog_updatable"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/blog"
                }
              }
            },
            "description": "No Errors."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Bad request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Invalid login"
          },
          "403": {
            "description": "Do not have permission to create a blog."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Site not found."
          }
        },
        "security": [
          {
            "mtauth": []
          }
        ],
        "summary": "Create a new blog",
        "tags": [
          "Sites"
        ]
      },
      "put": {
        "description": "- Authorization is required.\n\n#### Permissions\n\n- edit_blog_config\n\n#### Notes\n- This method accepts PUT and POST with __method=PUT.\n",
        "parameters": [
          {
            "in": "path",
            "name": "site_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "properties": {
                  "website": {
                    "$ref": "#/components/schemas/blog_updatable"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/blog"
                }
              }
            },
            "description": "No Errors."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Bad request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Invalid login"
          },
          "403": {
            "description": "Do not have permission to update a site."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Site not found."
          },
          "405": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Request method is not PUT or POST with __method=PUT"
          }
        },
        "security": [
          {
            "mtauth": []
          }
        ],
        "summary": "Update an existing blog or website",
        "tags": [
          "Sites"
        ]
      }
    },
    "/sites/{site_id}/assets": {
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "site_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "Input `MTAuth accessToken={accessToken}`",
            "in": "header",
            "name": "X-MT-Authorization",
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/asset_search"
          },
          {
            "$ref": "#/components/parameters/asset_searchFields"
          },
          {
            "$ref": "#/components/parameters/asset_limit"
          },
          {
            "$ref": "#/components/parameters/asset_offset"
          },
          {
            "description": "The target asset class to retrieve. Supported values are image, audio, video, file and any values added by plugins. If you want to retrieve multiple classes, specify the values separated by commas.",
            "in": "query",
            "name": "class",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "#### file_name\n\nSort by the filename of each asset.\n\n#### created_by\n\nSort by the ID of user who created each asset.\n\n#### created_on\n\n(default) Sort by the created time of each asset.\n\n**Default**: created_on\n",
            "in": "query",
            "name": "sortBy",
            "schema": {
              "default": "created_on",
              "enum": [
                "file_name",
                "created_by",
                "created_on"
              ],
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/asset_sortOrder"
          },
          {
            "$ref": "#/components/parameters/asset_fields"
          },
          {
            "description": "If you want to retrieve related assets (e.g. thumbnail, popup html) that generated by original asset, you should specify this parameter as true.",
            "in": "query",
            "name": "relatedAssets",
            "schema": {
              "enum": [
                0,
                1
              ],
              "type": "integer"
            }
          },
          {
            "$ref": "#/components/parameters/asset_dateField"
          },
          {
            "$ref": "#/components/parameters/asset_dateFrom"
          },
          {
            "$ref": "#/components/parameters/asset_dateTo"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "items": {
                      "items": {
                        "$ref": "#/components/schemas/asset"
                      },
                      "type": "array"
                    },
                    "totalResults": {
                      "type": "integer"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "No Errors."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Bad request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Invalid login"
          },
          "403": {
            "description": "Do not have permission to retrieve the requested assets."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Site not found."
          }
        },
        "summary": "Retrieve assets in the specified site",
        "tags": [
          "Assets"
        ]
      }
    },
    "/sites/{site_id}/assets/upload": {
      "post": {
        "deprecated": true,
        "description": "This endpoint is marked as deprecated in v2.0.\n\nUpload single file to specific site.\n\n#### Permissions\n\n- upload\n",
        "parameters": [
          {
            "in": "path",
            "name": "site_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "properties": {
                  "autoRenameIfExists": {
                    "description": "If this value is \"1\" and the file with the same filename exists, the uploaded file is automatically renamed to the random generated name. Default is \"0\".",
                    "enum": [
                      0,
                      1
                    ],
                    "type": "integer"
                  },
                  "file": {
                    "description": "The actual file data",
                    "format": "binary",
                    "type": "string"
                  },
                  "normalizeOrientation": {
                    "description": "If this value is \"1\" and the uploaded file has a orientation information in Exif, this file's orientation is automatically normalized. Default is \"1\".",
                    "enum": [
                      0,
                      1
                    ],
                    "type": "integer"
                  },
                  "path": {
                    "description": "The upload destination. You can specify the path to the under the site path.",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/asset"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Bad request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Invalid login"
          },
          "403": {
            "description": "Do not have permission to upload."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Not Found"
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "properties": {
                        "code": {
                          "type": "integer"
                        },
                        "data": {
                          "properties": {
                            "fileName": {
                              "type": "string"
                            },
                            "path": {
                              "type": "string"
                            },
                            "temp": {
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "message": {
                          "type": "string"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Conflict"
          }
        },
        "security": [
          {
            "mtauth": []
          }
        ],
        "summary": "Upload a file",
        "tags": [
          "Assets"
        ]
      }
    },
    "/sites/{site_id}/assets/{asset_id}": {
      "delete": {
        "description": "- Authorization is required.\n\n#### Permissions\n\n- Manage Assets\n\n#### Notes\n- This method accepts DELETE and POST with __method=DELETE.\n",
        "parameters": [
          {
            "in": "path",
            "name": "site_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "asset_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/asset"
                }
              }
            },
            "description": "No Errors."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Bad request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Invalid login"
          },
          "403": {
            "description": "Do not have permission to delete an asset."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Asset (or site) not found."
          },
          "405": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Request method is not DELETE or POST with __method=DELETE"
          }
        },
        "security": [
          {
            "mtauth": []
          }
        ],
        "summary": "Delete an asset",
        "tags": [
          "Assets"
        ]
      },
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "site_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "asset_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "Input `MTAuth accessToken={accessToken}`",
            "in": "header",
            "name": "X-MT-Authorization",
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/asset_fields"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/asset"
                }
              }
            },
            "description": "No Errors."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Bad request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Invalid login"
          },
          "403": {
            "description": "Do not have permission to retrieve the requested asset."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Asset (or site) not found."
          }
        },
        "summary": "Retrieve single asset by its ID",
        "tags": [
          "Assets"
        ]
      },
      "put": {
        "description": "- Authorization is required.\n\n#### Permissions\n\n- Manage Assets\n\n#### Notes\n- This method accepts PUT and POST with __method=PUT.\n",
        "parameters": [
          {
            "in": "path",
            "name": "site_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "asset_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "properties": {
                  "asset": {
                    "$ref": "#/components/schemas/asset_updatable"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/asset"
                }
              }
            },
            "description": "No Errors."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Bad request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Invalid login"
          },
          "403": {
            "description": "Do not have permission to update an asset."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Asset (or site) not found."
          },
          "405": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Request method is not PUT or POST with __method=PUT"
          }
        },
        "security": [
          {
            "mtauth": []
          }
        ],
        "summary": "Update an asset",
        "tags": [
          "Assets"
        ]
      }
    },
    "/sites/{site_id}/assets/{asset_id}/entries": {
      "get": {
        "description": "- Authorization is required to include unpublished entries.\n\n#### Permissions\n\n- edit_entry\n  - to retrieve unpublished entry\n",
        "parameters": [
          {
            "in": "path",
            "name": "site_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "asset_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "Input `MTAuth accessToken={accessToken}`",
            "in": "header",
            "name": "X-MT-Authorization",
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/entry_search"
          },
          {
            "$ref": "#/components/parameters/entry_searchFields"
          },
          {
            "$ref": "#/components/parameters/entry_limit"
          },
          {
            "$ref": "#/components/parameters/entry_offset"
          },
          {
            "$ref": "#/components/parameters/entry_sortBy"
          },
          {
            "$ref": "#/components/parameters/entry_sortOrder"
          },
          {
            "$ref": "#/components/parameters/entry_fields"
          },
          {
            "$ref": "#/components/parameters/entry_includeIds"
          },
          {
            "$ref": "#/components/parameters/entry_excludeIds"
          },
          {
            "$ref": "#/components/parameters/entry_status"
          },
          {
            "$ref": "#/components/parameters/entry_maxComments"
          },
          {
            "$ref": "#/components/parameters/entry_maxTrackbacks"
          },
          {
            "$ref": "#/components/parameters/entry_no_text_filter"
          },
          {
            "$ref": "#/components/parameters/entry_dateField"
          },
          {
            "$ref": "#/components/parameters/entry_dateFrom"
          },
          {
            "$ref": "#/components/parameters/entry_dateTo"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "items": {
                      "description": "An array of Entries resource. ",
                      "items": {
                        "$ref": "#/components/schemas/entry"
                      },
                      "type": "array"
                    },
                    "totalResults": {
                      "description": " The total number of entries.",
                      "type": "integer"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Bad request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Invalid login"
          },
          "403": {
            "description": "Do not have permission to retrieve the list of entries."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Site or Asset not found."
          }
        },
        "summary": "Retrieve a list of entries that related with specific asset",
        "tags": [
          "Entries",
          "Assets"
        ]
      }
    },
    "/sites/{site_id}/assets/{asset_id}/pages": {
      "get": {
        "description": "- Authorization is required to include unpublished pages.\n\n#### Permissions\n\n- manage_pages\n  - to retrieve unpublished page\n",
        "parameters": [
          {
            "in": "path",
            "name": "site_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "asset_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "Input `MTAuth accessToken={accessToken}`",
            "in": "header",
            "name": "X-MT-Authorization",
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/page_search"
          },
          {
            "$ref": "#/components/parameters/page_searchFields"
          },
          {
            "$ref": "#/components/parameters/page_limit"
          },
          {
            "$ref": "#/components/parameters/page_offset"
          },
          {
            "$ref": "#/components/parameters/page_sortBy"
          },
          {
            "$ref": "#/components/parameters/page_sortOrder"
          },
          {
            "$ref": "#/components/parameters/page_fields"
          },
          {
            "$ref": "#/components/parameters/page_includeIds"
          },
          {
            "$ref": "#/components/parameters/page_excludeIds"
          },
          {
            "$ref": "#/components/parameters/page_status"
          },
          {
            "$ref": "#/components/parameters/page_maxComments"
          },
          {
            "$ref": "#/components/parameters/page_maxTrackbacks"
          },
          {
            "$ref": "#/components/parameters/page_no_text_filter"
          },
          {
            "$ref": "#/components/parameters/page_dateField"
          },
          {
            "$ref": "#/components/parameters/page_dateFrom"
          },
          {
            "$ref": "#/components/parameters/page_dateTo"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "items": {
                      "description": "An array of page resource.",
                      "items": {
                        "$ref": "#/components/schemas/page"
                      },
                      "type": "array"
                    },
                    "totalResults": {
                      "description": " The total number of pages.",
                      "type": "integer"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "No Errors."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Bad request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Invalid login"
          },
          "403": {
            "description": "Do not have permission to retrieve the requested pages."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Site or Asset not found."
          }
        },
        "summary": "Retrieve a list of pages that related with specific asset",
        "tags": [
          "Pages",
          "Assets"
        ]
      }
    },
    "/sites/{site_id}/assets/{asset_id}/thumbnail": {
      "get": {
        "description": "This endpoint requires one of parameter 'width' or 'height' or 'scale' Also, cannot use these parameters at same time.\n",
        "parameters": [
          {
            "in": "path",
            "name": "site_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "asset_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "The width of the thumbnail to generate. If this is the only parameter specified then the thumbnail's width will be scaled proportionally to the height. When a value longer than the original image is specified, it will be ignored.",
            "in": "query",
            "name": "width",
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "The height of the thumbnail to generate. If this is the only parameter specified then the thumbnail's height will be scaled proportionally to the width. When both of height and width are specified, the longer side of the original image will be processed, and the lesser side will be scaled proportionally.",
            "in": "query",
            "name": "height",
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "The percentage by which to reduce or increase the size of the current asset.",
            "in": "query",
            "name": "scale",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "If set to \"1\" then the thumbnail generated will be square, where the length of each side of the square will be equal to the shortest side of the image.",
            "in": "query",
            "name": "square",
            "schema": {
              "enum": [
                0,
                1
              ],
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "height": {
                      "type": "integer"
                    },
                    "url": {
                      "type": "string"
                    },
                    "width": {
                      "type": "integer"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "No Errors."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Bad request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Invalid login"
          },
          "403": {
            "description": "Do not have permission to retrieve the requested thumbnail."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Asset (or site) not found."
          }
        },
        "summary": "Get thumbnail of an asset",
        "tags": [
          "Assets"
        ]
      }
    },
    "/sites/{site_id}/backup": {
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "site_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "backupFiles": {
                      "items": {
                        "type": "string"
                      },
                      "type": "array"
                    },
                    "status": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "No Errors."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Bad request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Invalid login"
          },
          "403": {
            "description": "Do not have permission to back up the requested site."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Site not found"
          }
        },
        "security": [
          {
            "mtauth": []
          }
        ],
        "summary": "Backup specified site",
        "tags": [
          "Sites",
          "BackupRestore"
        ]
      }
    },
    "/sites/{site_id}/categories": {
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "site_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "Input `MTAuth accessToken={accessToken}`",
            "in": "header",
            "name": "X-MT-Authorization",
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/category_search"
          },
          {
            "$ref": "#/components/parameters/category_searchFields"
          },
          {
            "$ref": "#/components/parameters/category_limit"
          },
          {
            "$ref": "#/components/parameters/category_offset"
          },
          {
            "description": "#### user_custom\n\nSort order you specified on the Manage Categories screen.\n\n#### created_by\n\nSort by the ID of user who created each category.\n\n#### id\n\nSort by the ID of each category.\n\n#### basename\nSort by the basename of each category.\n\n#### label\n\nSort by the label of each category.\n\n**Default**: user_custom\n",
            "in": "query",
            "name": "sortBy",
            "schema": {
              "default": "user_custom",
              "enum": [
                "user_custom",
                "created_by",
                "id",
                "basename",
                "label"
              ],
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/category_sortOrder"
          },
          {
            "$ref": "#/components/parameters/category_fields"
          },
          {
            "description": "If set to 1, retrieves only top level categories. New in v2\n\n**Default**: 0\n",
            "in": "query",
            "name": "top",
            "schema": {
              "default": 0,
              "enum": [
                0,
                1
              ],
              "type": "integer"
            }
          },
          {
            "$ref": "#/components/parameters/category_includeIds"
          },
          {
            "$ref": "#/components/parameters/category_excludeIds"
          },
          {
            "$ref": "#/components/parameters/category_dateField"
          },
          {
            "$ref": "#/components/parameters/category_dateFrom"
          },
          {
            "$ref": "#/components/parameters/category_dateTo"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "items": {
                      "items": {
                        "$ref": "#/components/schemas/category"
                      },
                      "type": "array"
                    },
                    "totalResults": {
                      "type": "integer"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "No Errors."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Bad request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Invalid login"
          },
          "403": {
            "description": "Do not have permission to retrieve the list of categories."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Site not found."
          }
        },
        "summary": "Retrieve categories in the specified site",
        "tags": [
          "Categories"
        ]
      },
      "post": {
        "description": "Authorization is required.\n\n#### Permission\n\n- Manage Categories\n",
        "parameters": [
          {
            "in": "path",
            "name": "site_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "properties": {
                  "category": {
                    "$ref": "#/components/schemas/category_updatable"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/category"
                }
              }
            },
            "description": "No Errors."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Bad request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Invalid login"
          },
          "403": {
            "description": "Do not have permission to create a category."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Site not found."
          }
        },
        "security": [
          {
            "mtauth": []
          }
        ],
        "summary": "Create a new category",
        "tags": [
          "Categories"
        ]
      }
    },
    "/sites/{site_id}/categories/permutate": {
      "post": {
        "description": "- Authorization is required.\n- This method returns rearranged Categories resource.\n\n#### Permission\n\n- Manage Categories\n",
        "parameters": [
          {
            "in": "path",
            "name": "site_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "properties": {
                  "categories": {
                    "description": "Array of category resource that were rearranged.",
                    "example": "[\n  { \"id\": 0 },\n  { \"id\": 1 } \n]\n",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/category"
                  },
                  "type": "array"
                }
              }
            },
            "description": "No Errors."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Bad request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Invalid login"
          },
          "403": {
            "description": "Do not have permission to permutate categories."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Site not found."
          }
        },
        "security": [
          {
            "mtauth": []
          }
        ],
        "summary": "Rearrange existing categories in a new order",
        "tags": [
          "Categories"
        ]
      }
    },
    "/sites/{site_id}/categories/{category_id}": {
      "delete": {
        "description": "- Authorization is required.\n- This method returns deleted Category resource.\n\n#### Permission\n\n- Manage Categories\n\n#### Notes\n- This method accepts DELETE and POST with __method=DELETE.\n",
        "parameters": [
          {
            "in": "path",
            "name": "site_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "category_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/category"
                }
              }
            },
            "description": "No Errors."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Bad request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Invalid login"
          },
          "403": {
            "description": "Do not have permission to delete a category."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Site or Category not found."
          },
          "405": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Request method is not DELETE or POST with __method=DELETE"
          }
        },
        "security": [
          {
            "mtauth": []
          }
        ],
        "summary": "Delete an existing category",
        "tags": [
          "Categories"
        ]
      },
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "site_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "category_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "Input `MTAuth accessToken={accessToken}`",
            "in": "header",
            "name": "X-MT-Authorization",
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/category_fields"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/category"
                }
              }
            },
            "description": "No Errors."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Bad request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Invalid login"
          },
          "403": {
            "description": "Do not have permission to retrieve the requested category."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Category or site not found."
          }
        },
        "summary": "Retrieve single category by its ID",
        "tags": [
          "Categories"
        ]
      },
      "put": {
        "description": "- Authorization is required.\n\n#### Permission\n\n- Manage Categories\n\n#### Notes\n- This method accepts PUT and POST with __method=PUT.\n",
        "parameters": [
          {
            "in": "path",
            "name": "site_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "category_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "properties": {
                  "category": {
                    "$ref": "#/components/schemas/category_updatable"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/category"
                }
              }
            },
            "description": "No Errors."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Bad request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Invalid login"
          },
          "403": {
            "description": "Do not have permission to update a category."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Site or Category not found."
          },
          "405": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Request method is not PUT or POST with __method=PUT"
          }
        },
        "security": [
          {
            "mtauth": []
          }
        ],
        "summary": "Update an existing category",
        "tags": [
          "Categories"
        ]
      }
    },
    "/sites/{site_id}/categories/{category_id}/children": {
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "site_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "category_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "Input `MTAuth accessToken={accessToken}`",
            "in": "header",
            "name": "X-MT-Authorization",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The depth of retrieving parent categories.\n\n**Default**: 0\n",
            "in": "query",
            "name": "maxDepth",
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "#### 1\n\nThe list does not include current category.\n\n#### 0\n\nThe list includes current category.\n\n**Default**: 0\n",
            "in": "query",
            "name": "includeCurrent",
            "schema": {
              "default": 0,
              "enum": [
                0,
                1
              ],
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "items": {
                      "items": {
                        "$ref": "#/components/schemas/category"
                      },
                      "type": "array"
                    },
                    "totalResults": {
                      "type": "integer"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "No Errors."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Bad request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Invalid login"
          },
          "403": {
            "description": "Do not have permission to retrieve the list of categories."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Site or Category not found."
          }
        },
        "summary": "Retrieve child categories from the specified category",
        "tags": [
          "Categories"
        ]
      }
    },
    "/sites/{site_id}/categories/{category_id}/entries": {
      "get": {
        "description": "- Authorization is required to include unpublished entries.\n\n#### Permissions\n\n- edit_entry\n  - to retrieve unpublished entry\n",
        "parameters": [
          {
            "in": "path",
            "name": "site_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "category_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "Input `MTAuth accessToken={accessToken}`",
            "in": "header",
            "name": "X-MT-Authorization",
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/entry_search"
          },
          {
            "$ref": "#/components/parameters/entry_searchFields"
          },
          {
            "$ref": "#/components/parameters/entry_limit"
          },
          {
            "$ref": "#/components/parameters/entry_offset"
          },
          {
            "$ref": "#/components/parameters/entry_sortBy"
          },
          {
            "$ref": "#/components/parameters/entry_sortOrder"
          },
          {
            "$ref": "#/components/parameters/entry_fields"
          },
          {
            "$ref": "#/components/parameters/entry_includeIds"
          },
          {
            "$ref": "#/components/parameters/entry_excludeIds"
          },
          {
            "$ref": "#/components/parameters/entry_status"
          },
          {
            "$ref": "#/components/parameters/entry_maxComments"
          },
          {
            "$ref": "#/components/parameters/entry_maxTrackbacks"
          },
          {
            "$ref": "#/components/parameters/entry_no_text_filter"
          },
          {
            "$ref": "#/components/parameters/entry_dateField"
          },
          {
            "$ref": "#/components/parameters/entry_dateFrom"
          },
          {
            "$ref": "#/components/parameters/entry_dateTo"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "items": {
                      "description": "An array of Entries resource. ",
                      "items": {
                        "$ref": "#/components/schemas/entry"
                      },
                      "type": "array"
                    },
                    "totalResults": {
                      "description": " The total number of entries.",
                      "type": "integer"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Bad request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Invalid login"
          },
          "403": {
            "description": "Do not have permission to retrieve the list of entries."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Site or Category not found."
          }
        },
        "summary": "Retrieve a list of entries by specific category",
        "tags": [
          "Entries",
          "Categories"
        ]
      }
    },
    "/sites/{site_id}/categories/{category_id}/parents": {
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "site_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "category_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "Input `MTAuth accessToken={accessToken}`",
            "in": "header",
            "name": "X-MT-Authorization",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The depth of retrieving parent categories.\n\n**Default**: 0\n",
            "in": "query",
            "name": "maxDepth",
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "#### 1\n\nThe list does not include current category.\n\n#### 0\n\nThe list includes current category.\n\n**Default**: 0\n",
            "in": "query",
            "name": "includeCurrent",
            "schema": {
              "default": 0,
              "enum": [
                0,
                1
              ],
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "items": {
                      "items": {
                        "$ref": "#/components/schemas/category"
                      },
                      "type": "array"
                    },
                    "totalResults": {
                      "type": "integer"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "No Errors."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Bad request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Invalid login"
          },
          "403": {
            "description": "Do not have permission to retrieve the list of categories."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Site or Category not found."
          }
        },
        "summary": "Retrieve parent categories from the specified category",
        "tags": [
          "Categories"
        ]
      }
    },
    "/sites/{site_id}/categories/{category_id}/siblings": {
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "site_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "category_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "Input `MTAuth accessToken={accessToken}`",
            "in": "header",
            "name": "X-MT-Authorization",
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/category_search"
          },
          {
            "$ref": "#/components/parameters/category_searchFields"
          },
          {
            "$ref": "#/components/parameters/category_limit"
          },
          {
            "$ref": "#/components/parameters/category_offset"
          },
          {
            "description": "#### user_custom\n\nSort order you specified on the Manage Categories screen.\n\n#### created_by\n\nSort by the ID of user who created each category.\n\n#### id\n\nSort by the ID of each category.\n\n#### basename\n\nSort by the basename of each category.\n\n#### label\n\nSort by the label of each category.\n\n**Default**: user_custom\n",
            "in": "query",
            "name": "sortBy",
            "schema": {
              "default": "user_custom",
              "enum": [
                "user_custom",
                "created_by",
                "id",
                "basename",
                "label"
              ],
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/category_sortOrder"
          },
          {
            "$ref": "#/components/parameters/category_fields"
          },
          {
            "description": "If set to 1, retrieves only top level categories. New in v2\n\n**Default**: 0\n",
            "in": "query",
            "name": "top",
            "schema": {
              "default": 0,
              "enum": [
                0,
                1
              ],
              "type": "integer"
            }
          },
          {
            "$ref": "#/components/parameters/category_includeIds"
          },
          {
            "$ref": "#/components/parameters/category_excludeIds"
          },
          {
            "$ref": "#/components/parameters/category_dateField"
          },
          {
            "$ref": "#/components/parameters/category_dateFrom"
          },
          {
            "$ref": "#/components/parameters/category_dateTo"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "items": {
                      "items": {
                        "$ref": "#/components/schemas/category"
                      },
                      "type": "array"
                    },
                    "totalResults": {
                      "type": "integer"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "No Errors."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Bad request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Invalid login"
          },
          "403": {
            "description": "Do not have permission to retrieve the list of categories."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Site or Category not found."
          }
        },
        "summary": "Retrieve siblings categories from the specified category",
        "tags": [
          "Categories"
        ]
      }
    },
    "/sites/{site_id}/categorySets": {
      "get": {
        "description": "Retrieve list of category set in the specified site. Authentication required if you want retrieve private field in categorySet resource. Required permissions are as follows.\n\n- Manage Category Set\n- If you use search parameter, you must specify search parameter with searchFields parameter. (This will be fixed in a future release.)\n",
        "parameters": [
          {
            "in": "path",
            "name": "site_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "Input `MTAuth accessToken={accessToken}`",
            "in": "header",
            "name": "X-MT-Authorization",
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/category_set_search"
          },
          {
            "$ref": "#/components/parameters/category_set_searchFields"
          },
          {
            "$ref": "#/components/parameters/category_set_limit"
          },
          {
            "$ref": "#/components/parameters/category_set_offset"
          },
          {
            "description": "The field name for sort. You can specify one of following values.\n\n- id\n- name\n- created_on\n- modified_on\n- content_type_count\n",
            "in": "query",
            "name": "sortBy",
            "schema": {
              "default": "name",
              "enum": [
                "id",
                "name",
                "created_on",
                "modified_on",
                "content_type_count"
              ],
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/category_set_sortOrder"
          },
          {
            "$ref": "#/components/parameters/category_set_fields"
          },
          {
            "$ref": "#/components/parameters/category_set_includeIds"
          },
          {
            "$ref": "#/components/parameters/category_set_excludeIds"
          },
          {
            "$ref": "#/components/parameters/category_set_dateField"
          },
          {
            "$ref": "#/components/parameters/category_set_dateFrom"
          },
          {
            "$ref": "#/components/parameters/category_set_dateTo"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "items": {
                      "items": {
                        "$ref": "#/components/schemas/category_set"
                      },
                      "type": "array"
                    },
                    "totalResults": {
                      "type": "integer"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "No Errors."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Bad request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Invalid login"
          },
          "403": {
            "description": "Do not have permission to retrieve the list of category sets."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Site not found."
          }
        },
        "summary": "Category Set Collection",
        "tags": [
          "Category Sets"
        ]
      },
      "post": {
        "description": "**Authentication Required**\n\nCreate a new category set. This endpoint requires following permissions.\n\n- Manage Category Set\n\nPost form data is following\n\n- category_set (CategorySet) - Single CategorySet resource\n",
        "parameters": [
          {
            "in": "path",
            "name": "site_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "properties": {
                  "category_set": {
                    "$ref": "#/components/schemas/category_set_updatable"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/category_set"
                }
              }
            },
            "description": "No Errors."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Bad request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Invalid login"
          },
          "403": {
            "description": "Do not have permission to create a category set."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Site not found."
          }
        },
        "security": [
          {
            "mtauth": []
          }
        ],
        "summary": "Create a new category set",
        "tags": [
          "Category Sets"
        ]
      }
    },
    "/sites/{site_id}/categorySets/{category_set_id}": {
      "delete": {
        "description": "**Authentication required** Delete a single category set. This endpoint requires following permissions.\n\n- Manage Category Set\n\n#### Notes\n- This method accepts DELETE and POST with __method=DELETE.\n",
        "parameters": [
          {
            "in": "path",
            "name": "site_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "category_set_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/category_set"
                }
              }
            },
            "description": "No Errors."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Bad request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Invalid login"
          },
          "403": {
            "description": "Do not have permission to delete a category set."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Site or Category_set not found."
          },
          "405": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Request method is not DELETE or POST with __method=DELETE"
          }
        },
        "security": [
          {
            "mtauth": []
          }
        ],
        "summary": "Delete category set",
        "tags": [
          "Category Sets"
        ]
      },
      "get": {
        "description": "Fetch a single category set. Authentication required if you want retrieve private field in categorySet resource. Required permissions are as follows.\n\n- Manage Category Set\n",
        "parameters": [
          {
            "in": "path",
            "name": "site_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "category_set_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "Input `MTAuth accessToken={accessToken}`",
            "in": "header",
            "name": "X-MT-Authorization",
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/category_set_fields"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/category_set"
                }
              }
            },
            "description": "No Errors."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Bad request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Invalid login"
          },
          "403": {
            "description": "Do not have permission to retrieve the requested category set."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Site or Category_set not found."
          }
        },
        "summary": "Fetch single category set",
        "tags": [
          "Category Sets"
        ]
      },
      "put": {
        "description": "**Authentication required** Update single category set. This endpoint requires following permissions.\n\n- Manage Category Set\n\nCannot update/insert/delete categories by this endpoint. If you want to manage categories in category set, please use Categories API.\n\n#### Notes\n- This method accepts PUT and POST with __method=PUT.\n",
        "parameters": [
          {
            "in": "path",
            "name": "site_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "category_set_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "properties": {
                  "category_set": {
                    "$ref": "#/components/schemas/category_set_updatable"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/category_set"
                }
              }
            },
            "description": "No Errors."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Bad request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Invalid login"
          },
          "403": {
            "description": "Do not have permission to update a category set."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Site or Category_set not found."
          },
          "405": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Request method is not PUT or POST with __method=PUT"
          }
        },
        "security": [
          {
            "mtauth": []
          }
        ],
        "summary": "Update category set",
        "tags": [
          "Category Sets"
        ]
      }
    },
    "/sites/{site_id}/categorySets/{category_set_id}/categories": {
      "get": {
        "description": "Retrieve list of categories of the specified category set.",
        "parameters": [
          {
            "in": "path",
            "name": "site_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "category_set_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "Input `MTAuth accessToken={accessToken}`",
            "in": "header",
            "name": "X-MT-Authorization",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The depth of retrieving parent categories.",
            "in": "query",
            "name": "maxDepth",
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "- 1: The list does not include current category.\n- 0: The list includes current category.\n",
            "in": "query",
            "name": "includeCurrent",
            "schema": {
              "default": 0,
              "enum": [
                0,
                1
              ],
              "type": "integer"
            }
          },
          {
            "$ref": "#/components/parameters/category_dateField"
          },
          {
            "$ref": "#/components/parameters/category_dateFrom"
          },
          {
            "$ref": "#/components/parameters/category_dateTo"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "items": {
                      "items": {
                        "$ref": "#/components/schemas/category"
                      },
                      "type": "array"
                    },
                    "totalResults": {
                      "type": "integer"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "No Errors."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Bad request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Invalid login"
          },
          "403": {
            "description": "Do not have permission to retrieve the requested categories for category set. "
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Site or Category_set not found."
          }
        },
        "summary": "Category Collection for category set",
        "tags": [
          "Categories",
          "Category Sets"
        ]
      },
      "post": {
        "description": "**Authentication required.**\n\nCreate a new category in category set. This endpoint needs following permissions.\n\n- Manage Category Set\n\nPost form data is following:\n\n- category (Category) - Category resource\n",
        "parameters": [
          {
            "in": "path",
            "name": "site_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "category_set_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "properties": {
                  "category": {
                    "$ref": "#/components/schemas/category_updatable"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/category"
                }
              }
            },
            "description": "No Errors."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Bad request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Invalid login"
          },
          "403": {
            "description": "Do not have permission to create a category for category set."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Site pr Category_set not found."
          }
        },
        "security": [
          {
            "mtauth": []
          }
        ],
        "summary": "Create a new category for category set",
        "tags": [
          "Categories",
          "Category Sets"
        ]
      }
    },
    "/sites/{site_id}/categorySets/{category_set_id}/categories/permutate": {
      "post": {
        "description": "**Authentication required.**\n\nSave hierarchical categories order. This endpoint need folllowing permissions.\n\n- Manage Category Set\n\nThis method returns rearranged Categories collection.\n\nPost form data is following:\n\n- categories (array[Category]) - Array of Categories resource that were rearranged.\n\n",
        "parameters": [
          {
            "in": "path",
            "name": "site_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "category_set_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "properties": {
                  "categories": {
                    "description": "Array of category resource that were rearranged.",
                    "example": "[\n  { \"id\": 0 },\n  { \"id\": 1 } \n]\n",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/category"
                  },
                  "type": "array"
                }
              }
            },
            "description": "No Errors."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Bad request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Invalid login"
          },
          "403": {
            "description": "Do not have permission to permutate categories for category set."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Site or Category_set not found."
          }
        },
        "security": [
          {
            "mtauth": []
          }
        ],
        "summary": "Save hierarchical categories order in category set",
        "tags": [
          "Categories",
          "Category Sets"
        ]
      }
    },
    "/sites/{site_id}/categorySets/{category_set_id}/categories/{category_id}": {
      "delete": {
        "description": "**Authentication required.**\n\nUpdate an existing category. This endpoint need folllowing permissions.\n\n- Manage Category Set\n\n#### Notes\n- This method accepts DELETE and POST with __method=DELETE.\n",
        "parameters": [
          {
            "in": "path",
            "name": "site_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "category_set_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "category_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/category"
                }
              }
            },
            "description": "No Errors."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Bad request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Invalid login"
          },
          "403": {
            "description": "Do not have permission to delete a category for category set."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Site or Category_set or Category not found."
          },
          "405": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Request method is not DELETE or POST with __method=DELETE"
          }
        },
        "security": [
          {
            "mtauth": []
          }
        ],
        "summary": "Delete single category in category set",
        "tags": [
          "Categories",
          "Category Sets"
        ]
      },
      "get": {
        "description": "Retrieve a single category by its ID.",
        "parameters": [
          {
            "in": "path",
            "name": "site_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "category_set_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "category_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "Input `MTAuth accessToken={accessToken}`",
            "in": "header",
            "name": "X-MT-Authorization",
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/category_fields"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/category"
                }
              }
            },
            "description": "No Errors."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Bad request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Invalid login"
          },
          "403": {
            "description": "Do not have permission to retrieve the requested category for category set."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Category or site not found."
          }
        },
        "summary": "Fetch single category in category set",
        "tags": [
          "Categories",
          "Category Sets"
        ]
      },
      "put": {
        "description": "**Authentication required.**\n\nUpdate an existing category. This endpoint need folllowing permissions.\n\n- Manage Categoy Set\n\nPost form data is following:\n\n- category (Category) - Category resource\n\n#### Notes\n- This method accepts PUT and POST with __method=PUT.\n",
        "parameters": [
          {
            "in": "path",
            "name": "site_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "category_set_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "category_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "properties": {
                  "category": {
                    "$ref": "#/components/schemas/category_updatable"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/category"
                }
              }
            },
            "description": "No Errors."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Bad request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Invalid login"
          },
          "403": {
            "description": "Do not have permission to update a category for category set."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Site or Category_set or Category not found."
          },
          "405": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Request method is not PUT or POST with __method=PUT"
          }
        },
        "security": [
          {
            "mtauth": []
          }
        ],
        "summary": "Update single category in category set",
        "tags": [
          "Categories",
          "Category Sets"
        ]
      }
    },
    "/sites/{site_id}/categorySets/{category_set_id}/categories/{category_id}/children": {
      "get": {
        "description": "Retrieve list of child categories of the specified category set.",
        "parameters": [
          {
            "in": "path",
            "name": "site_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "category_set_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "category_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "Input `MTAuth accessToken={accessToken}`",
            "in": "header",
            "name": "X-MT-Authorization",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The depth of retrieving parent categories.",
            "in": "query",
            "name": "maxDepth",
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "- 1: The list does not include current category.\n- 0: The list includes current category.\n",
            "in": "query",
            "name": "includeCurrent",
            "schema": {
              "default": 0,
              "enum": [
                0,
                1
              ],
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "items": {
                      "items": {
                        "$ref": "#/components/schemas/category"
                      },
                      "type": "array"
                    },
                    "totalResults": {
                      "type": "integer"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "No Errors."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Bad request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Invalid login"
          },
          "403": {
            "description": "Do not have permission to retrieve the requested categories for category set."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Site or Category_set not found."
          }
        },
        "summary": "Category Collection of child categories for category set",
        "tags": [
          "Categories",
          "Category Sets"
        ]
      }
    },
    "/sites/{site_id}/categorySets/{category_set_id}/categories/{category_id}/parents": {
      "get": {
        "description": "Retrieve list of parent categories of the specified category set.",
        "parameters": [
          {
            "in": "path",
            "name": "site_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "category_set_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "category_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "Input `MTAuth accessToken={accessToken}`",
            "in": "header",
            "name": "X-MT-Authorization",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The depth of retrieving parent categories.",
            "in": "query",
            "name": "maxDepth",
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "- 1: The list does not include current category.\n- 0: The list includes current category.\n",
            "in": "query",
            "name": "includeCurrent",
            "schema": {
              "default": 0,
              "enum": [
                0,
                1
              ],
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "items": {
                      "items": {
                        "$ref": "#/components/schemas/category"
                      },
                      "type": "array"
                    },
                    "totalResults": {
                      "type": "integer"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "No Errors."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Bad request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Invalid login"
          },
          "403": {
            "description": "Do not have permission to retrieve the requested categories for category set."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Site or Category_set or Category not found."
          }
        },
        "summary": "Category Collection of parent categories for category set",
        "tags": [
          "Categories",
          "Category Sets"
        ]
      }
    },
    "/sites/{site_id}/categorySets/{category_set_id}/categories/{category_id}/siblings": {
      "get": {
        "description": "Retrieve list of sibling categories of the specified category set.",
        "parameters": [
          {
            "in": "path",
            "name": "site_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "category_set_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "category_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "Input `MTAuth accessToken={accessToken}`",
            "in": "header",
            "name": "X-MT-Authorization",
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/category_search"
          },
          {
            "$ref": "#/components/parameters/category_searchFields"
          },
          {
            "$ref": "#/components/parameters/category_limit"
          },
          {
            "$ref": "#/components/parameters/category_offset"
          },
          {
            "description": "- user_custom: Sort order you specified on the Manage Categories screen.\n- created_by: Sort by the ID of user who created each category.\n- id: Sort by the ID of each category.\n- basename: Sort by the basename of each category.\n- label: Sort by the label of each category.\n",
            "in": "query",
            "name": "sortBy",
            "schema": {
              "default": "user_custom",
              "enum": [
                "user_custom",
                "created_by",
                "id",
                "basename",
                "label"
              ],
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/category_sortOrder"
          },
          {
            "$ref": "#/components/parameters/category_fields"
          },
          {
            "description": "If set to 1, retrieves only top level categories. New in v2",
            "in": "query",
            "name": "top",
            "schema": {
              "default": 0,
              "enum": [
                0,
                1
              ],
              "type": "integer"
            }
          },
          {
            "$ref": "#/components/parameters/category_includeIds"
          },
          {
            "$ref": "#/components/parameters/category_excludeIds"
          },
          {
            "$ref": "#/components/parameters/category_dateField"
          },
          {
            "$ref": "#/components/parameters/category_dateFrom"
          },
          {
            "$ref": "#/components/parameters/category_dateTo"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "items": {
                      "items": {
                        "$ref": "#/components/schemas/category"
                      },
                      "type": "array"
                    },
                    "totalResults": {
                      "type": "integer"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "No Errors."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Bad request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Invalid login"
          },
          "403": {
            "description": "Do not have permission to retrieve the requested categories for category set."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Site or Category_set or Category not found."
          }
        },
        "summary": "Category Collection of sibling categories for category set",
        "tags": [
          "Categories",
          "Category Sets"
        ]
      }
    },
    "/sites/{site_id}/children": {
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "site_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "Input `MTAuth accessToken={accessToken}`",
            "in": "header",
            "name": "X-MT-Authorization",
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/site_search"
          },
          {
            "$ref": "#/components/parameters/site_searchFields"
          },
          {
            "$ref": "#/components/parameters/site_limit"
          },
          {
            "$ref": "#/components/parameters/site_offset"
          },
          {
            "$ref": "#/components/parameters/site_sortBy"
          },
          {
            "$ref": "#/components/parameters/site_sortOrder"
          },
          {
            "$ref": "#/components/parameters/site_fields"
          },
          {
            "$ref": "#/components/parameters/site_includeIds"
          },
          {
            "$ref": "#/components/parameters/site_excludeIds"
          },
          {
            "$ref": "#/components/parameters/site_dateField"
          },
          {
            "$ref": "#/components/parameters/site_dateFrom"
          },
          {
            "$ref": "#/components/parameters/site_dateTo"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "items": {
                      "description": "An array of sites resource. The list will sorted descending by blog name. ",
                      "items": {
                        "$ref": "#/components/schemas/blog"
                      },
                      "type": "array"
                    },
                    "totalResults": {
                      "description": "The total number of sites found.",
                      "type": "integer"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "No Errors."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Bad request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Invalid login"
          },
          "403": {
            "description": "Do not have permission to retrieve the list of blogs."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Site not found."
          }
        },
        "summary": "Retrieve sites by parent ID",
        "tags": [
          "Sites"
        ]
      }
    },
    "/sites/{site_id}/comments": {
      "get": {
        "description": "Retrieve a list of comments.\n\nAuthorization is required to include unpublished comments\n",
        "parameters": [
          {
            "in": "path",
            "name": "site_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "Input `MTAuth accessToken={accessToken}`",
            "in": "header",
            "name": "X-MT-Authorization",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "This is an optional parameter. Maximum number of comments to retrieve. Default is 10.",
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "This is an optional parameter. 0-indexed offset. Default is 0.",
            "in": "query",
            "name": "offset",
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "This is an optional parameter. The comma separated ID list of comments to include to result.",
            "in": "query",
            "name": "includeIds",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "This is an optional parameter. The comma separated ID list of comments to exclude from result.",
            "in": "query",
            "name": "excludeIds",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "This is an optional parameter. Filter by status.\n#### Approved\ncomment_visible is 1 and comment_junk_status is 1.\n#### Pending\ncomment_visible is 0 and comment_junk_status is 1.\n#### Spam\ncomment_junk_status is -1.\n",
            "in": "query",
            "name": "status",
            "schema": {
              "enum": [
                "Approved",
                "Pending",
                "Spam"
              ],
              "type": "string"
            }
          },
          {
            "description": "This is an optional parameter. Filter by parent entry's status.\n#### Draft\nentry_status is 1.\n#### Publish\nentry_status is 2.\n#### Review\nentry_status is 3.\n#### Future\nentry_status is 4.\n#### Spam\nentry_status is 5.\n",
            "in": "query",
            "name": "entryStatus",
            "schema": {
              "enum": [
                "Draft",
                "Publish",
                "Review",
                "Future",
                "Spam"
              ],
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/comment_dateField"
          },
          {
            "$ref": "#/components/parameters/comment_dateFrom"
          },
          {
            "$ref": "#/components/parameters/comment_dateTo"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "items": {
                      "description": "An array of Comments resource. The list will sorted from oldest to newest by comment_id and comment_parent_id.",
                      "items": {
                        "$ref": "#/components/schemas/comment"
                      },
                      "type": "array"
                    },
                    "totalResults": {
                      "description": "The total number of comments found.",
                      "type": "integer"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Bad request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Invalid login"
          },
          "403": {
            "description": "Do not have permission to retrieve the list of comments."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Not Found"
          }
        },
        "summary": "Retrieve a list of comments",
        "tags": [
          "Comments"
        ]
      }
    },
    "/sites/{site_id}/comments/{comment_id}": {
      "delete": {
        "description": "Delete a comment.\n\nAuthorization is required.\n\n#### Notes\n- This method accepts DELETE and POST with __method=DELETE.\n",
        "parameters": [
          {
            "in": "path",
            "name": "site_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "comment_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/comment"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Bad request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Invalid login"
          },
          "403": {
            "description": "Do not have permission to delete a comment."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Not Found"
          },
          "405": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Request method is not DELETE or POST with __method=DELETE"
          }
        },
        "security": [
          {
            "mtauth": []
          }
        ],
        "summary": "Delete a comment",
        "tags": [
          "Comments"
        ]
      },
      "get": {
        "description": "Retrieve a single comment by its ID.\n\nAuthorization is required if the comment status is \"unpublished\". If the comment status is \"published\", then this method can be called without authorization.\n",
        "parameters": [
          {
            "in": "path",
            "name": "site_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "comment_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "Input `MTAuth accessToken={accessToken}`",
            "in": "header",
            "name": "X-MT-Authorization",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/comment"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Bad request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Invalid login"
          },
          "403": {
            "description": "Do not have permission to retrieve the requested comment."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Not Found"
          }
        },
        "summary": "Retrieve a single comment by its ID",
        "tags": [
          "Comments"
        ]
      },
      "put": {
        "description": "Update a comment.\n\nAuthorization is required.\n\n#### Notes\n- This method accepts PUT and POST with __method=PUT.\n",
        "parameters": [
          {
            "in": "path",
            "name": "site_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "comment_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "properties": {
                  "comment": {
                    "$ref": "#/components/schemas/comment_updatable"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/comment"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Bad request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Invalid login"
          },
          "403": {
            "description": "Do not have permission to update a comment."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Not Found"
          },
          "405": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Request method is not PUT or POST with __method=PUT"
          }
        },
        "security": [
          {
            "mtauth": []
          }
        ],
        "summary": "Update a comment",
        "tags": [
          "Comments"
        ]
      }
    },
    "/sites/{site_id}/contentTypes": {
      "get": {
        "description": "Authentication required\n\nRetrieve a list of Content Types. This endpoint requires following permission.\n\n- Manage Content Types\n",
        "parameters": [
          {
            "in": "path",
            "name": "site_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "$ref": "#/components/parameters/content_type_limit"
          },
          {
            "$ref": "#/components/parameters/content_type_offset"
          },
          {
            "description": "The field name for sort. You can specify one of following values.\n- name\n- dataLabel\n- uniqueID\n- modified_on\n",
            "in": "query",
            "name": "sortBy",
            "schema": {
              "enum": [
                "name",
                "dataLabel",
                "uniqueID",
                "modified_on"
              ],
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/content_type_sortOrder"
          },
          {
            "$ref": "#/components/parameters/content_type_fields"
          },
          {
            "$ref": "#/components/parameters/content_type_includeIds"
          },
          {
            "$ref": "#/components/parameters/content_type_excludeIds"
          },
          {
            "$ref": "#/components/parameters/content_type_dateField"
          },
          {
            "$ref": "#/components/parameters/content_type_dateFrom"
          },
          {
            "$ref": "#/components/parameters/content_type_dateTo"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "items": {
                      "items": {
                        "$ref": "#/components/schemas/content_type"
                      },
                      "type": "array"
                    },
                    "totalResults": {
                      "type": "integer"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "No Errors."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Bad request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Invalid login"
          },
          "403": {
            "description": "Do not have permission to retrieve the list of content types."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Site not found."
          }
        },
        "security": [
          {
            "mtauth": []
          }
        ],
        "summary": "Content Type Collection",
        "tags": [
          "Content Types"
        ]
      },
      "post": {
        "description": "**Authentication required**\n\nCreate a new Content Type. This endpoint requires following permission.\n\n- Manage Content Types\n\nPost form data is as follows.\n\n- content_type (required, ContentType) - Single Content Type resource\n",
        "parameters": [
          {
            "in": "path",
            "name": "site_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "properties": {
                  "content_type": {
                    "$ref": "#/components/schemas/content_type_updatable"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/content_type"
                }
              }
            },
            "description": "No Errors."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Bad request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Invalid login"
          },
          "403": {
            "description": "Do not have permission to create a content type."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Site not found."
          }
        },
        "security": [
          {
            "mtauth": []
          }
        ],
        "summary": "Create Content Type",
        "tags": [
          "Content Types"
        ]
      }
    },
    "/sites/{site_id}/contentTypes/{content_type_id}": {
      "delete": {
        "description": "**Authentication required**\n\nDelete content type. This endpoint requires following permission.\n\n- Manage Content Types\n\n#### Notes\n- This method accepts DELETE and POST with __method=DELETE.\n",
        "parameters": [
          {
            "in": "path",
            "name": "site_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "content_type_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/content_type"
                }
              }
            },
            "description": "No Errors."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Bad request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Invalid login"
          },
          "403": {
            "description": "Do not have permission to delete a content type."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Site or Content_type not found."
          },
          "405": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Request method is not DELETE or POST with __method=DELETE"
          }
        },
        "security": [
          {
            "mtauth": []
          }
        ],
        "summary": "Delete Content Type",
        "tags": [
          "Content Types"
        ]
      },
      "get": {
        "description": "**Authentication required**\n\nFetch single content type. This endpoint requires following permission.\n\n- Manage Content Types\n",
        "parameters": [
          {
            "in": "path",
            "name": "site_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "content_type_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "$ref": "#/components/parameters/content_type_fields"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/content_type"
                }
              }
            },
            "description": "No Errors."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Bad request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Invalid login"
          },
          "403": {
            "description": "Do not have permission to retrieve the requested content type."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Site or Content_type not found."
          }
        },
        "security": [
          {
            "mtauth": []
          }
        ],
        "summary": "Fetch single Content Type",
        "tags": [
          "Content Types"
        ]
      },
      "put": {
        "description": "**Authentication required**\n\nUpdate content type. This endpoint requires following permission.\n\n- Manage Content Types\n\n#### Notes\n- This method accepts PUT and POST with __method=PUT.\n",
        "parameters": [
          {
            "in": "path",
            "name": "site_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "content_type_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "properties": {
                  "content_type": {
                    "$ref": "#/components/schemas/content_type_updatable"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/content_type"
                }
              }
            },
            "description": "No Errors."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Bad request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Invalid login"
          },
          "403": {
            "description": "Do not have permission to update a content type."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Site or Content_type not found."
          },
          "405": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Request method is not PUT or POST with __method=PUT"
          }
        },
        "security": [
          {
            "mtauth": []
          }
        ],
        "summary": "Update Content Type",
        "tags": [
          "Content Types"
        ]
      }
    },
    "/sites/{site_id}/contentTypes/{content_type_id}/data": {
      "get": {
        "description": "Retrieve list of content data of specified content type in the specified site.\n\nAuthentication required if you want to retrieve unpublished content data. Required pemissions are as follows.\n\n- Manage Content Data (site, system, each content type)\n- Publish Content Data (each content type)\n- Edit All Content Data (each content type)\n",
        "parameters": [
          {
            "in": "path",
            "name": "site_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "content_type_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "Input `MTAuth accessToken={accessToken}`",
            "in": "header",
            "name": "X-MT-Authorization",
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/content_data_limit"
          },
          {
            "$ref": "#/components/parameters/content_data_offset"
          },
          {
            "description": "The field name for sort. You can specify one of following values.\n- id\n- uniqueID\n- authored_on\n- created_on\n- modified_on\n",
            "in": "query",
            "name": "sortBy",
            "schema": {
              "default": "id",
              "enum": [
                "id",
                "uniqueID",
                "authored_on",
                "created_on",
                "modified_on"
              ],
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/content_data_sortOrder"
          },
          {
            "$ref": "#/components/parameters/content_data_fields"
          },
          {
            "$ref": "#/components/parameters/content_data_includeIds"
          },
          {
            "$ref": "#/components/parameters/content_data_excludeIds"
          },
          {
            "$ref": "#/components/parameters/entry_no_text_filter"
          },
          {
            "$ref": "#/components/parameters/content_data_dateField"
          },
          {
            "$ref": "#/components/parameters/content_data_dateFrom"
          },
          {
            "$ref": "#/components/parameters/content_data_dateTo"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "items": {
                      "items": {
                        "$ref": "#/components/schemas/cd"
                      },
                      "type": "array"
                    },
                    "totalResults": {
                      "type": "integer"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "No Errors."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Bad request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Invalid login"
          },
          "403": {
            "description": "Do not have permission to retrieve the list of content data."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Site or Content_type not found."
          }
        },
        "summary": "Content Data Collection",
        "tags": [
          "Content Types",
          "Content Data"
        ]
      },
      "post": {
        "description": "**Authentication Required** Create a new content data. This endpoint requires following permissions.\n\n- Manage Content Data (site, system, each content type)\n- Create Content Data (each content type)\n\nPost form data is following\n\n- content_data (ContentData) - Single ContentData resource\n\nKnown issues (these will be solved in future release)\n\n- If content type contains non required Content Type field, request will failed when post data does not contain its data.\n- If content type contains non required Date and Time field, request will failed when post data does not contain its data.\n- Date and Time field must be specified by YYYYMMDDHHmmSS format.\n",
        "parameters": [
          {
            "in": "path",
            "name": "site_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "content_type_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "properties": {
                  "content_data": {
                    "$ref": "#/components/schemas/cd_updatable"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/cd"
                }
              }
            },
            "description": "No Errors."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Bad request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Invalid login"
          },
          "403": {
            "description": "Do not have permission to create a content data."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Site or Content_type not found."
          }
        },
        "security": [
          {
            "mtauth": []
          }
        ],
        "summary": "Create Content Data",
        "tags": [
          "Content Types",
          "Content Data"
        ]
      }
    },
    "/sites/{site_id}/contentTypes/{content_type_id}/data/preview": {
      "post": {
        "description": "**Authentication required.**\n\nMake a preview by specified data. This endpoint requires following permissions.\n\n- Manage Content Data (site, system, each content type)\n- Create Content Data (each content type)\n\nPost form data is following\n\n- content_data (ContentData) - Single ContentData resource\n\nKnown issues (these will be solved in future release)\n\n- If content type contains non required Content Type field, request will failed when post data does not contain its data.\n- If content type contains non required Date and Time field, request will failed when post data does not contain its data.\n- Date and Time field must be specified by YYYYMMDDHHmmSS format.\n",
        "parameters": [
          {
            "in": "path",
            "name": "site_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "content_type_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "If specify \"1\", will be returned preview contents.",
            "in": "query",
            "name": "raw",
            "schema": {
              "default": 0,
              "enum": [
                0,
                1
              ],
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "properties": {
                  "content_data": {
                    "$ref": "#/components/schemas/cd"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "preview": {
                      "type": "string"
                    },
                    "status": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "No Errors."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Bad request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Invalid login"
          },
          "403": {
            "description": "Do not have permission to preview content data."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Site or Content_type not found"
          }
        },
        "security": [
          {
            "mtauth": []
          }
        ],
        "summary": "Make a preview by data",
        "tags": [
          "Content Types",
          "Content Data"
        ]
      }
    },
    "/sites/{site_id}/contentTypes/{content_type_id}/data/{content_data_id}": {
      "delete": {
        "description": "**Authentication required.**\n\nDelete a single content data. This endpoint requires folllowing permissions.\n\n- Manage Content Data (site, system, each content type)\n- Edit All Content Data (each content type)\n- Publish Content Data (each content type)\n\n#### Notes\n- This method accepts DELETE and POST with __method=DELETE.\n",
        "parameters": [
          {
            "in": "path",
            "name": "site_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "content_type_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "content_data_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/cd"
                }
              }
            },
            "description": "No Errors."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Bad request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Invalid login"
          },
          "403": {
            "description": "Do not have permission to delete a content data."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Site or Content_type or Content_data not found."
          },
          "405": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Request method is not DELETE or POST with __method=DELETE"
          }
        },
        "security": [
          {
            "mtauth": []
          }
        ],
        "summary": "Delete single content data",
        "tags": [
          "Content Types",
          "Content Data"
        ]
      },
      "get": {
        "description": "Fetch single content data.\n\nAuthentication required if you want fetch unpublished content data. Required permissions are as follows.\n\n- Manage Content Data (site, system, each content type)\n- Edit All Content Data (each content type)\n- Publish Content Data (each content type)\n",
        "parameters": [
          {
            "in": "path",
            "name": "site_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "content_type_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "content_data_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "Input `MTAuth accessToken={accessToken}`",
            "in": "header",
            "name": "X-MT-Authorization",
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/content_data_fields"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/cd"
                }
              }
            },
            "description": "No Errors."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Bad request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Invalid login"
          },
          "403": {
            "description": "Do not have permission to retrieve the requested content data."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Site or Content_type or Content_data not found."
          }
        },
        "summary": "Fetch single Content Data",
        "tags": [
          "Content Types",
          "Content Data"
        ]
      },
      "put": {
        "description": "Authentication Required Update a single content data. This endpoint requires folllowing permissions.\n\n- Manage Content Data (site, system, each content type)\n- Edit All Content Data (each content type)\n- Publish Content Data (each content type)\n\nPost form data is following:\n\n- content_data (ContentData, required) -Single ContentData resource.\n\n#### Notes\n- This method accepts PUT and POST with __method=PUT.\n",
        "parameters": [
          {
            "in": "path",
            "name": "site_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "content_type_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "content_data_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "properties": {
                  "content_data": {
                    "$ref": "#/components/schemas/cd_updatable"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/cd"
                }
              }
            },
            "description": "No Errors."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Bad request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Invalid login"
          },
          "403": {
            "description": "Do not have permission to update a content data."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Site or Content_type or Content_data not found."
          },
          "405": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Request method is not PUT or POST with __method=PUT"
          }
        },
        "security": [
          {
            "mtauth": []
          }
        ],
        "summary": "Update Content Data",
        "tags": [
          "Content Types",
          "Content Data"
        ]
      }
    },
    "/sites/{site_id}/contentTypes/{content_type_id}/data/{content_data_id}/preview": {
      "post": {
        "description": "**Authentication required.**\n\nMake a preview by ID. This endpoint requires following permissions.\n\n- Content Data (site, system, each content type)\n- Create Content Data (each content type)\n\nPost form data is as follows\n\n- entry (Entry, required) - Should be provide empty json. This parameter will be removed in the future.\n\nKnown issues (these will be solved in future release)\n\n- If content type contains non required Content Type field, request will failed when post data does not contain its data.\n- If content type contains non required Date and Time field, request will failed when post data does not contain its data.\n- Date and Time field must be specified by YYYYMMDDHHmmSS format.\n",
        "parameters": [
          {
            "in": "path",
            "name": "site_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "content_type_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "content_data_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "If specify \"1\", will be returned preview contents.",
            "in": "query",
            "name": "raw",
            "schema": {
              "default": 0,
              "enum": [
                0,
                1
              ],
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "properties": {
                  "content_data": {
                    "$ref": "#/components/schemas/cd"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "preview": {
                      "type": "string"
                    },
                    "status": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "No Errors."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Bad request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Invalid login"
          },
          "403": {
            "description": "Do not have permission to preview content data."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Site or Content_type or Content_data not found"
          }
        },
        "security": [
          {
            "mtauth": []
          }
        ],
        "summary": "Make a preview by id",
        "tags": [
          "Content Types",
          "Content Data"
        ]
      }
    },
    "/sites/{site_id}/contentTypes/{content_type_id}/fields": {
      "get": {
        "description": "**Authentication required**\n\nRetrieve a list of Content Fields of the specified Content Type. This endpoint requires following permission.\n\n- Manage Content Types\n",
        "parameters": [
          {
            "in": "path",
            "name": "site_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "content_type_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "$ref": "#/components/parameters/content_field_limit"
          },
          {
            "$ref": "#/components/parameters/content_field_offset"
          },
          {
            "description": "The field name for sort. You can specify one of following values.\n- name\n- dataLabel\n- uniqueID\n- modified_on\n",
            "in": "query",
            "name": "sortBy",
            "schema": {
              "enum": [
                "name",
                "dataLabel",
                "uniqueID",
                "modified_on"
              ],
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/content_field_sortOrder"
          },
          {
            "$ref": "#/components/parameters/content_field_fields"
          },
          {
            "$ref": "#/components/parameters/content_field_includeIds"
          },
          {
            "$ref": "#/components/parameters/content_field_excludeIds"
          },
          {
            "$ref": "#/components/parameters/content_field_dateField"
          },
          {
            "$ref": "#/components/parameters/content_field_dateFrom"
          },
          {
            "$ref": "#/components/parameters/content_field_dateTo"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "items": {
                      "items": {
                        "$ref": "#/components/schemas/cf"
                      },
                      "type": "array"
                    },
                    "totalResults": {
                      "type": "integer"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "No Errors."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Bad request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Invalid login"
          },
          "403": {
            "description": "Do not have permission to retrieve the list of content fields."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Site or Content_type not found."
          }
        },
        "security": [
          {
            "mtauth": []
          }
        ],
        "summary": "Content Field Collection",
        "tags": [
          "Content Fields",
          "Content Types"
        ]
      },
      "post": {
        "description": "**Authentication required**\n\nCreate a new Content Field. This endpoint requires following permission.\n\n- Manage Content Types\n\nPost form data is as follows.\n\n- content_field (required, ContentField) - Single Content Field resource\n",
        "parameters": [
          {
            "in": "path",
            "name": "site_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "content_type_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "properties": {
                  "content_field": {
                    "$ref": "#/components/schemas/cf_updatable"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/cf"
                }
              }
            },
            "description": "No Errors."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Bad request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Invalid login"
          },
          "403": {
            "description": "Do not have permission to create a content type."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Site or Content_type not found."
          }
        },
        "security": [
          {
            "mtauth": []
          }
        ],
        "summary": "Create Content Field",
        "tags": [
          "Content Types",
          "Content Fields"
        ]
      }
    },
    "/sites/{site_id}/contentTypes/{content_type_id}/fields/permutate": {
      "post": {
        "description": "**Authentication required.**\n\nRearranges content field order in specified content type. This endpoint need folllowing permissions.\n\n- Manage Content Types\n\nThis method returns rearranged ContentField collection.\n\nPost form data is following:\n\n- content_fields (array[ContentField]) - Array of content fields resource that were rearranged.\n",
        "parameters": [
          {
            "in": "path",
            "name": "site_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "content_type_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "properties": {
                  "content_fields": {
                    "description": "Array of content fields resource that were rearranged.",
                    "example": "[\n  { \"id\": 0 },\n  { \"id\": 1 } \n]\n",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/cf"
                  },
                  "type": "array"
                }
              }
            },
            "description": "No Errors."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Bad request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Invalid login"
          },
          "403": {
            "description": "Do not have permission to permutate content fields."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Site or Content_type not found."
          }
        },
        "security": [
          {
            "mtauth": []
          }
        ],
        "summary": "Save hierarchical content field order",
        "tags": [
          "Content Types",
          "Content Fields"
        ]
      }
    },
    "/sites/{site_id}/contentTypes/{content_type_id}/fields/{content_field_id}": {
      "delete": {
        "description": "**Authentication required**\n\nDelete content field from specified content type. This endpoint requires following permission.\n\n- Manage Content Types\n\n#### Notes\n- This method accepts DELETE and POST with __method=DELETE.\n",
        "parameters": [
          {
            "in": "path",
            "name": "site_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "content_type_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "content_field_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/cf"
                }
              }
            },
            "description": "No Errors."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Bad request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Invalid login"
          },
          "403": {
            "description": "Do not have permission to delete a content field."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Site or Content_type or Content_field not found."
          },
          "405": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Request method is not DELETE or POST with __method=DELETE"
          }
        },
        "security": [
          {
            "mtauth": []
          }
        ],
        "summary": "Delete Content Field",
        "tags": [
          "Content Types",
          "Content Fields"
        ]
      },
      "get": {
        "description": "**Authentication required**\n\nFetch single content field. This endpoint requires following permission.\n\n- Manage Content Types\n",
        "parameters": [
          {
            "in": "path",
            "name": "site_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "content_type_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "content_field_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "$ref": "#/components/parameters/content_field_fields"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/cf"
                }
              }
            },
            "description": "No Errors."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Bad request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Invalid login"
          },
          "403": {
            "description": "Do not have permission to retrieve the requested content field."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Site or Content_type or Content_field not found."
          }
        },
        "security": [
          {
            "mtauth": []
          }
        ],
        "summary": "Fetch single Content Field",
        "tags": [
          "Content Types",
          "Content Fields"
        ]
      },
      "put": {
        "description": "**Authentication required**\n\nUpdate content field. This endpoint requires following permission.\n\n- Manage Content Types\n\nIf you want to update label, description and required, should be use options field. (e.g, {âoptionsâ:{âlabelâ:âfooâ}})\n\n#### Notes\n- This method accepts PUT and POST with __method=PUT.\n",
        "parameters": [
          {
            "in": "path",
            "name": "site_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "content_type_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "content_field_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "properties": {
                  "content_field": {
                    "$ref": "#/components/schemas/cf_updatable"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/cf"
                }
              }
            },
            "description": "No Errors."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Bad request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Invalid login"
          },
          "403": {
            "description": "Do not have permission to update a content field."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Site or Content_type or Content_field not found."
          },
          "405": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Request method is not PUT or POST with __method=PUT"
          }
        },
        "security": [
          {
            "mtauth": []
          }
        ],
        "summary": "Update Content Field",
        "tags": [
          "Content Types",
          "Content Fields"
        ]
      }
    },
    "/sites/{site_id}/entries": {
      "get": {
        "description": "Retrieve a list of entries.\n\nAuthorization is required to include unpublished entries.\n",
        "parameters": [
          {
            "in": "path",
            "name": "site_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "Input `MTAuth accessToken={accessToken}`",
            "in": "header",
            "name": "X-MT-Authorization",
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/entry_search"
          },
          {
            "$ref": "#/components/parameters/entry_searchFields"
          },
          {
            "$ref": "#/components/parameters/entry_status"
          },
          {
            "$ref": "#/components/parameters/entry_limit"
          },
          {
            "$ref": "#/components/parameters/entry_offset"
          },
          {
            "$ref": "#/components/parameters/entry_includeIds"
          },
          {
            "$ref": "#/components/parameters/entry_excludeIds"
          },
          {
            "$ref": "#/components/parameters/entry_sortBy"
          },
          {
            "$ref": "#/components/parameters/entry_sortOrder"
          },
          {
            "$ref": "#/components/parameters/entry_maxComments"
          },
          {
            "$ref": "#/components/parameters/entry_maxTrackbacks"
          },
          {
            "$ref": "#/components/parameters/entry_fields"
          },
          {
            "$ref": "#/components/parameters/entry_no_text_filter"
          },
          {
            "$ref": "#/components/parameters/entry_dateField"
          },
          {
            "$ref": "#/components/parameters/entry_dateFrom"
          },
          {
            "$ref": "#/components/parameters/entry_dateTo"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "items": {
                      "description": "An array of Entries resource.",
                      "items": {
                        "$ref": "#/components/schemas/entry"
                      },
                      "type": "array"
                    },
                    "totalResults": {
                      "description": " The total number of entries.",
                      "type": "integer"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Bad request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Invalid login"
          },
          "403": {
            "description": "Do not have permission to retrieve the requested entries."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Not Found"
          }
        },
        "summary": "Retrieve a list of entries",
        "tags": [
          "Entries"
        ]
      },
      "post": {
        "description": "- Authorization is required.\n\n#### Update in v2.0\n\n- You can attach categories and assets in one request.\n\n#### Permissions\n\n- create_post\n",
        "parameters": [
          {
            "in": "path",
            "name": "site_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "properties": {
                  "entry": {
                    "$ref": "#/components/schemas/entry_updatable"
                  },
                  "publish": {
                    "description": "If this value is \"0\", the entry is not published",
                    "enum": [
                      0,
                      1
                    ],
                    "type": "integer"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/entry"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Bad request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Invalid login"
          },
          "403": {
            "description": "Do not have permission to create an entry."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Site not found."
          }
        },
        "security": [
          {
            "mtauth": []
          }
        ],
        "summary": "Create a new entry",
        "tags": [
          "Entries"
        ]
      }
    },
    "/sites/{site_id}/entries/export": {
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "site_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Text as Movable Type Import / Export Format"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Bad request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Invalid login"
          },
          "403": {
            "description": "Do not have permission to export entries."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Site not found."
          }
        },
        "security": [
          {
            "mtauth": []
          }
        ],
        "summary": "Export entries",
        "tags": [
          "Entries"
        ]
      }
    },
    "/sites/{site_id}/entries/import": {
      "post": {
        "parameters": [
          {
            "in": "path",
            "name": "site_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "properties": {
                  "convert_breaks": {
                    "type": "string"
                  },
                  "default_cat_id": {
                    "type": "integer"
                  },
                  "default_status": {
                    "description": "If you set import_type is \"import_mt_format\", also you can set default entry status.",
                    "type": "string"
                  },
                  "encoding": {
                    "type": "string"
                  },
                  "file": {
                    "format": "binary",
                    "type": "string"
                  },
                  "import_as_me": {
                    "default": 1,
                    "description": "#### 0\n\nPreserve original user\n\n#### 1\n\nImport as me\n\n**Default**: 1\n",
                    "enum": [
                      0,
                      1
                    ],
                    "type": "integer"
                  },
                  "import_type": {
                    "type": "string"
                  },
                  "password": {
                    "description": "If you choose import_as_me is 0, you must define a default password for those new accounts.",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "status": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "No Errors"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Bad request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Invalid login"
          },
          "403": {
            "description": "Do not have permission to import entries."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Site not found."
          }
        },
        "security": [
          {
            "mtauth": []
          }
        ],
        "summary": "Import entries",
        "tags": [
          "Entries"
        ]
      }
    },
    "/sites/{site_id}/entries/preview": {
      "post": {
        "description": "- Authorization is required.\n- **This endpoint has been available since Movable Type 6.1.2.**\n\n#### Permissions\n\n- create_post\n",
        "parameters": [
          {
            "in": "path",
            "name": "site_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "If specify \"1\", will be returned preview contents.",
            "in": "query",
            "name": "raw",
            "schema": {
              "default": 0,
              "enum": [
                0,
                1
              ],
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "properties": {
                  "entry": {
                    "$ref": "#/components/schemas/entry"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "preview": {
                      "type": "string"
                    },
                    "status": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Bad request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Invalid login"
          },
          "403": {
            "description": "Do not have permission to preview entry."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Site or Entry not found"
          }
        },
        "security": [
          {
            "mtauth": []
          }
        ],
        "summary": "Make a preview for a entry",
        "tags": [
          "Entries"
        ]
      }
    },
    "/sites/{site_id}/entries/{entry_id}": {
      "delete": {
        "description": "Delete an entry.\n\nAuthorization is required.\n\n\n#### Notes\n- This method accepts DELETE and POST with __method=DELETE.\n",
        "parameters": [
          {
            "in": "path",
            "name": "site_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "entry_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/entry"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Bad request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Invalid login"
          },
          "403": {
            "description": "Do not have permission to delete an entry."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Not Found"
          },
          "405": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Request method is not DELETE or POST with __method=DELETE"
          }
        },
        "security": [
          {
            "mtauth": []
          }
        ],
        "summary": "Delete an entry",
        "tags": [
          "Entries"
        ]
      },
      "get": {
        "description": "Retrieve a single entry by its ID.\n\nAuthorization is required if the entry status is \"unpublished\". If the entry status is \"published\", then this method can be called without authorization.\n",
        "parameters": [
          {
            "in": "path",
            "name": "site_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "entry_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "Input `MTAuth accessToken={accessToken}`",
            "in": "header",
            "name": "X-MT-Authorization",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "This is an optional parameter. Maximum number of comments to retrieve as part of the Entries resource. If this parameter is not supplied, no comments will be returned.",
            "in": "query",
            "name": "maxComments",
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "This is an optional parameter. Maximum number of received trackbacks to retrieve as part of the Entries resource. If this parameter is not supplied, no trackbacks will be returned. ",
            "in": "query",
            "name": "maxTrackbacks",
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "This is an optional parameter. The field list to retrieve as part of the Entries resource. That list should be separated by commma. If this parameter is not specified, All fields will be returned. ",
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/entry"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Bad request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Invalid login"
          },
          "403": {
            "description": "Do not have permission to retrieve the requested entry."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Not Found"
          }
        },
        "summary": "Retrieve a single entry by its ID",
        "tags": [
          "Entries"
        ]
      },
      "put": {
        "description": "- Authorization is required.\n\n#### Update in v2.0\n\n- You can attach/detach categories and assets in one request.\n\n#### Permissions\n\n- edit_entry\n  - to retrieve unpublished entry\n\n#### Notes\n- This method accepts PUT and POST with __method=PUT.\n",
        "parameters": [
          {
            "in": "path",
            "name": "site_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "entry_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "properties": {
                  "entry": {
                    "$ref": "#/components/schemas/entry_updatable"
                  },
                  "publish": {
                    "description": "If this value is \"0\", the entry is not published",
                    "enum": [
                      0,
                      1
                    ],
                    "type": "integer"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/entry"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Bad request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Invalid login"
          },
          "403": {
            "description": "Do not have permission to update an entry."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Site or Entry not found."
          },
          "405": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Request method is not PUT or POST with __method=PUT"
          }
        },
        "security": [
          {
            "mtauth": []
          }
        ],
        "summary": "Update an entry",
        "tags": [
          "Entries"
        ]
      }
    },
    "/sites/{site_id}/entries/{entry_id}/assets": {
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "site_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "entry_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "Input `MTAuth accessToken={accessToken}`",
            "in": "header",
            "name": "X-MT-Authorization",
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/asset_limit"
          },
          {
            "$ref": "#/components/parameters/asset_offset"
          },
          {
            "description": "The target asset class to retrieve. Supported values are image, audio, video, file and any values added by plugins. If you want to retrieve multiple classes, specify the values separated by commas.",
            "in": "query",
            "name": "class",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "#### file_name\n\nSort by the filename of each asset.\n\n#### created_by\n\nSort by the ID of user who created each asset.\n\n#### created_on\n\n(default) Sort by the created time of each asset.\n\n**Default**: created_on\n",
            "in": "query",
            "name": "sortBy",
            "schema": {
              "default": "created_on",
              "enum": [
                "file_name",
                "created_by",
                "created_on"
              ],
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/asset_sortOrder"
          },
          {
            "$ref": "#/components/parameters/asset_fields"
          },
          {
            "$ref": "#/components/parameters/asset_dateField"
          },
          {
            "$ref": "#/components/parameters/asset_dateFrom"
          },
          {
            "$ref": "#/components/parameters/asset_dateTo"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "items": {
                      "items": {
                        "$ref": "#/components/schemas/asset"
                      },
                      "type": "array"
                    },
                    "totalResults": {
                      "type": "integer"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "No Errors."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Bad request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Invalid login"
          },
          "403": {
            "description": "Do not have permission to retrieve the requested assets for entry."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Site or entry not found."
          }
        },
        "summary": "Retrieve assets that related with specified entry",
        "tags": [
          "Assets",
          "Entries"
        ]
      }
    },
    "/sites/{site_id}/entries/{entry_id}/categories": {
      "get": {
        "description": "#### Permissions\n\n- edit_entry\n  - If you want to retrieve the non-published entry's categories.\n\n",
        "parameters": [
          {
            "in": "path",
            "name": "site_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "entry_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "Input `MTAuth accessToken={accessToken}`",
            "in": "header",
            "name": "X-MT-Authorization",
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/category_search"
          },
          {
            "$ref": "#/components/parameters/category_searchFields"
          },
          {
            "$ref": "#/components/parameters/category_limit"
          },
          {
            "$ref": "#/components/parameters/category_offset"
          },
          {
            "description": "#### user_custom\n\nSort order you specified on the Manage Categories screen.\n\n#### created_by\n\nSort by the ID of user who created each category.\n\n#### id\n\nSort by the ID of each category.\n\n#### basename\n\nSort by the basename of each category.\n\n#### label\n\nSort by the label of each category.\n\n**Default**: user_custom\n",
            "in": "query",
            "name": "sortBy",
            "schema": {
              "default": "user_custom",
              "enum": [
                "user_custom",
                "created_by",
                "id",
                "basename",
                "label"
              ],
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/category_sortOrder"
          },
          {
            "$ref": "#/components/parameters/category_fields"
          },
          {
            "description": "If set to 1, retrieves only top level categories. New in v2\n\n**Default**: 0\n",
            "in": "query",
            "name": "top",
            "schema": {
              "default": 0,
              "enum": [
                0,
                1
              ],
              "type": "integer"
            }
          },
          {
            "$ref": "#/components/parameters/category_includeIds"
          },
          {
            "$ref": "#/components/parameters/category_excludeIds"
          },
          {
            "description": "#### primary\n\nRetrieve primary category only\n\n#### secondary\n\nRetrieve secondary categories only\n",
            "in": "query",
            "name": "type",
            "schema": {
              "enum": [
                "primary",
                "secondary"
              ],
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/category_dateField"
          },
          {
            "$ref": "#/components/parameters/category_dateFrom"
          },
          {
            "$ref": "#/components/parameters/category_dateTo"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "items": {
                      "items": {
                        "$ref": "#/components/schemas/category"
                      },
                      "type": "array"
                    },
                    "totalResults": {
                      "type": "integer"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "No Errors."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Bad request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Invalid login"
          },
          "403": {
            "description": "Do not have permission to retrieve the requested categories for entry."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Site or Entry not found."
          }
        },
        "summary": "Retrieve categories in the specified entry",
        "tags": [
          "Categories"
        ]
      }
    },
    "/sites/{site_id}/entries/{entry_id}/comments": {
      "get": {
        "description": "Retrieve a list of comments for an entry.\n\nAuthorization is required to include unpublished comments\n",
        "parameters": [
          {
            "in": "path",
            "name": "site_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "entry_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "Input `MTAuth accessToken={accessToken}`",
            "in": "header",
            "name": "X-MT-Authorization",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "This is an optional parameter. Maximum number of comments to retrieve. Default is 10.",
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "This is an optional parameter. 0-indexed offset. Default is 0.",
            "in": "query",
            "name": "offset",
            "schema": {
              "type": "integer"
            }
          },
          {
            "$ref": "#/components/parameters/comment_dateField"
          },
          {
            "$ref": "#/components/parameters/comment_dateFrom"
          },
          {
            "$ref": "#/components/parameters/comment_dateTo"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "items": {
                      "description": "An array of Comments resource. The list will sorted from oldest to newest by comment_id and comment_parent_id.",
                      "items": {
                        "$ref": "#/components/schemas/comment"
                      },
                      "type": "array"
                    },
                    "totalResults": {
                      "description": "The total number of comments found.",
                      "type": "integer"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Bad request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Invalid login"
          },
          "403": {
            "description": "Do not have permission to retrieve the list of comments."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Not Found"
          }
        },
        "summary": "Retrieve a list of comments for an entry",
        "tags": [
          "Comments",
          "Entries"
        ]
      },
      "post": {
        "description": "Create a new comment on an entry.\n\nAuthorization is required.\n",
        "parameters": [
          {
            "in": "path",
            "name": "site_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "entry_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "properties": {
                  "comment": {
                    "$ref": "#/components/schemas/comment_updatable"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/comment"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Bad request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Invalid login"
          },
          "403": {
            "description": "Do not have permission to create a comment."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Not Found"
          }
        },
        "security": [
          {
            "mtauth": []
          }
        ],
        "summary": "Create a new comment on an entry",
        "tags": [
          "Comments",
          "Entries"
        ]
      }
    },
    "/sites/{site_id}/entries/{entry_id}/comments/{comment_id}/replies": {
      "post": {
        "description": "Reply to specified comment.\n\nAuthorization is required.\n",
        "parameters": [
          {
            "in": "path",
            "name": "site_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "entry_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "comment_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "properties": {
                  "comment": {
                    "$ref": "#/components/schemas/comment_updatable"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/comment"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Bad request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Invalid login"
          },
          "403": {
            "description": "Do not have permission to create a reply to the requested comment."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Not Found"
          }
        },
        "security": [
          {
            "mtauth": []
          }
        ],
        "summary": "Reply to specified comment",
        "tags": [
          "Comments",
          "Entries"
        ]
      }
    },
    "/sites/{site_id}/entries/{entry_id}/preview": {
      "post": {
        "description": "- Authorization is required.\n- **This endpoint has been available since Movable Type 6.1.2.**\n- **entry** parameter is required. If you just want to get preview entry from existing data, you should provide entry parameter with empty json.\n\n#### Permissions\n\n- create_post\n",
        "parameters": [
          {
            "in": "path",
            "name": "site_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "entry_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "If specify \"1\", will be returned preview contents.",
            "in": "query",
            "name": "raw",
            "schema": {
              "default": 0,
              "enum": [
                0,
                1
              ],
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "properties": {
                  "entry": {
                    "$ref": "#/components/schemas/entry"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "preview": {
                      "type": "string"
                    },
                    "status": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Bad request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Invalid login"
          },
          "403": {
            "description": "Do not have permission to preview entry."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Site or Entry not found"
          }
        },
        "security": [
          {
            "mtauth": []
          }
        ],
        "summary": "Make a preview for a entry with existing data",
        "tags": [
          "Entries"
        ]
      }
    },
    "/sites/{site_id}/entries/{entry_id}/trackbacks": {
      "get": {
        "description": "Retrieve a list of trackbacks for an entry.\n\nAuthorization is required to include unpublished trackbacks\n",
        "parameters": [
          {
            "in": "path",
            "name": "site_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "entry_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "Input `MTAuth accessToken={accessToken}`",
            "in": "header",
            "name": "X-MT-Authorization",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "This is an optional parameter. Maximum number of trackbacks to retrieve. Default is 10.",
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "This is an optional parameter. 0-indexed offset. Default is 0.",
            "in": "query",
            "name": "offset",
            "schema": {
              "type": "integer"
            }
          },
          {
            "$ref": "#/components/parameters/trackback_dateField"
          },
          {
            "$ref": "#/components/parameters/trackback_dateFrom"
          },
          {
            "$ref": "#/components/parameters/trackback_dateTo"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "items": {
                      "description": "An array of trakcbacks resource. The list will sorted from oldest to newest by received date.",
                      "items": {
                        "$ref": "#/components/schemas/trackback"
                      },
                      "type": "array"
                    },
                    "totalResults": {
                      "description": "The total number of trackbacks found.",
                      "type": "integer"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Bad request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Invalid login"
          },
          "403": {
            "description": "Do not have permission to retrieve the list of trackbacks."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Not Found"
          }
        },
        "summary": "Retrieve a list of trackbacks for an entry",
        "tags": [
          "Trackbacks",
          "Entries"
        ]
      }
    },
    "/sites/{site_id}/export_theme": {
      "post": {
        "description": "- Authentication is required\n- This endpoint will export current theme elements of specified site into theme directory.\n\n#### Permissions\n\n- manage_themes\n",
        "parameters": [
          {
            "in": "path",
            "name": "site_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "status": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "No Errors."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Bad request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Invalid login"
          },
          "403": {
            "description": "Do not have permission to export the requested theme."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Site or Theme not found"
          }
        },
        "security": [
          {
            "mtauth": []
          }
        ],
        "summary": "Export site's theme",
        "tags": [
          "Themes"
        ]
      }
    },
    "/sites/{site_id}/fields": {
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "site_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "$ref": "#/components/parameters/field_search"
          },
          {
            "$ref": "#/components/parameters/field_searchFields"
          },
          {
            "$ref": "#/components/parameters/field_limit"
          },
          {
            "$ref": "#/components/parameters/field_offset"
          },
          {
            "$ref": "#/components/parameters/field_sortBy"
          },
          {
            "$ref": "#/components/parameters/field_sortOrder"
          },
          {
            "$ref": "#/components/parameters/field_fields"
          },
          {
            "$ref": "#/components/parameters/field_dateField"
          },
          {
            "$ref": "#/components/parameters/field_dateFrom"
          },
          {
            "$ref": "#/components/parameters/field_dateTo"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "items": {
                      "description": "An array of fields resource.",
                      "items": {
                        "$ref": "#/components/schemas/field"
                      },
                      "type": "array"
                    },
                    "totalResults": {
                      "description": " The total number of fields.",
                      "type": "integer"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "No Errors."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Bad request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Invalid login"
          },
          "403": {
            "description": "Do not have permission to retrieve the requested fields."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Site not found."
          }
        },
        "security": [
          {
            "mtauth": []
          }
        ],
        "summary": "Retrieve a list of fields in the specified site",
        "tags": [
          "CustomFields"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "path",
            "name": "site_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "properties": {
                  "field": {
                    "$ref": "#/components/schemas/field_updatable"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/field"
                }
              }
            },
            "description": "No Errors."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Bad request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Invalid login"
          },
          "403": {
            "description": "Do not have permission to create a field."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Site not found."
          }
        },
        "security": [
          {
            "mtauth": []
          }
        ],
        "summary": "Create a new field",
        "tags": [
          "CustomFields"
        ]
      }
    },
    "/sites/{site_id}/fields/{field_id}": {
      "delete": {
        "description": "\n#### Notes\n- This method accepts DELETE and POST with __method=DELETE.\n",
        "parameters": [
          {
            "in": "path",
            "name": "site_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "field_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/field"
                }
              }
            },
            "description": "No Errors."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Bad request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Invalid login"
          },
          "403": {
            "description": "Do not have permission to delete a field."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Site or Field not found."
          },
          "405": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Request method is not DELETE or POST with __method=DELETE"
          }
        },
        "security": [
          {
            "mtauth": []
          }
        ],
        "summary": "Delete a field",
        "tags": [
          "CustomFields"
        ]
      },
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "site_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "field_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "$ref": "#/components/parameters/field_fields"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/field"
                }
              }
            },
            "description": "No Errors."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Bad request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Invalid login"
          },
          "403": {
            "description": "Do not have permission to retrieve the requested field."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Site or Field not found."
          }
        },
        "security": [
          {
            "mtauth": []
          }
        ],
        "summary": "Retrieve single field by its ID",
        "tags": [
          "CustomFields"
        ]
      },
      "put": {
        "description": "\n#### Notes\n- This method accepts PUT and POST with __method=PUT.\n",
        "parameters": [
          {
            "in": "path",
            "name": "site_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "field_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "properties": {
                  "field": {
                    "$ref": "#/components/schemas/field_updatable"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/field"
                }
              }
            },
            "description": "No Errors."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Bad request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Invalid login"
          },
          "403": {
            "description": "Do not have permission to update a field."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Site or Field not found."
          },
          "405": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Request method is not PUT or POST with __method=PUT"
          }
        },
        "security": [
          {
            "mtauth": []
          }
        ],
        "summary": "Update a field",
        "tags": [
          "CustomFields"
        ]
      }
    },
    "/sites/{site_id}/folders": {
      "get": {
        "description": "Authentication required if you want to get private properties.",
        "parameters": [
          {
            "in": "path",
            "name": "site_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "Input `MTAuth accessToken={accessToken}`",
            "in": "header",
            "name": "X-MT-Authorization",
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/folder_search"
          },
          {
            "$ref": "#/components/parameters/folder_searchFields"
          },
          {
            "$ref": "#/components/parameters/folder_limit"
          },
          {
            "$ref": "#/components/parameters/folder_offset"
          },
          {
            "description": "#### user_custom\n\nSort order you specified on the Manage Folders screen.\n\n#### created_by\n\nSort by the ID of creator.\n\n#### id\n\nSort by its own ID.\n\n#### basename\n\nSort by the basename of each folders.\n\n#### label\n\nSort by the label of each folders.\n\n**Default**: user_custom\n",
            "in": "query",
            "name": "sortBy",
            "schema": {
              "default": "user_custom",
              "enum": [
                "user_custom",
                "created_by",
                "id",
                "basename",
                "label"
              ],
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/folder_sortOrder"
          },
          {
            "$ref": "#/components/parameters/folder_fields"
          },
          {
            "$ref": "#/components/parameters/folder_includeIds"
          },
          {
            "$ref": "#/components/parameters/folder_excludeIds"
          },
          {
            "description": "If set to 1, retrieves only top level folders.\n\n**Default**: 0\n",
            "in": "query",
            "name": "top",
            "schema": {
              "default": 0,
              "enum": [
                0,
                1
              ],
              "type": "integer"
            }
          },
          {
            "$ref": "#/components/parameters/folder_dateField"
          },
          {
            "$ref": "#/components/parameters/folder_dateFrom"
          },
          {
            "$ref": "#/components/parameters/folder_dateTo"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "items": {
                      "items": {
                        "$ref": "#/components/schemas/folder"
                      },
                      "type": "array"
                    },
                    "totalResults": {
                      "type": "integer"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "No Errors."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Bad request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Invalid login"
          },
          "403": {
            "description": "Do not have permission to retrieve the list of folders."
          }
        },
        "summary": "Retrieve a list of folders",
        "tags": [
          "Folders"
        ]
      },
      "post": {
        "description": "Authorization is required.\n\n#### Permission\n\n- Manage Pages\n",
        "parameters": [
          {
            "in": "path",
            "name": "site_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "properties": {
                  "folder": {
                    "$ref": "#/components/schemas/folder_updatable"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/folder"
                }
              }
            },
            "description": "No Errors."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Bad request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Invalid login"
          },
          "403": {
            "description": "Do not have permission to create a folder."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Site not found."
          }
        },
        "security": [
          {
            "mtauth": []
          }
        ],
        "summary": "Create a new folder.",
        "tags": [
          "Folders"
        ]
      }
    },
    "/sites/{site_id}/folders/permutate": {
      "post": {
        "description": "- Authorization is required.\n- This method returns rearranged Folders resource.\n\n#### Permission\n\n- Manage Pages\n",
        "parameters": [
          {
            "in": "path",
            "name": "site_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "properties": {
                  "folders": {
                    "description": "Array of folder resource that were rearranged.",
                    "example": "[\n  { \"id\": 0 },\n  { \"id\": 1 } \n]\n",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/folder"
                  },
                  "type": "array"
                }
              }
            },
            "description": "No Errors."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Bad request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Invalid login"
          },
          "403": {
            "description": "Do not have permission to permutate folders."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Site not found."
          }
        },
        "security": [
          {
            "mtauth": []
          }
        ],
        "summary": "Rearrange existing folders in a new order",
        "tags": [
          "Folders"
        ]
      }
    },
    "/sites/{site_id}/folders/{folder_id}": {
      "delete": {
        "description": "- Authorization is required.\n- This method returns deleted Folder resource.\n\n#### Permission\n\n- Manage Pages\n\n#### Notes\n- This method accepts DELETE and POST with __method=DELETE.\n",
        "parameters": [
          {
            "in": "path",
            "name": "site_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "folder_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/folder"
                }
              }
            },
            "description": "No Errors."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Bad request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Invalid login"
          },
          "403": {
            "description": "Do not have permission to delete a folder."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Site or Folder not found."
          },
          "405": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Request method is not DELETE or POST with __method=DELETE"
          }
        },
        "security": [
          {
            "mtauth": []
          }
        ],
        "summary": "Delete an existing folder",
        "tags": [
          "Folders"
        ]
      },
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "site_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "folder_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "Input `MTAuth accessToken={accessToken}`",
            "in": "header",
            "name": "X-MT-Authorization",
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/folder_fields"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/folder"
                }
              }
            },
            "description": "No Errors."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Bad request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Invalid login"
          },
          "403": {
            "description": "Do not have permission to retrieve the requested folder."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Folder or site not found."
          }
        },
        "summary": "Retrieve single folder by its ID",
        "tags": [
          "Folders"
        ]
      },
      "put": {
        "description": "- Authorization is required.\n\n#### Permission\n\n- Manage Pages\n\n#### Notes\n- This method accepts PUT and POST with __method=PUT.\n",
        "parameters": [
          {
            "in": "path",
            "name": "site_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "folder_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "properties": {
                  "folder": {
                    "$ref": "#/components/schemas/folder_updatable"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/folder"
                }
              }
            },
            "description": "No Errors."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Bad request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Invalid login"
          },
          "403": {
            "description": "Do not have permission to update a folder."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Site or Folder not found."
          },
          "405": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Request method is not PUT or POST with __method=PUT"
          }
        },
        "security": [
          {
            "mtauth": []
          }
        ],
        "summary": "Update an existing folder",
        "tags": [
          "Folders"
        ]
      }
    },
    "/sites/{site_id}/folders/{folder_id}/children": {
      "get": {
        "description": "Authentication required if you want to get private properties.",
        "parameters": [
          {
            "in": "path",
            "name": "site_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "folder_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "Input `MTAuth accessToken={accessToken}`",
            "in": "header",
            "name": "X-MT-Authorization",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The depth of retrieving child folders.\n\n**Default**: 0\n",
            "in": "query",
            "name": "maxDepth",
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "#### 1\n\nThe results includes current folder.\n\n#### 0\n\nThe results do not include current folder.\n\n**Default**: 0\n",
            "in": "query",
            "name": "includeCurrent",
            "schema": {
              "default": 0,
              "enum": [
                0,
                1
              ],
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "items": {
                      "items": {
                        "$ref": "#/components/schemas/folder"
                      },
                      "type": "array"
                    },
                    "totalResults": {
                      "type": "integer"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "No Errors."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Bad request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Invalid login"
          },
          "403": {
            "description": "Do not have permission to retrieve the list of folders."
          }
        },
        "summary": "Retrieve a list of child folders of the requested folder",
        "tags": [
          "Folders"
        ]
      }
    },
    "/sites/{site_id}/folders/{folder_id}/pages": {
      "get": {
        "description": "- Authorization is required to include unpublished pages.\n\n#### Permissions\n\n- manage_pages\n  - to retrieve unpublished page\n",
        "parameters": [
          {
            "in": "path",
            "name": "site_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "folder_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "Input `MTAuth accessToken={accessToken}`",
            "in": "header",
            "name": "X-MT-Authorization",
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/page_search"
          },
          {
            "$ref": "#/components/parameters/page_searchFields"
          },
          {
            "$ref": "#/components/parameters/page_limit"
          },
          {
            "$ref": "#/components/parameters/page_offset"
          },
          {
            "$ref": "#/components/parameters/page_sortBy"
          },
          {
            "$ref": "#/components/parameters/page_sortOrder"
          },
          {
            "$ref": "#/components/parameters/page_fields"
          },
          {
            "$ref": "#/components/parameters/page_includeIds"
          },
          {
            "$ref": "#/components/parameters/page_excludeIds"
          },
          {
            "$ref": "#/components/parameters/page_status"
          },
          {
            "$ref": "#/components/parameters/page_maxComments"
          },
          {
            "$ref": "#/components/parameters/page_maxTrackbacks"
          },
          {
            "$ref": "#/components/parameters/page_no_text_filter"
          },
          {
            "$ref": "#/components/parameters/page_dateField"
          },
          {
            "$ref": "#/components/parameters/page_dateFrom"
          },
          {
            "$ref": "#/components/parameters/page_dateTo"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "items": {
                      "description": "An array of page resource.",
                      "items": {
                        "$ref": "#/components/schemas/page"
                      },
                      "type": "array"
                    },
                    "totalResults": {
                      "description": " The total number of pages.",
                      "type": "integer"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "No Errors."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Bad request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Invalid login"
          },
          "403": {
            "description": "Do not have permission to retrieve the requested pages."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Site or Folder not found."
          }
        },
        "summary": "Retrieve a list of pages by specific folder",
        "tags": [
          "Pages",
          "Folders"
        ]
      }
    },
    "/sites/{site_id}/folders/{folder_id}/parents": {
      "get": {
        "description": "Authentication required if you want to get private properties.",
        "parameters": [
          {
            "in": "path",
            "name": "site_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "folder_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "Input `MTAuth accessToken={accessToken}`",
            "in": "header",
            "name": "X-MT-Authorization",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The depth of retrieving parent folders.\n\n**Default**: 0\n",
            "in": "query",
            "name": "maxDepth",
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "#### 1\n\nThe results includes current folder.\n\n#### 0\n\nThe results do not include current folder.\n\n**Default**: 0\n",
            "in": "query",
            "name": "includeCurrent",
            "schema": {
              "default": 0,
              "enum": [
                0,
                1
              ],
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "items": {
                      "items": {
                        "$ref": "#/components/schemas/folder"
                      },
                      "type": "array"
                    },
                    "totalResults": {
                      "type": "integer"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "No Errors."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Bad request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Invalid login"
          },
          "403": {
            "description": "Do not have permission to retrieve the list of folders."
          }
        },
        "summary": "Retrieve a list of parent folders of the requested folder",
        "tags": [
          "Folders"
        ]
      }
    },
    "/sites/{site_id}/folders/{folder_id}/siblings": {
      "get": {
        "description": "Authentication required if you want to get private properties.",
        "parameters": [
          {
            "in": "path",
            "name": "site_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "folder_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "Input `MTAuth accessToken={accessToken}`",
            "in": "header",
            "name": "X-MT-Authorization",
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/folder_search"
          },
          {
            "$ref": "#/components/parameters/folder_searchFields"
          },
          {
            "$ref": "#/components/parameters/folder_limit"
          },
          {
            "$ref": "#/components/parameters/folder_offset"
          },
          {
            "description": "#### user_custom\n\nSort order you specified on the Manage Folders screen.\n\n#### created_by\n\nSort by the ID of creator.\n\n#### id\n\nSort by its own ID.\n\n#### basename\n\nSort by the basename of each folders.\n\n#### label\n\nSort by the label of each folders.\n\n**Default**: user_custom\n",
            "in": "query",
            "name": "sortBy",
            "schema": {
              "default": "user_custom",
              "enum": [
                "user_custom",
                "created_by",
                "id",
                "basename",
                "label"
              ],
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/folder_sortOrder"
          },
          {
            "$ref": "#/components/parameters/folder_fields"
          },
          {
            "$ref": "#/components/parameters/folder_includeIds"
          },
          {
            "$ref": "#/components/parameters/folder_excludeIds"
          },
          {
            "description": "Default: 0\n\nIf set to 1, retrieves only top level folders.\n",
            "in": "query",
            "name": "top",
            "schema": {
              "default": 0,
              "enum": [
                0,
                1
              ],
              "type": "integer"
            }
          },
          {
            "$ref": "#/components/parameters/folder_dateField"
          },
          {
            "$ref": "#/components/parameters/folder_dateFrom"
          },
          {
            "$ref": "#/components/parameters/folder_dateTo"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "items": {
                      "items": {
                        "$ref": "#/components/schemas/folder"
                      },
                      "type": "array"
                    },
                    "totalResults": {
                      "type": "integer"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "No Errors."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Bad request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Invalid login"
          },
          "403": {
            "description": "Do not have permission to retrieve the list of folders."
          }
        },
        "summary": "Retrieve a list of sibling folders of the requested folder",
        "tags": [
          "Folders"
        ]
      }
    },
    "/sites/{site_id}/formatted_texts": {
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "site_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "$ref": "#/components/parameters/formatted_text_search"
          },
          {
            "$ref": "#/components/parameters/formatted_text_searchFields"
          },
          {
            "$ref": "#/components/parameters/formatted_text_limit"
          },
          {
            "$ref": "#/components/parameters/formatted_text_offset"
          },
          {
            "$ref": "#/components/parameters/formatted_text_sortBy"
          },
          {
            "$ref": "#/components/parameters/formatted_text_sortOrder"
          },
          {
            "$ref": "#/components/parameters/formatted_text_fields"
          },
          {
            "$ref": "#/components/parameters/formatted_text_includeIds"
          },
          {
            "$ref": "#/components/parameters/formatted_text_excludeIds"
          },
          {
            "$ref": "#/components/parameters/formatted_text_dateField"
          },
          {
            "$ref": "#/components/parameters/formatted_text_dateFrom"
          },
          {
            "$ref": "#/components/parameters/formatted_text_dateTo"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "items": {
                      "description": "An array of formatted_texts resource.",
                      "items": {
                        "$ref": "#/components/schemas/formatted_text"
                      },
                      "type": "array"
                    },
                    "totalResults": {
                      "description": " The total number of formatted_texts found that by the request.",
                      "type": "integer"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "No Errors."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Bad request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Invalid login"
          },
          "403": {
            "description": "Do not have permission to retrieve the list of formatted texts."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Site not found."
          }
        },
        "security": [
          {
            "mtauth": []
          }
        ],
        "summary": "Retrieve a list of formatted_texts in the specified site",
        "tags": [
          "FormattedText"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "path",
            "name": "site_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "properties": {
                  "formatted_text": {
                    "$ref": "#/components/schemas/formatted_text_updatable"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/formatted_text"
                }
              }
            },
            "description": "No Errors."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Bad request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Invalid login"
          },
          "403": {
            "description": "Do not have permission to create a formatted text."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Site not found."
          }
        },
        "security": [
          {
            "mtauth": []
          }
        ],
        "summary": "Create a new formatted_text",
        "tags": [
          "FormattedText"
        ]
      }
    },
    "/sites/{site_id}/formatted_texts/{formatted_text_id}": {
      "delete": {
        "description": "\n#### Notes\n- This method accepts DELETE and POST with __method=DELETE.\n",
        "parameters": [
          {
            "in": "path",
            "name": "site_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "formatted_text_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/formatted_text"
                }
              }
            },
            "description": "No Errors."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Bad request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Invalid login"
          },
          "403": {
            "description": "Do not have permission to delete a formatted text."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Site or FormattedText not found."
          },
          "405": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Request method is not DELETE or POST with __method=DELETE"
          }
        },
        "security": [
          {
            "mtauth": []
          }
        ],
        "summary": "Delete a formatted_text",
        "tags": [
          "FormattedText"
        ]
      },
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "site_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "formatted_text_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "$ref": "#/components/parameters/formatted_text_fields"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/formatted_text"
                }
              }
            },
            "description": "No Errors."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Bad request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Invalid login"
          },
          "403": {
            "description": "Do not have permission to retrieve the requested formatted text."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Site or FormattedText not found."
          }
        },
        "security": [
          {
            "mtauth": []
          }
        ],
        "summary": "Retrieve single formatted_text by its ID",
        "tags": [
          "FormattedText"
        ]
      },
      "put": {
        "description": "\n#### Notes\n- This method accepts PUT and POST with __method=PUT.\n",
        "parameters": [
          {
            "in": "path",
            "name": "site_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "formatted_text_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "properties": {
                  "formatted_text": {
                    "$ref": "#/components/schemas/formatted_text_updatable"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/formatted_text"
                }
              }
            },
            "description": "No Errors."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Bad request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Invalid login"
          },
          "403": {
            "description": "Do not have permission to update a formatted text."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Site or FormattedText not found."
          },
          "405": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Request method is not PUT or POST with __method=PUT"
          }
        },
        "security": [
          {
            "mtauth": []
          }
        ],
        "summary": "Update a formatted_text",
        "tags": [
          "FormattedText"
        ]
      }
    },
    "/sites/{site_id}/logs": {
      "delete": {
        "description": "\n#### Notes\n- This method accepts DELETE and POST with __method=DELETE.\n",
        "parameters": [
          {
            "in": "path",
            "name": "site_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "status": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "No Errors"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Bad request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Invalid login"
          },
          "403": {
            "description": "Do not have permission to reset logs."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Site not found."
          },
          "405": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Request method is not DELETE or POST with __method=DELETE"
          }
        },
        "security": [
          {
            "mtauth": []
          }
        ],
        "summary": "Reset logs",
        "tags": [
          "Logs"
        ]
      },
      "get": {
        "description": "- Authorization is required.\n\n#### Permissions\n\n- view_blog_log for website and blog.\n- view_log for the system.\n",
        "parameters": [
          {
            "in": "path",
            "name": "site_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "$ref": "#/components/parameters/log_search"
          },
          {
            "$ref": "#/components/parameters/log_searchFields"
          },
          {
            "$ref": "#/components/parameters/log_limit"
          },
          {
            "$ref": "#/components/parameters/log_offset"
          },
          {
            "description": "- id\n- created_on\n- blog_id\n- author_id\n- level\n- class\n\n**Default**: created_on\n",
            "in": "query",
            "name": "sortBy",
            "schema": {
              "default": "created_on",
              "enum": [
                "id",
                "created_on",
                "blog_id",
                "author_id",
                "level",
                "class"
              ],
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/log_sortOrder"
          },
          {
            "$ref": "#/components/parameters/log_fields"
          },
          {
            "$ref": "#/components/parameters/log_includeIds"
          },
          {
            "$ref": "#/components/parameters/log_excludeIds"
          },
          {
            "description": "The comma separated list of level name to filter logs. Available value is foolows.\n\n- security\n- error\n- warning\n- info\n- debug\n- security_or_error\n- security_or_error_or_warning\n- not_debug\n- debug_or_error\n",
            "in": "query",
            "name": "level",
            "schema": {
              "enum": [
                "security",
                "error",
                "warning",
                "info",
                "debug",
                "security_or_error",
                "security_or_error_or_warning",
                "not_debug",
                "debug_or_error"
              ],
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/log_dateField"
          },
          {
            "$ref": "#/components/parameters/log_dateFrom"
          },
          {
            "$ref": "#/components/parameters/log_dateTo"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "items": {
                      "description": "An array of log resource.",
                      "items": {
                        "$ref": "#/components/schemas/log"
                      },
                      "type": "array"
                    },
                    "totalResults": {
                      "description": " The total number of logs.",
                      "type": "integer"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "No Errors."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Bad request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Invalid login"
          },
          "403": {
            "description": "Do not have permission to retrieve the list of activity logs."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Site not found."
          }
        },
        "security": [
          {
            "mtauth": []
          }
        ],
        "summary": "Retrieve a list of logs in the specified site",
        "tags": [
          "Logs"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "path",
            "name": "site_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "properties": {
                  "log": {
                    "$ref": "#/components/schemas/log_updatable"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/log"
                }
              }
            },
            "description": "No Errors."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Bad request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Invalid login"
          },
          "403": {
            "description": "Do not have permission to create a log."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Site not found."
          }
        },
        "security": [
          {
            "mtauth": []
          }
        ],
        "summary": "Create a new log",
        "tags": [
          "Logs"
        ]
      }
    },
    "/sites/{site_id}/logs/export": {
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "site_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "encoding",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "text/csv": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "No Errors"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Bad request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Invalid login"
          },
          "403": {
            "description": "Do not have permission to export logs."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Site not found."
          }
        },
        "security": [
          {
            "mtauth": []
          }
        ],
        "summary": "Export logs",
        "tags": [
          "Logs"
        ]
      }
    },
    "/sites/{site_id}/logs/{log_id}": {
      "delete": {
        "description": "\n#### Notes\n- This method accepts DELETE and POST with __method=DELETE.\n",
        "parameters": [
          {
            "in": "path",
            "name": "site_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "log_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/log"
                }
              }
            },
            "description": "No Errors."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Bad request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Invalid login"
          },
          "403": {
            "description": "Do not have permission to delete a log."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Site or Log not found."
          },
          "405": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Request method is not DELETE or POST with __method=DELETE"
          }
        },
        "security": [
          {
            "mtauth": []
          }
        ],
        "summary": "Delete an existing log",
        "tags": [
          "Logs"
        ]
      },
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "site_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "log_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "$ref": "#/components/parameters/log_fields"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/log"
                }
              }
            },
            "description": "No Errors."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Bad request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Invalid login"
          },
          "403": {
            "description": "Do not have permission to retrieve the requested log."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Site or Log not found."
          }
        },
        "security": [
          {
            "mtauth": []
          }
        ],
        "summary": "Retrieve a single log by its ID",
        "tags": [
          "Logs"
        ]
      },
      "put": {
        "description": "\n#### Notes\n- This method accepts PUT and POST with __method=PUT.\n",
        "parameters": [
          {
            "in": "path",
            "name": "site_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "log_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "properties": {
                  "log": {
                    "$ref": "#/components/schemas/log_updatable"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/log"
                }
              }
            },
            "description": "No Errors."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Bad request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Invalid login"
          },
          "403": {
            "description": "Do not have permission to update a log."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Site or Log not found."
          },
          "405": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Request method is not PUT or POST with __method=PUT"
          }
        },
        "security": [
          {
            "mtauth": []
          }
        ],
        "summary": "Update an existing log",
        "tags": [
          "Logs"
        ]
      }
    },
    "/sites/{site_id}/pages": {
      "get": {
        "description": "- Authorization is required to include unpublished pages.\n\n#### Permissions\n\n- manage_pages\n  - to retrieve unpublished page\n",
        "parameters": [
          {
            "in": "path",
            "name": "site_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "Input `MTAuth accessToken={accessToken}`",
            "in": "header",
            "name": "X-MT-Authorization",
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/page_search"
          },
          {
            "$ref": "#/components/parameters/page_searchFields"
          },
          {
            "$ref": "#/components/parameters/page_limit"
          },
          {
            "$ref": "#/components/parameters/page_offset"
          },
          {
            "$ref": "#/components/parameters/page_sortBy"
          },
          {
            "$ref": "#/components/parameters/page_sortOrder"
          },
          {
            "$ref": "#/components/parameters/page_fields"
          },
          {
            "$ref": "#/components/parameters/page_includeIds"
          },
          {
            "$ref": "#/components/parameters/page_excludeIds"
          },
          {
            "$ref": "#/components/parameters/page_status"
          },
          {
            "$ref": "#/components/parameters/page_maxComments"
          },
          {
            "$ref": "#/components/parameters/page_maxTrackbacks"
          },
          {
            "$ref": "#/components/parameters/page_no_text_filter"
          },
          {
            "$ref": "#/components/parameters/page_dateField"
          },
          {
            "$ref": "#/components/parameters/page_dateFrom"
          },
          {
            "$ref": "#/components/parameters/page_dateTo"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "items": {
                      "description": "An array of page resource.",
                      "items": {
                        "$ref": "#/components/schemas/page"
                      },
                      "type": "array"
                    },
                    "totalResults": {
                      "description": " The total number of pages.",
                      "type": "integer"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "No Errors."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Bad request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Invalid login"
          },
          "403": {
            "description": "Do not have permission to retrieve the requested pages."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Site not found."
          }
        },
        "summary": "Retrieve a list of pages in the specified site",
        "tags": [
          "Pages"
        ]
      },
      "post": {
        "description": "- Authorization is required.\n\n#### Update in v2.0\n\n- You can attach folder and assets in one request.\n\n#### Permissions\n\n- manage_post\n",
        "parameters": [
          {
            "in": "path",
            "name": "site_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "properties": {
                  "page": {
                    "$ref": "#/components/schemas/page_updatable"
                  },
                  "publish": {
                    "description": "If this value is \"0\", the entry is not published",
                    "enum": [
                      0,
                      1
                    ],
                    "type": "integer"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/page"
                }
              }
            },
            "description": "No Errors."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Bad request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Invalid login"
          },
          "403": {
            "description": "Do not have permission to create a page."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Site not found."
          }
        },
        "security": [
          {
            "mtauth": []
          }
        ],
        "summary": "Create a new page",
        "tags": [
          "Pages"
        ]
      }
    },
    "/sites/{site_id}/pages/preview": {
      "post": {
        "description": "- Authorization is required.\n- **This endpoint has been available since Movable Type 6.1.2.**\n\n#### Permissions\n\n- manage_pages\n",
        "parameters": [
          {
            "in": "path",
            "name": "site_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "If specify \"1\", will be returned preview contents.",
            "in": "query",
            "name": "raw",
            "schema": {
              "default": 0,
              "enum": [
                0,
                1
              ],
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "properties": {
                  "page": {
                    "$ref": "#/components/schemas/page"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "preview": {
                      "type": "string"
                    },
                    "status": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "No Errors."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Bad request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Invalid login"
          },
          "403": {
            "description": "Do not have permission to preview page."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Site or Page not found"
          }
        },
        "security": [
          {
            "mtauth": []
          }
        ],
        "summary": "Make a preview for a page",
        "tags": [
          "Pages"
        ]
      }
    },
    "/sites/{site_id}/pages/{page_id}": {
      "delete": {
        "description": "- Authorization is required.\n\n#### Permissions\n\n- edit_entry\n\n#### Notes\n- This method accepts DELETE and POST with __method=DELETE.\n",
        "parameters": [
          {
            "in": "path",
            "name": "site_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "page_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/page"
                }
              }
            },
            "description": "No Errors."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Bad request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Invalid login"
          },
          "403": {
            "description": "Do not have permission to delete a page."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Site or Page not found."
          },
          "405": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Request method is not DELETE or POST with __method=DELETE"
          }
        },
        "security": [
          {
            "mtauth": []
          }
        ],
        "summary": "Delete an existing page",
        "tags": [
          "Pages"
        ]
      },
      "get": {
        "description": "- Authorization is required if the page status is \"unpublished\". If the page status is \"published\", then this method can be called without authorization.\n",
        "parameters": [
          {
            "in": "path",
            "name": "site_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "page_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "Input `MTAuth accessToken={accessToken}`",
            "in": "header",
            "name": "X-MT-Authorization",
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/page_fields"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/page"
                }
              }
            },
            "description": "No Errors."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Bad request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Invalid login"
          },
          "403": {
            "description": "Do not have permission to retrieve the requested page."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Site or Page not found."
          }
        },
        "summary": "Retrieve a single page by its ID",
        "tags": [
          "Pages"
        ]
      },
      "put": {
        "description": "- Authorization is required.\n\n#### Update in v2.0\n\n- You can attach/detach folder and assets in one request.\n\n#### Permissions\n\n- manage_pages\n\n#### Notes\n- This method accepts PUT and POST with __method=PUT.\n",
        "parameters": [
          {
            "in": "path",
            "name": "site_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "page_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "properties": {
                  "page": {
                    "$ref": "#/components/schemas/page_updatable"
                  },
                  "publish": {
                    "description": "If this value is \"0\", the entry is not published",
                    "enum": [
                      0,
                      1
                    ],
                    "type": "integer"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/page"
                }
              }
            },
            "description": "No Errors."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Bad request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Invalid login"
          },
          "403": {
            "description": "Do not have permission to update a page."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Site or Page not found."
          },
          "405": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Request method is not PUT or POST with __method=PUT"
          }
        },
        "security": [
          {
            "mtauth": []
          }
        ],
        "summary": "Update an existing page",
        "tags": [
          "Pages"
        ]
      }
    },
    "/sites/{site_id}/pages/{page_id}/assets": {
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "site_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "page_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "Input `MTAuth accessToken={accessToken}`",
            "in": "header",
            "name": "X-MT-Authorization",
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/asset_limit"
          },
          {
            "$ref": "#/components/parameters/asset_offset"
          },
          {
            "description": "The target asset class to retrieve. Supported values are image, audio, video, file and any values added by plugins. If you want to retrieve multiple classes, specify the values separated by commas.",
            "in": "query",
            "name": "class",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "#### file_name\n\nSort by the filename of each asset.\n\n#### created_by\n\nSort by the ID of user who created each asset.\n\n#### created_on\n\n(default) Sort by the created time of each asset.\n\n**Default**: created_on\n",
            "in": "query",
            "name": "sortBy",
            "schema": {
              "default": "created_on",
              "enum": [
                "file_name",
                "created_by",
                "created_on"
              ],
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/asset_sortOrder"
          },
          {
            "$ref": "#/components/parameters/asset_fields"
          },
          {
            "$ref": "#/components/parameters/asset_dateField"
          },
          {
            "$ref": "#/components/parameters/asset_dateFrom"
          },
          {
            "$ref": "#/components/parameters/asset_dateTo"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "items": {
                      "items": {
                        "$ref": "#/components/schemas/asset"
                      },
                      "type": "array"
                    },
                    "totalResults": {
                      "type": "integer"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "No Errors."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Bad request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Invalid login"
          },
          "403": {
            "description": "Do not have permission to retrieve the requested assets for page."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Site or page not found."
          }
        },
        "summary": "Retrieve assets that related with specified page",
        "tags": [
          "Assets",
          "Pages"
        ]
      }
    },
    "/sites/{site_id}/pages/{page_id}/comments": {
      "get": {
        "description": "Retrieve a list of comments for a page.\n\nAuthorization is required to include unpublished comments\n",
        "parameters": [
          {
            "in": "path",
            "name": "site_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "page_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "Input `MTAuth accessToken={accessToken}`",
            "in": "header",
            "name": "X-MT-Authorization",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "This is an optional parameter. Maximum number of comments to retrieve. Default is 10.",
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "This is an optional parameter. 0-indexed offset. Default is 0.",
            "in": "query",
            "name": "offset",
            "schema": {
              "type": "integer"
            }
          },
          {
            "$ref": "#/components/parameters/comment_dateField"
          },
          {
            "$ref": "#/components/parameters/comment_dateFrom"
          },
          {
            "$ref": "#/components/parameters/comment_dateTo"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "items": {
                      "description": "An array of Comments resource. The list will sorted from oldest to newest by comment_id and comment_parent_id.",
                      "items": {
                        "$ref": "#/components/schemas/comment"
                      },
                      "type": "array"
                    },
                    "totalResults": {
                      "description": "The total number of comments found.",
                      "type": "integer"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Bad request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Invalid login"
          },
          "403": {
            "description": "Do not have permission to retrieve the list of comments."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Not Found"
          }
        },
        "summary": "Retrieve a list of comments for the specified page",
        "tags": [
          "Comments",
          "Pages"
        ]
      },
      "post": {
        "description": "Create a new comment on a page.\n\nAuthorization is required.\n",
        "parameters": [
          {
            "in": "path",
            "name": "site_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "page_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "properties": {
                  "comment": {
                    "$ref": "#/components/schemas/comment_updatable"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/comment"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Bad request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Invalid login"
          },
          "403": {
            "description": "Do not have permission to create a comment."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Not Found"
          }
        },
        "security": [
          {
            "mtauth": []
          }
        ],
        "summary": "Create a new comment on a page",
        "tags": [
          "Comments",
          "Pages"
        ]
      }
    },
    "/sites/{site_id}/pages/{page_id}/comments/{comment_id}/replies": {
      "post": {
        "description": "Reply to specified comment.\n\nAuthorization is required.\n",
        "parameters": [
          {
            "in": "path",
            "name": "site_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "page_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "comment_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "properties": {
                  "comment": {
                    "$ref": "#/components/schemas/comment_updatable"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/comment"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Bad request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Invalid login"
          },
          "403": {
            "description": "Do not have permission to create a reply to the requested comment."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Not Found"
          }
        },
        "security": [
          {
            "mtauth": []
          }
        ],
        "summary": "Reply to specified comment",
        "tags": [
          "Comments",
          "Pages"
        ]
      }
    },
    "/sites/{site_id}/pages/{page_id}/preview": {
      "post": {
        "description": "- Authorization is required.\n- **This endpoint has been available since Movable Type 6.1.2.**\n- **page** parameter is required. If you just want to get preview page from existing data, you should provide page parameter with empty json.\n\n#### Permissions\n\n- manage_post\n",
        "parameters": [
          {
            "in": "path",
            "name": "site_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "page_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "If specify \"1\", will be returned preview contents.",
            "in": "query",
            "name": "raw",
            "schema": {
              "default": 0,
              "enum": [
                0,
                1
              ],
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "properties": {
                  "page": {
                    "$ref": "#/components/schemas/page"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "preview": {
                      "type": "string"
                    },
                    "status": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "No Errors."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Bad request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Invalid login"
          },
          "403": {
            "description": "Do not have permission to preview page."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Site or Page not found"
          }
        },
        "security": [
          {
            "mtauth": []
          }
        ],
        "summary": "Make a preview for a page with existing data",
        "tags": [
          "Pages"
        ]
      }
    },
    "/sites/{site_id}/pages/{page_id}/trackbacks": {
      "get": {
        "description": "Retrieve a list of trackbacks for an page.\n\nAuthorization is required to include unpublished trackbacks\n",
        "parameters": [
          {
            "in": "path",
            "name": "site_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "page_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "Input `MTAuth accessToken={accessToken}`",
            "in": "header",
            "name": "X-MT-Authorization",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "This is an optional parameter. Maximum number of trackbacks to retrieve. Default is 10.",
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "This is an optional parameter. 0-indexed offset. Default is 0.",
            "in": "query",
            "name": "offset",
            "schema": {
              "type": "integer"
            }
          },
          {
            "$ref": "#/components/parameters/trackback_dateField"
          },
          {
            "$ref": "#/components/parameters/trackback_dateFrom"
          },
          {
            "$ref": "#/components/parameters/trackback_dateTo"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "items": {
                      "description": "An array of trakcbacks resource. The list will sorted from oldest to newest by received date.",
                      "items": {
                        "$ref": "#/components/schemas/trackback"
                      },
                      "type": "array"
                    },
                    "totalResults": {
                      "description": "The total number of trackbacks found.",
                      "type": "integer"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Bad request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Invalid login"
          },
          "403": {
            "description": "Do not have permission to retrieve the list of trackbacks."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Not Found"
          }
        },
        "summary": "Retrieve a list of trackbacks for a page",
        "tags": [
          "Trackbacks",
          "Pages"
        ]
      }
    },
    "/sites/{site_id}/permissions": {
      "get": {
        "description": "- Authentication is required\n\n#### Permissions\n\n- Administer\n- Website Administrator for websites\n- Blog Administrator for blog\n",
        "parameters": [
          {
            "in": "path",
            "name": "site_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "$ref": "#/components/parameters/permission_limit"
          },
          {
            "$ref": "#/components/parameters/permission_offset"
          },
          {
            "$ref": "#/components/parameters/permission_sortBy"
          },
          {
            "$ref": "#/components/parameters/permission_sortOrder"
          },
          {
            "$ref": "#/components/parameters/permission_fields"
          },
          {
            "$ref": "#/components/parameters/permission_dateField"
          },
          {
            "$ref": "#/components/parameters/permission_dateFrom"
          },
          {
            "$ref": "#/components/parameters/permission_dateTo"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "items": {
                      "description": "An array of permission resource.",
                      "items": {
                        "$ref": "#/components/schemas/permission"
                      },
                      "type": "array"
                    },
                    "totalResults": {
                      "description": " The total number of permissions.",
                      "type": "integer"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "No Errors."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Bad request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Invalid login"
          },
          "403": {
            "description": "Do not have permission to retrieve the list of permissions."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Site not found."
          }
        },
        "security": [
          {
            "mtauth": []
          }
        ],
        "summary": "Retrieve a list of permissions for site",
        "tags": [
          "Sites",
          "Permissions"
        ]
      }
    },
    "/sites/{site_id}/permissions/grant": {
      "post": {
        "description": "- Authentication is required\n- You should have grant_administer_role or grant_role_for_blog (Need grant_administer_role when granting role having administer_blog)\n",
        "parameters": [
          {
            "in": "path",
            "name": "site_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "properties": {
                  "role_id": {
                    "description": "The role ID",
                    "type": "integer"
                  },
                  "user_id": {
                    "description": "The user ID",
                    "type": "integer"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "status": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "No Errors."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Bad request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Invalid login"
          },
          "403": {
            "description": "Do not have permission to grant a permission."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Site or Role or User not found"
          }
        },
        "security": [
          {
            "mtauth": []
          }
        ],
        "summary": "Grant permissions to site",
        "tags": [
          "Sites",
          "Permissions"
        ]
      }
    },
    "/sites/{site_id}/permissions/revoke": {
      "post": {
        "description": "- Authentication is required\n- You should have revoke_role(Need revoke_administer_role when granting role having administer_blog )\n",
        "parameters": [
          {
            "in": "path",
            "name": "site_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "properties": {
                  "role_id": {
                    "description": "The role ID",
                    "type": "integer"
                  },
                  "user_id": {
                    "description": "The user ID",
                    "type": "integer"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "status": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "No Errors."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Bad request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Invalid login"
          },
          "403": {
            "description": "Do not have permission to revoke a permission."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Site or Role or User not found"
          }
        },
        "security": [
          {
            "mtauth": []
          }
        ],
        "summary": "Revoke permissions from site",
        "tags": [
          "Sites",
          "Permissions"
        ]
      }
    },
    "/sites/{site_id}/refresh_templates": {
      "post": {
        "description": "- Authorization is required.\n\n#### Permissions\n\n- edit_templates\n",
        "parameters": [
          {
            "in": "path",
            "name": "site_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "The type of refresh mode.\n\n#### refresh\n\nRefresh all templates. However, A template that created by user will never refreshed and never removed from a site.\n\n#### clean\n\nRefresh all templates. In this mode, A template that created by user will removed from a site.\n\n**Default**: refresh\n",
            "in": "query",
            "name": "refresh_type",
            "schema": {
              "default": "refresh",
              "enum": [
                "refresh",
                "clean"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "status": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "No Errors."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Bad request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Invalid login"
          },
          "403": {
            "description": "Do not have permission to refresh templates of the request site."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Site not found"
          }
        },
        "security": [
          {
            "mtauth": []
          }
        ],
        "summary": "Reset all templates in the site",
        "tags": [
          "Templates"
        ]
      }
    },
    "/sites/{site_id}/stats/date/pageviews": {
      "get": {
        "description": "Retrieve pageviews count for each date from provider (e.g. Google Analytics).\n\nAuthorization is required.\n",
        "parameters": [
          {
            "in": "path",
            "name": "site_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "This is an required parameter. Start date of data. The format is \"YYYY-MM-DD\".",
            "in": "query",
            "name": "startDate",
            "required": true,
            "schema": {
              "format": "date",
              "type": "string"
            }
          },
          {
            "description": "This is an required parameter. End date of data. The format is \"YYYY-MM-DD\".",
            "in": "query",
            "name": "endDate",
            "required": true,
            "schema": {
              "format": "date",
              "type": "string"
            }
          },
          {
            "description": "This is an optional parameter. Maximum number of paths to retrieve. Default is 10.",
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "This is an optional parameter. 0-indexed offset. Default is 0.",
            "in": "query",
            "name": "offset",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "This is an optional parameter. The target path of data to retrieve. Default is the path of the current site.",
            "in": "query",
            "name": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "This is an optional parameter. If true is given, the MT can return total pageviews for each uniqueness paths. However, that data does not contain page title because its spec. (Sometimes, Google Analytics will return another pageviews by same path.)",
            "in": "query",
            "name": "uniquePath",
            "schema": {
              "enum": [
                0,
                1
              ],
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "items": {
                      "description": "An array of Items for date resource.",
                      "items": {
                        "$ref": "#/components/schemas/statisticsdate"
                      },
                      "type": "array"
                    },
                    "totalResults": {
                      "description": "The total number of paths.",
                      "type": "integer"
                    },
                    "totals": {
                      "properties": {
                        "pageviews": {
                          "description": "The sum total of the pageviews in the specified period.",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Bad request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Invalid login"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Not Found"
          }
        },
        "security": [
          {
            "mtauth": []
          }
        ],
        "summary": "Retrieve pageviews count for each date from provider (e.g. Google Analytics)",
        "tags": [
          "Statistics"
        ]
      }
    },
    "/sites/{site_id}/stats/date/visits": {
      "get": {
        "description": "Retrieve visits count for each date from provider (e.g. Google Analytics).\n\nAuthorization is required.\n",
        "parameters": [
          {
            "in": "path",
            "name": "site_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "This is an required parameter. Start date of data. The format is \"YYYY-MM-DD\".",
            "in": "query",
            "name": "startDate",
            "required": true,
            "schema": {
              "format": "date",
              "type": "string"
            }
          },
          {
            "description": "This is an required parameter. End date of data. The format is \"YYYY-MM-DD\".",
            "in": "query",
            "name": "endDate",
            "required": true,
            "schema": {
              "format": "date",
              "type": "string"
            }
          },
          {
            "description": "This is an optional parameter. Maximum number of paths to retrieve. Default is 10.",
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "This is an optional parameter. 0-indexed offset. Default is 0.",
            "in": "query",
            "name": "offset",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "This is an optional parameter. The target path of data to retrieve. Default is the path of the current site.",
            "in": "query",
            "name": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "items": {
                      "description": "An array of Items for date resource.",
                      "items": {
                        "$ref": "#/components/schemas/statisticsdate"
                      },
                      "type": "array"
                    },
                    "totalResults": {
                      "description": "The total number of paths.",
                      "type": "integer"
                    },
                    "totals": {
                      "properties": {
                        "visits": {
                          "description": "The sum total of the pageviews in the specified period.",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Bad request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Invalid login"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Not Found"
          }
        },
        "security": [
          {
            "mtauth": []
          }
        ],
        "summary": "Retrieve visits count for each date from provider (e.g. Google Analytics)",
        "tags": [
          "Statistics"
        ]
      }
    },
    "/sites/{site_id}/stats/path/pageviews": {
      "get": {
        "description": "Retrieve pageviews count for each path from provider (e.g. Google Analytics).\n\nAuthorization is required.\n",
        "parameters": [
          {
            "in": "path",
            "name": "site_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "This is an required parameter. Start date of data. The format is \"YYYY-MM-DD\".",
            "in": "query",
            "name": "startDate",
            "required": true,
            "schema": {
              "format": "date",
              "type": "string"
            }
          },
          {
            "description": "This is an required parameter. End date of data. The format is \"YYYY-MM-DD\".",
            "in": "query",
            "name": "endDate",
            "required": true,
            "schema": {
              "format": "date",
              "type": "string"
            }
          },
          {
            "description": "This is an optional parameter. Maximum number of paths to retrieve. Default is 10.",
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "This is an optional parameter. 0-indexed offset. Default is 0.",
            "in": "query",
            "name": "offset",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "This is an optional parameter. The target path of data to retrieve. Default is the path of the current site.",
            "in": "query",
            "name": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "This is an optional parameter. If true is given, the MT can return total pageviews for each uniqueness paths. However, that data does not contain page title because its spec. (Sometimes, Google Analytics will return another pageviews by same path.)",
            "in": "query",
            "name": "uniquePath",
            "schema": {
              "enum": [
                0,
                1
              ],
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "items": {
                      "description": "An array of Items for path resource.",
                      "items": {
                        "$ref": "#/components/schemas/statisticspath"
                      },
                      "type": "array"
                    },
                    "totalResults": {
                      "description": "The total number of paths.",
                      "type": "integer"
                    },
                    "totals": {
                      "properties": {
                        "pageviews": {
                          "description": "The sum total of the pageviews in the specified period.",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Bad request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Invalid login"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Not Found"
          }
        },
        "security": [
          {
            "mtauth": []
          }
        ],
        "summary": "Retrieve pageviews count for each path from provider (e.g. Google Analytics)",
        "tags": [
          "Statistics"
        ]
      }
    },
    "/sites/{site_id}/stats/path/visits": {
      "get": {
        "description": "Retrieve visits count for each date from provider (e.g. Google Analytics).\n\nAuthorization is required.\n",
        "parameters": [
          {
            "in": "path",
            "name": "site_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "This is an required parameter. Start date of data. The format is \"YYYY-MM-DD\".",
            "in": "query",
            "name": "startDate",
            "required": true,
            "schema": {
              "format": "date",
              "type": "string"
            }
          },
          {
            "description": "This is an required parameter. End date of data. The format is \"YYYY-MM-DD\".",
            "in": "query",
            "name": "endDate",
            "required": true,
            "schema": {
              "format": "date",
              "type": "string"
            }
          },
          {
            "description": "This is an optional parameter. Maximum number of paths to retrieve. Default is 10.",
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "This is an optional parameter. 0-indexed offset. Default is 0.",
            "in": "query",
            "name": "offset",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "This is an optional parameter. The target path of data to retrieve. Default is the path of the current site.",
            "in": "query",
            "name": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "items": {
                      "description": "An array of Items for path resource.",
                      "items": {
                        "$ref": "#/components/schemas/statisticspath"
                      },
                      "type": "array"
                    },
                    "totalResults": {
                      "description": "The total number of paths.",
                      "type": "integer"
                    },
                    "totals": {
                      "properties": {
                        "visits": {
                          "description": "The sum total of the pageviews in the specified period.",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Bad request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Invalid login"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Not Found"
          }
        },
        "security": [
          {
            "mtauth": []
          }
        ],
        "summary": "Retrieve visits count for each path from provider (e.g. Google Analytics)",
        "tags": [
          "Statistics"
        ]
      }
    },
    "/sites/{site_id}/stats/provider": {
      "get": {
        "description": "Retrieve a current effective provider.\n\nAuthorization is required.\n",
        "parameters": [
          {
            "in": "path",
            "name": "site_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "id": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Bad request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Invalid login"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Not Found"
          }
        },
        "security": [
          {
            "mtauth": []
          }
        ],
        "summary": "Retrieve a current effective provider",
        "tags": [
          "Statistics"
        ]
      }
    },
    "/sites/{site_id}/tags": {
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "site_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "$ref": "#/components/parameters/tag_search"
          },
          {
            "$ref": "#/components/parameters/tag_searchFields"
          },
          {
            "$ref": "#/components/parameters/tag_limit"
          },
          {
            "$ref": "#/components/parameters/tag_offset"
          },
          {
            "$ref": "#/components/parameters/tag_sortBy"
          },
          {
            "$ref": "#/components/parameters/tag_sortOrder"
          },
          {
            "$ref": "#/components/parameters/tag_fields"
          },
          {
            "$ref": "#/components/parameters/tag_dateField"
          },
          {
            "$ref": "#/components/parameters/tag_dateFrom"
          },
          {
            "$ref": "#/components/parameters/tag_dateTo"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "items": {
                      "description": "An array of tag resource.",
                      "items": {
                        "$ref": "#/components/schemas/tag"
                      },
                      "type": "array"
                    },
                    "totalResults": {
                      "description": " The total number of tags.",
                      "type": "integer"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "No Errors."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Bad request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Invalid login"
          },
          "403": {
            "description": "Do not have permission to retrieve the list of tags."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Site not found."
          }
        },
        "summary": "Retrieve a list of tags that related with specific site",
        "tags": [
          "Tags"
        ]
      }
    },
    "/sites/{site_id}/tags/{tag_id}": {
      "delete": {
        "description": "\n#### Notes\n- This method accepts DELETE and POST with __method=DELETE.\n",
        "parameters": [
          {
            "in": "path",
            "name": "site_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "tag_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/tag"
                }
              }
            },
            "description": "No Errors."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Bad request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Invalid login"
          },
          "403": {
            "description": "Do not have permission to delete a tag."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Site or Tag not found."
          },
          "405": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Request method is not DELETE or POST with __method=DELETE"
          }
        },
        "security": [
          {
            "mtauth": []
          }
        ],
        "summary": "Delete an existing tag",
        "tags": [
          "Tags"
        ]
      },
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "site_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "tag_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "$ref": "#/components/parameters/tag_fields"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/tag"
                }
              }
            },
            "description": "No Errors."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Bad request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Invalid login"
          },
          "403": {
            "description": "Do not have permission to retrieve the requested tag."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Site or Tag not found."
          }
        },
        "summary": "Retrieve a single tag by its ID",
        "tags": [
          "Tags"
        ]
      },
      "put": {
        "description": "\n#### Notes\n- This method accepts PUT and POST with __method=PUT.\n",
        "parameters": [
          {
            "in": "path",
            "name": "site_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "tag_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "properties": {
                  "tag": {
                    "$ref": "#/components/schemas/tag_updatable"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/tag"
                }
              }
            },
            "description": "No Errors."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Bad request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Invalid login"
          },
          "403": {
            "description": "Do not have permission to rename a tag."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Site or Tag not found."
          },
          "405": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Request method is not PUT or POST with __method=PUT"
          }
        },
        "security": [
          {
            "mtauth": []
          }
        ],
        "summary": "Update an existing tag",
        "tags": [
          "Tags"
        ]
      }
    },
    "/sites/{site_id}/tags/{tag_id}/assets": {
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "site_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "tag_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "Input `MTAuth accessToken={accessToken}`",
            "in": "header",
            "name": "X-MT-Authorization",
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/asset_limit"
          },
          {
            "$ref": "#/components/parameters/asset_offset"
          },
          {
            "description": "The target asset class to retrieve. Supported values are image, audio, video, file and any values added by plugins. If you want to retrieve multiple classes, specify the values separated by commas.",
            "in": "query",
            "name": "class",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "#### file_name\n\nSort by the filename of each asset.\n\n#### created_by\n\nSort by the ID of user who created each asset.\n\n#### created_on\n\n(default) Sort by the created time of each asset.\n\n**Default**: created_on\n",
            "in": "query",
            "name": "sortBy",
            "schema": {
              "default": "created_on",
              "enum": [
                "file_name",
                "created_by",
                "created_on"
              ],
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/asset_sortOrder"
          },
          {
            "$ref": "#/components/parameters/asset_fields"
          },
          {
            "$ref": "#/components/parameters/asset_dateField"
          },
          {
            "$ref": "#/components/parameters/asset_dateFrom"
          },
          {
            "$ref": "#/components/parameters/asset_dateTo"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "items": {
                      "items": {
                        "$ref": "#/components/schemas/asset"
                      },
                      "type": "array"
                    },
                    "totalResults": {
                      "type": "integer"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "No Errors."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Bad request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Invalid login"
          },
          "403": {
            "description": "Do not have permission to retrieve the requested assets for site and tag."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Site or tag not found."
          }
        },
        "summary": "Retrieve assets that related with specified tag",
        "tags": [
          "Assets",
          "Tags"
        ]
      }
    },
    "/sites/{site_id}/tags/{tag_id}/entries": {
      "get": {
        "description": "- Authorization is required to include unpublished entries.\n\n#### Permissions\n\n- edit_entry\n  - to retrieve unpublished entry\n",
        "parameters": [
          {
            "in": "path",
            "name": "site_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "tag_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "Input `MTAuth accessToken={accessToken}`",
            "in": "header",
            "name": "X-MT-Authorization",
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/entry_search"
          },
          {
            "$ref": "#/components/parameters/entry_searchFields"
          },
          {
            "$ref": "#/components/parameters/entry_limit"
          },
          {
            "$ref": "#/components/parameters/entry_offset"
          },
          {
            "$ref": "#/components/parameters/entry_sortBy"
          },
          {
            "$ref": "#/components/parameters/entry_sortOrder"
          },
          {
            "$ref": "#/components/parameters/entry_fields"
          },
          {
            "$ref": "#/components/parameters/entry_includeIds"
          },
          {
            "$ref": "#/components/parameters/entry_excludeIds"
          },
          {
            "$ref": "#/components/parameters/entry_status"
          },
          {
            "$ref": "#/components/parameters/entry_maxComments"
          },
          {
            "$ref": "#/components/parameters/entry_maxTrackbacks"
          },
          {
            "$ref": "#/components/parameters/entry_no_text_filter"
          },
          {
            "$ref": "#/components/parameters/entry_dateField"
          },
          {
            "$ref": "#/components/parameters/entry_dateFrom"
          },
          {
            "$ref": "#/components/parameters/entry_dateTo"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "items": {
                      "description": "An array of Entries resource. ",
                      "items": {
                        "$ref": "#/components/schemas/entry"
                      },
                      "type": "array"
                    },
                    "totalResults": {
                      "description": " The total number of entries.",
                      "type": "integer"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Bad request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Invalid login"
          },
          "403": {
            "description": "Do not have permission to retrieve the requested entries for site and tag."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Site or Tag not found."
          }
        },
        "summary": "Retrieve a list of entries that related with specific tag",
        "tags": [
          "Entries",
          "Tags"
        ]
      }
    },
    "/sites/{site_id}/tags/{tag_id}/pages": {
      "get": {
        "description": "- Authorization is required to include unpublished pages.\n\n#### Permissions\n\n- manage_pages\n  - to retrieve unpublished page\n",
        "parameters": [
          {
            "in": "path",
            "name": "site_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "tag_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "Input `MTAuth accessToken={accessToken}`",
            "in": "header",
            "name": "X-MT-Authorization",
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/page_search"
          },
          {
            "$ref": "#/components/parameters/page_searchFields"
          },
          {
            "$ref": "#/components/parameters/page_limit"
          },
          {
            "$ref": "#/components/parameters/page_offset"
          },
          {
            "$ref": "#/components/parameters/page_sortBy"
          },
          {
            "$ref": "#/components/parameters/page_sortOrder"
          },
          {
            "$ref": "#/components/parameters/page_fields"
          },
          {
            "$ref": "#/components/parameters/page_includeIds"
          },
          {
            "$ref": "#/components/parameters/page_excludeIds"
          },
          {
            "$ref": "#/components/parameters/page_status"
          },
          {
            "$ref": "#/components/parameters/page_maxComments"
          },
          {
            "$ref": "#/components/parameters/page_maxTrackbacks"
          },
          {
            "$ref": "#/components/parameters/page_no_text_filter"
          },
          {
            "$ref": "#/components/parameters/page_dateField"
          },
          {
            "$ref": "#/components/parameters/page_dateFrom"
          },
          {
            "$ref": "#/components/parameters/page_dateTo"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "items": {
                      "description": "An array of page resource.",
                      "items": {
                        "$ref": "#/components/schemas/page"
                      },
                      "type": "array"
                    },
                    "totalResults": {
                      "description": " The total number of pages.",
                      "type": "integer"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "No Errors."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Bad request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Invalid login"
          },
          "403": {
            "description": "Do not have permission to retrieve the requested pages."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Site or Tag not found."
          }
        },
        "summary": "Retrieve a list of pages that related with specific tag.",
        "tags": [
          "Pages",
          "Tags"
        ]
      }
    },
    "/sites/{site_id}/templates": {
      "get": {
        "description": "- Authorization is required.\n\n#### Permissions\n\n- edit_templates\n",
        "parameters": [
          {
            "in": "path",
            "name": "site_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "$ref": "#/components/parameters/template_search"
          },
          {
            "$ref": "#/components/parameters/template_searchFields"
          },
          {
            "$ref": "#/components/parameters/template_limit"
          },
          {
            "$ref": "#/components/parameters/template_offset"
          },
          {
            "description": "#### id\n\nSort by the ID of each template.\n\n#### name\n\nSort by the name of each template.\n\n#### created_on\n\nSort by the created time of each template.\n\n#### modified_on\n\nSort by the modified time of each template.\n\n#### created_by\n\nSort by the ID of user who created each template.\n\n#### modified_by\n\nSort by the ID of user who modified each template.\n\n#### type\n\nSort by the type of each template.\n\n**Default**: name\n",
            "in": "query",
            "name": "sortBy",
            "schema": {
              "default": "name",
              "enum": [
                "id",
                "name",
                "created_on",
                "modified_on",
                "created_by",
                "modified_by",
                "type"
              ],
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/template_sortOrder"
          },
          {
            "$ref": "#/components/parameters/template_fields"
          },
          {
            "$ref": "#/components/parameters/template_includeIds"
          },
          {
            "$ref": "#/components/parameters/template_excludeIds"
          },
          {
            "description": "Filter by template type. The list should be separated by commas. (e.g. archive, custom, index, individual, page etc...)",
            "in": "query",
            "name": "type",
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/template_dateField"
          },
          {
            "$ref": "#/components/parameters/template_dateFrom"
          },
          {
            "$ref": "#/components/parameters/template_dateTo"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "items": {
                      "description": "An array of template resource.",
                      "items": {
                        "$ref": "#/components/schemas/template"
                      },
                      "type": "array"
                    },
                    "totalResults": {
                      "description": " The total number of templates.",
                      "type": "integer"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "No Errors."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Bad request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Invalid login"
          },
          "403": {
            "description": "Do not have permission to retrieve the list of templates."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Site not found."
          }
        },
        "security": [
          {
            "mtauth": []
          }
        ],
        "summary": "Retrieve a list of templates in the specified site",
        "tags": [
          "Templates"
        ]
      },
      "post": {
        "description": "- Authorization is required.\n\n#### Permissions\n\n- edit_templates\n",
        "parameters": [
          {
            "in": "path",
            "name": "site_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "properties": {
                  "template": {
                    "$ref": "#/components/schemas/template_updatable"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/template"
                }
              }
            },
            "description": "No Errors."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Bad request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Invalid login"
          },
          "403": {
            "description": "Do not have permission to create a template."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Site not found."
          }
        },
        "security": [
          {
            "mtauth": []
          }
        ],
        "summary": "Create a new template",
        "tags": [
          "Templates"
        ]
      }
    },
    "/sites/{site_id}/templates/preview": {
      "post": {
        "description": "- Authorization is required.\n- **This endpoint has been available since Movable Type 6.1.2.**\n- **type** parameter in the Templates resource is required.\n\n#### Permissions\n\n- edit_templates\n",
        "parameters": [
          {
            "in": "path",
            "name": "site_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "If specify \"1\", will be returned preview contents.",
            "in": "query",
            "name": "raw",
            "schema": {
              "default": 0,
              "enum": [
                0,
                1
              ],
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "properties": {
                  "template": {
                    "$ref": "#/components/schemas/template"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "preview": {
                      "type": "string"
                    },
                    "status": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "No Errors."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Bad request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Invalid login"
          },
          "403": {
            "description": "Do not have permission to get template preview."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Site not found"
          }
        },
        "security": [
          {
            "mtauth": []
          }
        ],
        "summary": "Make a preview for a template",
        "tags": [
          "Templates"
        ]
      }
    },
    "/sites/{site_id}/templates/{template_id}": {
      "delete": {
        "description": "- Authorization is required.\n\n#### Permissions\n\n- edit_templates\n\n#### Notes\n- This method accepts DELETE and POST with __method=DELETE.\n",
        "parameters": [
          {
            "in": "path",
            "name": "site_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "template_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/template"
                }
              }
            },
            "description": "No Errors."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Bad request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Invalid login"
          },
          "403": {
            "description": "Do not have permission to delete a template."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Site or Template not found."
          },
          "405": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Request method is not DELETE or POST with __method=DELETE"
          }
        },
        "security": [
          {
            "mtauth": []
          }
        ],
        "summary": "Delete a template",
        "tags": [
          "Templates"
        ]
      },
      "get": {
        "description": "- Authorization is required.\n\n#### Permissions\n\n- edit_templates\n",
        "parameters": [
          {
            "in": "path",
            "name": "site_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "template_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "$ref": "#/components/parameters/template_fields"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/template"
                }
              }
            },
            "description": "No Errors."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Bad request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Invalid login"
          },
          "403": {
            "description": "Do not have permission to retrieve the requested template."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Site or Template not found."
          }
        },
        "security": [
          {
            "mtauth": []
          }
        ],
        "summary": "Retrieve single template by its ID",
        "tags": [
          "Templates"
        ]
      },
      "put": {
        "description": "- Authorization is required.\n\n#### Permissions\n\n- edit_templates\n\n#### Notes\n- This method accepts PUT and POST with __method=PUT.\n",
        "parameters": [
          {
            "in": "path",
            "name": "site_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "template_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "properties": {
                  "template": {
                    "$ref": "#/components/schemas/template_updatable"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/template"
                }
              }
            },
            "description": "No Errors."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Bad request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Invalid login"
          },
          "403": {
            "description": "Do not have permission to update a template."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Site or Template not found."
          },
          "405": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Request method is not PUT or POST with __method=PUT"
          }
        },
        "security": [
          {
            "mtauth": []
          }
        ],
        "summary": "Update a template",
        "tags": [
          "Templates"
        ]
      }
    },
    "/sites/{site_id}/templates/{template_id}/clone": {
      "post": {
        "description": "- Authorization is required.\n\n#### Permissions\n\n- edit_templates\n",
        "parameters": [
          {
            "in": "path",
            "name": "site_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "template_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "status": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "No Errors."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Bad request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Invalid login"
          },
          "403": {
            "description": "Do not have permission to clone a template."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Site or Template not found"
          }
        },
        "security": [
          {
            "mtauth": []
          }
        ],
        "summary": "Make a clone of a template",
        "tags": [
          "Templates"
        ]
      }
    },
    "/sites/{site_id}/templates/{template_id}/preview": {
      "post": {
        "description": "- Authorization is required.\n- **This endpoint has been available since Movable Type 6.1.2.**\n- Only available for following templates\n  - index\n  - archive\n  - individual\n  - page\n  - category\n  - **template** parameter is required. If you just want to get preview template from existing data, you should provide **template** parameter with empty json.\n\n#### Permissions\n\n- edit_templates\n",
        "parameters": [
          {
            "in": "path",
            "name": "site_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "template_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "If specify \"1\", will be returned preview contents.",
            "in": "query",
            "name": "raw",
            "schema": {
              "default": 0,
              "enum": [
                0,
                1
              ],
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "properties": {
                  "template": {
                    "$ref": "#/components/schemas/template"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "preview": {
                      "type": "string"
                    },
                    "status": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "No Errors."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Bad request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Invalid login"
          },
          "403": {
            "description": "Do not have permission to get template preview."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Site or Template not found"
          }
        },
        "security": [
          {
            "mtauth": []
          }
        ],
        "summary": "Make a preview for a template with existing data",
        "tags": [
          "Templates"
        ]
      }
    },
    "/sites/{site_id}/templates/{template_id}/publish": {
      "post": {
        "description": "- Authorization is required.\n- Only available for following templates\n  - index\n  - archive\n  - individual\n  - page\n  - category\n\n#### Permissions\n\n- rebuild\n",
        "parameters": [
          {
            "in": "path",
            "name": "site_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "template_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "status": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "No Errors."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Bad request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Invalid login"
          },
          "403": {
            "description": "Do not have permission to publish a template."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Site or Template not found"
          }
        },
        "security": [
          {
            "mtauth": []
          }
        ],
        "summary": "Publish a template",
        "tags": [
          "Templates"
        ]
      }
    },
    "/sites/{site_id}/templates/{template_id}/refresh": {
      "post": {
        "description": "- Authorization is required.\n\n#### Permissions\n\n- edit_templates\n",
        "parameters": [
          {
            "in": "path",
            "name": "site_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "template_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "messages": {
                      "items": {
                        "type": "string"
                      },
                      "type": "array"
                    },
                    "status": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "No Errors."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Bad request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Invalid login"
          },
          "403": {
            "description": "Do not have permission to refresh a template."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Site or Template not found"
          }
        },
        "security": [
          {
            "mtauth": []
          }
        ],
        "summary": "Reset template text to theme default or tempalte_set default",
        "tags": [
          "Templates"
        ]
      }
    },
    "/sites/{site_id}/templates/{template_id}/templatemaps": {
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "site_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "template_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "$ref": "#/components/parameters/templatemap_search"
          },
          {
            "$ref": "#/components/parameters/templatemap_searchFields"
          },
          {
            "$ref": "#/components/parameters/templatemap_limit"
          },
          {
            "$ref": "#/components/parameters/templatemap_offset"
          },
          {
            "$ref": "#/components/parameters/templatemap_sortBy"
          },
          {
            "$ref": "#/components/parameters/templatemap_sortOrder"
          },
          {
            "$ref": "#/components/parameters/templatemap_fields"
          },
          {
            "$ref": "#/components/parameters/templatemap_includeIds"
          },
          {
            "$ref": "#/components/parameters/templatemap_excludeIds"
          },
          {
            "$ref": "#/components/parameters/templatemap_dateField"
          },
          {
            "$ref": "#/components/parameters/templatemap_dateFrom"
          },
          {
            "$ref": "#/components/parameters/templatemap_dateTo"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "items": {
                      "description": "An array of templatemap resource.",
                      "items": {
                        "$ref": "#/components/schemas/templatemap"
                      },
                      "type": "array"
                    },
                    "totalResults": {
                      "description": " The total number of templatemaps.",
                      "type": "integer"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "No Errors."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Bad request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Invalid login"
          },
          "403": {
            "description": "Do not have permission to retrieve the list of templatemaps."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Site or Template not found."
          }
        },
        "security": [
          {
            "mtauth": []
          }
        ],
        "summary": "Retrieve a list of templatemaps in the specified site",
        "tags": [
          "Templates",
          "TemplateMaps"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "path",
            "name": "site_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "template_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "properties": {
                  "templatemap": {
                    "$ref": "#/components/schemas/templatemap_updatable"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/templatemap"
                }
              }
            },
            "description": "No Errors."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Bad request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Invalid login"
          },
          "403": {
            "description": "Do not have permission to create a templatemap."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Site or Template not found."
          }
        },
        "security": [
          {
            "mtauth": []
          }
        ],
        "summary": "Create a new templatemap",
        "tags": [
          "Templates",
          "TemplateMaps"
        ]
      }
    },
    "/sites/{site_id}/templates/{template_id}/templatemaps/{templatemap_id}": {
      "delete": {
        "description": "\n#### Notes\n- This method accepts DELETE and POST with __method=DELETE.\n",
        "parameters": [
          {
            "in": "path",
            "name": "site_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "template_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "templatemap_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/templatemap"
                }
              }
            },
            "description": "No Errors."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Bad request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Invalid login"
          },
          "403": {
            "description": "Do not have permission to delete a templatemap."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Site or Template or TemplateMap not found."
          },
          "405": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Request method is not DELETE or POST with __method=DELETE"
          }
        },
        "security": [
          {
            "mtauth": []
          }
        ],
        "summary": "Delete an existing templatemap",
        "tags": [
          "Templates",
          "TemplateMaps"
        ]
      },
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "site_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "template_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "templatemap_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/templatemap"
                }
              }
            },
            "description": "No Errors."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Bad request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Invalid login"
          },
          "403": {
            "description": "Do not have permission to retrieve the requested templatemap."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Site or Template or TemplateMap not found."
          }
        },
        "security": [
          {
            "mtauth": []
          }
        ],
        "summary": "Retrieve a single templatemap by its ID",
        "tags": [
          "Templates",
          "TemplateMaps"
        ]
      },
      "put": {
        "description": "\n#### Notes\n- This method accepts PUT and POST with __method=PUT.\n",
        "parameters": [
          {
            "in": "path",
            "name": "site_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "template_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "templatemap_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "properties": {
                  "templatemap": {
                    "$ref": "#/components/schemas/templatemap_updatable"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/templatemap"
                }
              }
            },
            "description": "No Errors."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Bad request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Invalid login"
          },
          "403": {
            "description": "Do not have permission to update a templatemap."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Site or Template or TemplateMap not found."
          },
          "405": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Request method is not PUT or POST with __method=PUT"
          }
        },
        "security": [
          {
            "mtauth": []
          }
        ],
        "summary": "Update an existing templatemap",
        "tags": [
          "Templates",
          "TemplateMaps"
        ]
      }
    },
    "/sites/{site_id}/themes": {
      "get": {
        "description": "- Authentication is required\n\n#### Permissions\n\n- manage_themes\n",
        "parameters": [
          {
            "in": "path",
            "name": "site_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "items": {
                      "description": "An array of theme resource.",
                      "items": {
                        "$ref": "#/components/schemas/theme"
                      },
                      "type": "array"
                    },
                    "totalResults": {
                      "description": " The total number of themes.",
                      "type": "integer"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "No Errors."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Bad request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Invalid login"
          },
          "403": {
            "description": "Do not have permission to retrieve the requested site's themes."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Site not found."
          }
        },
        "security": [
          {
            "mtauth": []
          }
        ],
        "summary": "Retrieve a list of themes for site",
        "tags": [
          "Themes"
        ]
      }
    },
    "/sites/{site_id}/themes/{theme_id}": {
      "get": {
        "description": "- Authentication is required\n\n#### Permissions\n\n- manage_themes\n",
        "parameters": [
          {
            "in": "path",
            "name": "site_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "theme_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/theme"
                }
              }
            },
            "description": "No Errors."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Bad request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Invalid login"
          },
          "403": {
            "description": "Do not have permission to retrieve the requested site's theme."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Site or Theme not found."
          }
        },
        "security": [
          {
            "mtauth": []
          }
        ],
        "summary": "Retrieve a single theme by its ID for site",
        "tags": [
          "Themes"
        ]
      }
    },
    "/sites/{site_id}/themes/{theme_id}/apply": {
      "post": {
        "description": "- Authentication is required\n\n#### Permissions\n\n- manage_themes\n",
        "parameters": [
          {
            "in": "path",
            "name": "site_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "theme_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "status": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "No Errors."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Bad request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Invalid login"
          },
          "403": {
            "description": "Do not have permission to apply the requested theme to site."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Site or Theme not found"
          }
        },
        "security": [
          {
            "mtauth": []
          }
        ],
        "summary": "Apply a theme to site",
        "tags": [
          "Themes"
        ]
      }
    },
    "/sites/{site_id}/trackbacks": {
      "get": {
        "description": "Retrieve a list of trackbacks.\n\nAuthorization is required to include unpublished trackbacks\n",
        "parameters": [
          {
            "in": "path",
            "name": "site_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "Input `MTAuth accessToken={accessToken}`",
            "in": "header",
            "name": "X-MT-Authorization",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "This is an optional parameter. Maximum number of trackbacks to retrieve. Default is 10.",
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "This is an optional parameter. 0-indexed offset. Default is 0.",
            "in": "query",
            "name": "offset",
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "This is an optional parameter. The comma separated ID list of trackbacks to include to result.",
            "in": "query",
            "name": "includeIds",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "This is an optional parameter. The comma separated ID list of trackbacks to exclude from result.",
            "in": "query",
            "name": "excludeIds",
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/trackback_dateField"
          },
          {
            "$ref": "#/components/parameters/trackback_dateFrom"
          },
          {
            "$ref": "#/components/parameters/trackback_dateTo"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "items": {
                      "description": "An array of trakcbacks resource. The list will sorted from oldest to newest by received date.",
                      "items": {
                        "$ref": "#/components/schemas/trackback"
                      },
                      "type": "array"
                    },
                    "totalResults": {
                      "description": "The total number of trackbacks found.",
                      "type": "integer"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Bad request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Invalid login"
          },
          "403": {
            "description": "Do not have permission to retrieve the list of trackbacks."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Not Found"
          }
        },
        "summary": "Retrieve a list of trackbacks",
        "tags": [
          "Trackbacks"
        ]
      }
    },
    "/sites/{site_id}/trackbacks/{ping_id}": {
      "delete": {
        "description": "Delete a trackbacks.\n\nAuthorization is required.\n\n#### Notes\n- This method accepts DELETE and POST with __method=DELETE.\n",
        "parameters": [
          {
            "in": "path",
            "name": "site_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "ping_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/trackback"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Bad request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Invalid login"
          },
          "403": {
            "description": "Do not have permission to delete a trackback."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Not Found"
          },
          "405": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Request method is not DELETE or POST with __method=DELETE"
          }
        },
        "security": [
          {
            "mtauth": []
          }
        ],
        "summary": "Delete a trackbacks",
        "tags": [
          "Trackbacks"
        ]
      },
      "get": {
        "description": "Retrieve a single trackback by its ID.\n\nAuthorization is required if the trackback status is \"unpublished\". If the trackback status is \"published\", then this method can be called without authorization.\n",
        "parameters": [
          {
            "in": "path",
            "name": "site_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "ping_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "Input `MTAuth accessToken={accessToken}`",
            "in": "header",
            "name": "X-MT-Authorization",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/trackback"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Bad request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Invalid login"
          },
          "403": {
            "description": "Do not have permission to retrieve the requested trackback."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Not Found"
          }
        },
        "summary": "Retrieve a single trackback by its ID",
        "tags": [
          "Trackbacks"
        ]
      },
      "put": {
        "description": "Update a trackbacks.\n\nAuthorization is required.\n\n#### Notes\n- This method accepts PUT and POST with __method=PUT.\n",
        "parameters": [
          {
            "in": "path",
            "name": "site_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "ping_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "properties": {
                  "trackback": {
                    "$ref": "#/components/schemas/trackback_updatable"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/trackback"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Bad request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Invalid login"
          },
          "403": {
            "description": "Do not have permission to update a trackback."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Not Found"
          },
          "405": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Request method is not PUT or POST with __method=PUT"
          }
        },
        "security": [
          {
            "mtauth": []
          }
        ],
        "summary": "Update a trackbacks",
        "tags": [
          "Trackbacks"
        ]
      }
    },
    "/sites/{site_id}/widgets": {
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "site_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "$ref": "#/components/parameters/widget_search"
          },
          {
            "$ref": "#/components/parameters/widget_searchFields"
          },
          {
            "$ref": "#/components/parameters/widget_limit"
          },
          {
            "$ref": "#/components/parameters/widget_offset"
          },
          {
            "$ref": "#/components/parameters/widget_sortBy"
          },
          {
            "$ref": "#/components/parameters/widget_sortOrder"
          },
          {
            "$ref": "#/components/parameters/widget_fields"
          },
          {
            "$ref": "#/components/parameters/widget_includeIds"
          },
          {
            "$ref": "#/components/parameters/widget_excludeIds"
          },
          {
            "$ref": "#/components/parameters/widget_dateField"
          },
          {
            "$ref": "#/components/parameters/widget_dateFrom"
          },
          {
            "$ref": "#/components/parameters/widget_dateTo"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "items": {
                      "description": "An array of widget resource.",
                      "items": {
                        "$ref": "#/components/schemas/template"
                      },
                      "type": "array"
                    },
                    "totalResults": {
                      "description": " The total number of widgets.",
                      "type": "integer"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "No Errors."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Bad request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Invalid login"
          },
          "403": {
            "description": "Do not have permission to retrieve the list of widgets."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Site not found."
          }
        },
        "security": [
          {
            "mtauth": []
          }
        ],
        "summary": "Retrieve a list of widgets in the specified site",
        "tags": [
          "Widgets"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "path",
            "name": "site_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "properties": {
                  "widget": {
                    "$ref": "#/components/schemas/template_updatable"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/template"
                }
              }
            },
            "description": "No Errors."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Bad request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Invalid login"
          },
          "403": {
            "description": "Do not have permission to create a widget."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Site not found."
          }
        },
        "security": [
          {
            "mtauth": []
          }
        ],
        "summary": "Create a new widget",
        "tags": [
          "Widgets"
        ]
      }
    },
    "/sites/{site_id}/widgets/{widget_id}": {
      "delete": {
        "description": "\n#### Notes\n- This method accepts DELETE and POST with __method=DELETE.\n",
        "parameters": [
          {
            "in": "path",
            "name": "site_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "widget_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/template"
                }
              }
            },
            "description": "No Errors."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Bad request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Invalid login"
          },
          "403": {
            "description": "Do not have permission to delete a widget."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Site or Widget not found."
          },
          "405": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Request method is not DELETE or POST with __method=DELETE"
          }
        },
        "security": [
          {
            "mtauth": []
          }
        ],
        "summary": "Delete a widget",
        "tags": [
          "Widgets"
        ]
      },
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "site_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "widget_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "$ref": "#/components/parameters/widget_fields"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/template"
                }
              }
            },
            "description": "No Errors."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Bad request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Invalid login"
          },
          "403": {
            "description": "Do not have permission to retrieve the requested widget."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Site or Widget not found."
          }
        },
        "security": [
          {
            "mtauth": []
          }
        ],
        "summary": "Retrieve a single widget by its ID",
        "tags": [
          "Widgets"
        ]
      },
      "put": {
        "description": "\n#### Notes\n- This method accepts PUT and POST with __method=PUT.\n",
        "parameters": [
          {
            "in": "path",
            "name": "site_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "widget_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "properties": {
                  "widget": {
                    "$ref": "#/components/schemas/template_updatable"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/template"
                }
              }
            },
            "description": "No Errors."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Bad request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Invalid login"
          },
          "403": {
            "description": "Do not have permission to update a widget."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Site or Widget not found."
          },
          "405": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Request method is not PUT or POST with __method=PUT"
          }
        },
        "security": [
          {
            "mtauth": []
          }
        ],
        "summary": "Update a widget",
        "tags": [
          "Widgets"
        ]
      }
    },
    "/sites/{site_id}/widgets/{widget_id}/clone": {
      "post": {
        "parameters": [
          {
            "in": "path",
            "name": "site_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "widget_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "status": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "No Errors."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Bad request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Invalid login"
          },
          "403": {
            "description": "Do not have permission to clone a widget."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Site or Widget not found"
          }
        },
        "security": [
          {
            "mtauth": []
          }
        ],
        "summary": "Make a clone of a widget",
        "tags": [
          "Widgets"
        ]
      }
    },
    "/sites/{site_id}/widgets/{widget_id}/refresh": {
      "post": {
        "parameters": [
          {
            "in": "path",
            "name": "site_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "widget_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "messages": {
                      "items": {
                        "type": "string"
                      },
                      "type": "array"
                    },
                    "status": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "No Errors."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Bad request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Invalid login"
          },
          "403": {
            "description": "Do not have permission to refresh a widget."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Site or Widget not found"
          }
        },
        "security": [
          {
            "mtauth": []
          }
        ],
        "summary": "Reset widget text to default",
        "tags": [
          "Widgets"
        ]
      }
    },
    "/sites/{site_id}/widgetsets": {
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "site_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "$ref": "#/components/parameters/widgetset_search"
          },
          {
            "$ref": "#/components/parameters/widgetset_searchFields"
          },
          {
            "$ref": "#/components/parameters/widgetset_limit"
          },
          {
            "$ref": "#/components/parameters/widgetset_offset"
          },
          {
            "$ref": "#/components/parameters/widgetset_sortBy"
          },
          {
            "$ref": "#/components/parameters/widgetset_sortOrder"
          },
          {
            "$ref": "#/components/parameters/widgetset_fields"
          },
          {
            "$ref": "#/components/parameters/widgetset_includeIds"
          },
          {
            "$ref": "#/components/parameters/widgetset_excludeIds"
          },
          {
            "$ref": "#/components/parameters/widgetset_dateField"
          },
          {
            "$ref": "#/components/parameters/widgetset_dateFrom"
          },
          {
            "$ref": "#/components/parameters/widgetset_dateTo"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "items": {
                      "description": "An array of widgetset resource.",
                      "items": {
                        "$ref": "#/components/schemas/template"
                      },
                      "type": "array"
                    },
                    "totalResults": {
                      "description": " The total number of widgetsets.",
                      "type": "integer"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "No Errors."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Bad request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Invalid login"
          },
          "403": {
            "description": "Do not have permission to retrieve the list of widgetsets."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Site not found."
          }
        },
        "security": [
          {
            "mtauth": []
          }
        ],
        "summary": "Retrieve a list of widgetsets in the specified site",
        "tags": [
          "WidgetSets"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "path",
            "name": "site_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "properties": {
                  "widgetset": {
                    "$ref": "#/components/schemas/template_updatable"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/template"
                }
              }
            },
            "description": "No Errors."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Bad request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Invalid login"
          },
          "403": {
            "description": "Do not have permission to create a widgetset."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Site not found."
          }
        },
        "security": [
          {
            "mtauth": []
          }
        ],
        "summary": "Create a new widgetset",
        "tags": [
          "WidgetSets"
        ]
      }
    },
    "/sites/{site_id}/widgetsets/{widgetset_id}": {
      "delete": {
        "description": "\n#### Notes\n- This method accepts DELETE and POST with __method=DELETE.\n",
        "parameters": [
          {
            "in": "path",
            "name": "site_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "widgetset_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/template"
                }
              }
            },
            "description": "No Errors."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Bad request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Invalid login"
          },
          "403": {
            "description": "Do not have permission to delete a widgetset."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Site or WidgetSet not found."
          },
          "405": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Request method is not DELETE or POST with __method=DELETE"
          }
        },
        "security": [
          {
            "mtauth": []
          }
        ],
        "summary": "Delete an existing widgetset",
        "tags": [
          "WidgetSets"
        ]
      },
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "site_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "widgetset_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "$ref": "#/components/parameters/widgetset_fields"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/template"
                }
              }
            },
            "description": "No Errors."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Bad request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Invalid login"
          },
          "403": {
            "description": "Do not have permission to retrieve the requested widgetset."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Site or WidgetSet not found."
          }
        },
        "security": [
          {
            "mtauth": []
          }
        ],
        "summary": "Retrieve a single widgetset by its ID",
        "tags": [
          "WidgetSets"
        ]
      },
      "put": {
        "description": "\n#### Notes\n- This method accepts PUT and POST with __method=PUT.\n",
        "parameters": [
          {
            "in": "path",
            "name": "site_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "widgetset_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "properties": {
                  "widgetset": {
                    "$ref": "#/components/schemas/template_updatable"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/template"
                }
              }
            },
            "description": "No Errors."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Bad request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Invalid login"
          },
          "403": {
            "description": "Do not have permission to update a widgetset."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Site or WidgetSet not found."
          },
          "405": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Request method is not PUT or POST with __method=PUT"
          }
        },
        "security": [
          {
            "mtauth": []
          }
        ],
        "summary": "Update an existing widgetset",
        "tags": [
          "WidgetSets"
        ]
      }
    },
    "/sites/{site_id}/widgetsets/{widgetset_id}/widgets": {
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "site_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "widgetset_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "$ref": "#/components/parameters/widget_search"
          },
          {
            "$ref": "#/components/parameters/widget_searchFields"
          },
          {
            "$ref": "#/components/parameters/widget_limit"
          },
          {
            "$ref": "#/components/parameters/widget_offset"
          },
          {
            "$ref": "#/components/parameters/widget_sortBy"
          },
          {
            "$ref": "#/components/parameters/widget_sortOrder"
          },
          {
            "$ref": "#/components/parameters/widget_fields"
          },
          {
            "$ref": "#/components/parameters/widget_includeIds"
          },
          {
            "$ref": "#/components/parameters/widget_excludeIds"
          },
          {
            "$ref": "#/components/parameters/widget_dateField"
          },
          {
            "$ref": "#/components/parameters/widget_dateFrom"
          },
          {
            "$ref": "#/components/parameters/widget_dateTo"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "items": {
                      "description": "An array of widget resource.",
                      "items": {
                        "$ref": "#/components/schemas/template"
                      },
                      "type": "array"
                    },
                    "totalResults": {
                      "description": " The total number of widgets.",
                      "type": "integer"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "No Errors."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Bad request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Invalid login"
          },
          "403": {
            "description": "Do not have permission to retrieve widgets of the request widgetset."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Site or WidgetSet not found."
          }
        },
        "security": [
          {
            "mtauth": []
          }
        ],
        "summary": "Retrieve a list of widgets in the specified widgetset",
        "tags": [
          "Widgets",
          "WidgetSets"
        ]
      }
    },
    "/sites/{site_id}/widgetsets/{widgetset_id}/widgets/{widget_id}": {
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "site_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "widgetset_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "widget_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "$ref": "#/components/parameters/widget_fields"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/template"
                }
              }
            },
            "description": "No Errors."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Bad request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Invalid login"
          },
          "403": {
            "description": "Do not have permission to retrieve a widget of the request widgetset."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Site or Widget not found."
          }
        },
        "security": [
          {
            "mtauth": []
          }
        ],
        "summary": "Retrieve a single widget by widgetset ID",
        "tags": [
          "Widgets",
          "WidgetSets"
        ]
      }
    },
    "/textFilters": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "items": {
                      "description": "An array of text filters.",
                      "items": {
                        "properties": {
                          "key": {
                            "description": "The key name of the text filter",
                            "type": "string"
                          },
                          "label": {
                            "description": "The display name of the text filter",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "totalResults": {
                      "description": " The total number of text filters.",
                      "type": "integer"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Bad request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Invalid login"
          }
        },
        "summary": "Retrieve a list of text filters",
        "tags": [
          "System"
        ]
      }
    },
    "/themes": {
      "get": {
        "description": "- Authentication is required\n\n#### Permissions\n\n- manage_themes\n",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "items": {
                      "description": "An array of theme resource.",
                      "items": {
                        "$ref": "#/components/schemas/theme"
                      },
                      "type": "array"
                    },
                    "totalResults": {
                      "description": " The total number of themes.",
                      "type": "integer"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "No Errors."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Bad request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Invalid login"
          },
          "403": {
            "description": "Do not have permission to retrieve the requested themes."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Site not found."
          }
        },
        "security": [
          {
            "mtauth": []
          }
        ],
        "summary": "Retrieve a list of themes",
        "tags": [
          "Themes"
        ]
      }
    },
    "/themes/{theme_id}": {
      "delete": {
        "description": "- Authentication is required\n- When successful, you can take Themes Resource that was deleted. However, this theme is already removed from the Movable Type. You cannot apply this theme to.\n\n#### Permissions\n\n- manage_themes\n\n#### Notes\n- This method accepts DELETE and POST with __method=DELETE.\n",
        "parameters": [
          {
            "in": "path",
            "name": "theme_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/theme"
                }
              }
            },
            "description": "No Errors."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Bad request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Invalid login"
          },
          "403": {
            "description": "Do not have permission to uninstall the requested theme."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Site or Theme not found."
          },
          "405": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Request method is not DELETE or POST with __method=DELETE"
          }
        },
        "security": [
          {
            "mtauth": []
          }
        ],
        "summary": "Uninstall a specified theme from the MT",
        "tags": [
          "Themes"
        ]
      },
      "get": {
        "description": "- Authentication is required\n\n#### Permissions\n\n- manage_themes\n",
        "parameters": [
          {
            "in": "path",
            "name": "theme_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/theme"
                }
              }
            },
            "description": "No Errors."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Bad request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Invalid login"
          },
          "403": {
            "description": "Do not have permission to retrieve the requested theme."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Site or Theme not found."
          }
        },
        "security": [
          {
            "mtauth": []
          }
        ],
        "summary": "Retrieve a single theme by its ID",
        "tags": [
          "Themes"
        ]
      }
    },
    "/token": {
      "delete": {
        "description": "Invalidate current access token. This is not logout. If the browser has active session id, new access token can be obtained easily.\n\nAuthorization is required.\n\n#### Notes\n- This method accepts DELETE and POST with __method=DELETE.\n",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "status": {
                      "description": "The value of this parameter is always \"success\".",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Bad request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Invalid login"
          },
          "405": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Request method is not DELETE or POST with __method=DELETE"
          }
        },
        "security": [
          {
            "mtauth": []
          }
        ],
        "summary": "Invalidate current session. This is like logout",
        "tags": [
          "Authentication"
        ]
      },
      "post": {
        "description": "Create new access token related to current session.\n\nIn order to create new access token, in the case of a web browser, it is necessary to create session via authentication endpoints beforehand.\n\nIn the case of other than a browser, it is necessary to send a sessionId that is retrieved via authentication endpoints in MTAuth request header.\n\n`MTAuth sessionId={retrieved sessionId}`\n",
        "parameters": [
          {
            "description": "Input `MTAuth sessionId={sessionId}`",
            "in": "header",
            "name": "X-MT-Authorization",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "properties": {
                  "clientId": {
                    "description": "This is not required if you specify session id via \"X-MT-Authorization\" request header. You can create new access token if you have a session id related to this clientId, although you do not have an access token. ",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "accessToken": {
                      "description": "Access token",
                      "type": "string"
                    },
                    "expiresIn": {
                      "description": "This access token will be invalidated automatically after the number of seconds specified here.",
                      "type": "integer"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Bad request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Invalid login"
          }
        },
        "summary": "Create new access token related to current session",
        "tags": [
          "Authentication"
        ]
      }
    },
    "/users": {
      "get": {
        "description": "- Authentication is required to include non-active users or to get private properties.\n\n#### Permissions\n\n- administer\n  - to retrieve non-active users\n  - to read private properties\n",
        "parameters": [
          {
            "description": "Input `MTAuth accessToken={accessToken}`",
            "in": "header",
            "name": "X-MT-Authorization",
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/user_search"
          },
          {
            "$ref": "#/components/parameters/user_searchFields"
          },
          {
            "$ref": "#/components/parameters/user_limit"
          },
          {
            "$ref": "#/components/parameters/user_offset"
          },
          {
            "description": "The field name for sort. You can specify one of following values\n- id\n- name\n\n**Default**: name\n",
            "in": "query",
            "name": "sortBy",
            "schema": {
              "default": "name",
              "enum": [
                "id",
                "name"
              ],
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/user_sortOrder"
          },
          {
            "$ref": "#/components/parameters/user_fields"
          },
          {
            "$ref": "#/components/parameters/user_includeIds"
          },
          {
            "$ref": "#/components/parameters/user_excludeIds"
          },
          {
            "description": "Filter by users's status.\n\n#### active\n\nstatus is Active\n\n#### disabled\n\nstatus is Disabled.\n\n#### pending\n\nstatus is Pending\n",
            "in": "query",
            "name": "status",
            "schema": {
              "enum": [
                "active",
                "disabled",
                "pending"
              ],
              "type": "string"
            }
          },
          {
            "description": "Filter by user's lockout status.\n\n#### locked_out\n\nLocked out user only\n\n#### not_locked_out\n\nNot locked out user only\n",
            "in": "query",
            "name": "lockout",
            "schema": {
              "enum": [
                "locked_out",
                "not_locked_out"
              ],
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/user_dateField"
          },
          {
            "$ref": "#/components/parameters/user_dateFrom"
          },
          {
            "$ref": "#/components/parameters/user_dateTo"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "items": {
                      "description": "An array of user resource.",
                      "items": {
                        "$ref": "#/components/schemas/user"
                      },
                      "type": "array"
                    },
                    "totalResults": {
                      "description": " The total number of users.",
                      "type": "integer"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "No Errors."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Bad request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Invalid login"
          },
          "403": {
            "description": "Do not have permission to retrieve the requested users."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Site not found."
          }
        },
        "summary": "Retrieve a list of users in the specified site",
        "tags": [
          "Users"
        ]
      },
      "post": {
        "description": "- Authentication is required.\n\n#### Permissions\n\n- administer\n",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "properties": {
                  "user": {
                    "$ref": "#/components/schemas/user_updatable"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/user"
                }
              }
            },
            "description": "No Errors."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Bad request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Invalid login"
          },
          "403": {
            "description": "Do not have permission to create a user."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Site not found."
          }
        },
        "security": [
          {
            "mtauth": []
          }
        ],
        "summary": "Create a new user",
        "tags": [
          "Users"
        ]
      }
    },
    "/users/export": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "text/csv": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "CSV Format"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Bad request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Invalid login"
          },
          "403": {
            "description": "Do not have permission to export users."
          }
        },
        "security": [
          {
            "mtauth": []
          }
        ],
        "summary": "Export users",
        "tags": [
          "Users"
        ]
      }
    },
    "/users/import": {
      "post": {
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "properties": {
                  "file": {
                    "format": "binary",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "messages": {
                      "items": {
                        "type": "string"
                      },
                      "type": "array"
                    },
                    "result": {
                      "type": "string"
                    },
                    "status": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Executed successfully"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Bad request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Invalid login"
          },
          "403": {
            "description": "Do not have permission to import users."
          }
        },
        "security": [
          {
            "mtauth": []
          }
        ],
        "summary": "Import users",
        "tags": [
          "Users"
        ]
      }
    },
    "/users/synchronize": {
      "post": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "status": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "No Errors."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Bad request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Invalid login"
          },
          "403": {
            "description": "Do not have permission to synchronize users."
          }
        },
        "security": [
          {
            "mtauth": []
          }
        ],
        "summary": "Synchronize users",
        "tags": [
          "Users"
        ]
      }
    },
    "/users/{user_id}": {
      "delete": {
        "description": "- Authentication is required.\n- Cannot delete oneself. Also, cannot delete system administrator user.\n\n#### Permissions\n\n- administer\n\n#### Notes\n- This method accepts DELETE and POST with __method=DELETE.\n",
        "parameters": [
          {
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/user"
                }
              }
            },
            "description": "No Errors."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Bad request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Invalid login"
          },
          "403": {
            "description": "Do not have permission to delete a user."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Site or User not found."
          },
          "405": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Request method is not DELETE or POST with __method=DELETE"
          }
        },
        "security": [
          {
            "mtauth": []
          }
        ],
        "summary": "Delete user",
        "tags": [
          "Users"
        ]
      },
      "get": {
        "description": "Retrieve a single user by its ID.\n\nAuthorization is required if you want to retrieve private properties.\n",
        "parameters": [
          {
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Input `MTAuth accessToken={accessToken}`",
            "in": "header",
            "name": "X-MT-Authorization",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "This is an optional parameter. The field list to retrieve as part of the Users resource. This list should be separated by comma. If this parameter is not specified, All fields will be returned.",
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/user"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Bad request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Invalid login"
          },
          "403": {
            "description": "Do not have permission to retrieve the requested user."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Not Found"
          }
        },
        "summary": "Retrieve a single user by its ID",
        "tags": [
          "Users"
        ]
      },
      "put": {
        "description": "Update user data.\n\nAuthorization is required.\n\n#### Notes\n- This method accepts PUT and POST with __method=PUT.\n",
        "parameters": [
          {
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "properties": {
                  "user": {
                    "$ref": "#/components/schemas/user_updatable"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/user"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Bad request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Invalid login"
          },
          "403": {
            "description": "Do not have permission to update the requested user."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Not Found"
          },
          "405": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Request method is not PUT or POST with __method=PUT"
          }
        },
        "security": [
          {
            "mtauth": []
          }
        ],
        "summary": "Update user data",
        "tags": [
          "Users"
        ]
      }
    },
    "/users/{user_id}/groups": {
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/group_search"
          },
          {
            "$ref": "#/components/parameters/group_searchFields"
          },
          {
            "$ref": "#/components/parameters/group_limit"
          },
          {
            "$ref": "#/components/parameters/group_offset"
          },
          {
            "$ref": "#/components/parameters/group_sortBy"
          },
          {
            "$ref": "#/components/parameters/group_sortOrder"
          },
          {
            "$ref": "#/components/parameters/group_fields"
          },
          {
            "$ref": "#/components/parameters/group_dateField"
          },
          {
            "$ref": "#/components/parameters/group_dateFrom"
          },
          {
            "$ref": "#/components/parameters/group_dateTo"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "items": {
                      "description": "An array of group resource.",
                      "items": {
                        "$ref": "#/components/schemas/group"
                      },
                      "type": "array"
                    },
                    "totalResults": {
                      "description": " The total number of groups.",
                      "type": "integer"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "No Errors."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Bad request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Invalid login"
          },
          "403": {
            "description": "Do not have permission to retrieve the requested user's groups."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "User not found."
          }
        },
        "security": [
          {
            "mtauth": []
          }
        ],
        "summary": "Retrieve a list of groups",
        "tags": [
          "Users",
          "Groups"
        ]
      }
    },
    "/users/{user_id}/permissions": {
      "get": {
        "description": "- Authentication is required\n- If you want to get others list, you should have Administer privilege.\n",
        "parameters": [
          {
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/permission_limit"
          },
          {
            "$ref": "#/components/parameters/permission_offset"
          },
          {
            "$ref": "#/components/parameters/permission_sortBy"
          },
          {
            "$ref": "#/components/parameters/permission_sortOrder"
          },
          {
            "$ref": "#/components/parameters/permission_fields"
          },
          {
            "$ref": "#/components/parameters/permission_blogIds"
          },
          {
            "$ref": "#/components/parameters/permission_dateField"
          },
          {
            "$ref": "#/components/parameters/permission_dateFrom"
          },
          {
            "$ref": "#/components/parameters/permission_dateTo"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "items": {
                      "description": "An array of permission resource.",
                      "items": {
                        "$ref": "#/components/schemas/permission"
                      },
                      "type": "array"
                    },
                    "totalResults": {
                      "description": " The total number of permissions.",
                      "type": "integer"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "No Errors."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Bad request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Invalid login"
          },
          "403": {
            "description": "Do not have permission to retrieve the requested user's permissions."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Site or User not found."
          }
        },
        "security": [
          {
            "mtauth": []
          }
        ],
        "summary": "Retrieve a list of permissions for user",
        "tags": [
          "Users",
          "Permissions"
        ]
      }
    },
    "/users/{user_id}/permissions/grant": {
      "post": {
        "description": "- Authentication is required\n- You should have revoke_role(Need revoke_administer_role when granting role having administer_blog )\n",
        "parameters": [
          {
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "properties": {
                  "role_id": {
                    "description": "The role ID",
                    "type": "integer"
                  },
                  "site_id": {
                    "description": "The site ID",
                    "type": "integer"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "status": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "No Errors."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Bad request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Invalid login"
          },
          "403": {
            "description": "Do not have permission to grant a permission."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Site or Role or User not found"
          }
        },
        "security": [
          {
            "mtauth": []
          }
        ],
        "summary": "Grant permissions to user",
        "tags": [
          "Users",
          "Permissions"
        ]
      }
    },
    "/users/{user_id}/permissions/revoke": {
      "post": {
        "description": "- Authentication is required\n- You should have revoke_role(Need revoke_administer_role when granting role having administer_blog )\n",
        "parameters": [
          {
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "properties": {
                  "role_id": {
                    "description": "The role ID",
                    "type": "integer"
                  },
                  "site_id": {
                    "description": "The site ID",
                    "type": "integer"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "status": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "No Errors."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Bad request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Invalid login"
          },
          "403": {
            "description": "Do not have permission to revoke a permission."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Site or Role or User not found"
          }
        },
        "security": [
          {
            "mtauth": []
          }
        ],
        "summary": "Revoke permissions from user",
        "tags": [
          "Users",
          "Permissions"
        ]
      }
    },
    "/users/{user_id}/recover_password": {
      "post": {
        "description": "- Authentication is required.\n\n#### Permissions\n\n- administer\n",
        "parameters": [
          {
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "status": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "No Errors."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Bad request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Invalid login"
          },
          "403": {
            "description": "Do not have permission to recover password for user."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Site or User not found"
          }
        },
        "security": [
          {
            "mtauth": []
          }
        ],
        "summary": "Send the link for password recovery to specified user by email",
        "tags": [
          "Users"
        ]
      }
    },
    "/users/{user_id}/sites": {
      "get": {
        "description": "Retrieve a list of blogs by user.",
        "parameters": [
          {
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Input `MTAuth accessToken={accessToken}`",
            "in": "header",
            "name": "X-MT-Authorization",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "This is an optional parameter. Maximum number of blogs to retrieve. Default is 25. ",
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "This is an optional parameter. 0-indexed offset. Default is 0.",
            "in": "query",
            "name": "offset",
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "This is an optional parameter.\n\n#### name\n\n(default) Sort by the name of each blogs.\n\n#### created_on\n\nSort by the created time of each blogs.\n",
            "in": "query",
            "name": "sortBy",
            "schema": {
              "enum": [
                "name",
                "created_on"
              ],
              "type": "string"
            }
          },
          {
            "description": "This is an optional parameter.\n\n#### ascend\n\n(default) Return blogs in ascending order. For the date, it means from oldest to newset.\n\n#### descend\n\nReturn blogs in descending order. For the date, it means from newest to oldest.\n",
            "in": "query",
            "name": "sortOrder",
            "schema": {
              "enum": [
                "ascend",
                "descend"
              ],
              "type": "string"
            }
          },
          {
            "description": "This is an optional parameter. The comma separated ID list of blogs to include to result. ",
            "in": "query",
            "name": "includeIds",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "This is an optional parameter. The comma separated ID list of blogs to exclude from result. ",
            "in": "query",
            "name": "excludeIds",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "This is an optional parameter. the field list to retrieve as part of the Blogs resource. That list should be separated by comma. If this parameter is not specified, All fields will be returned.",
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/site_dateField"
          },
          {
            "$ref": "#/components/parameters/site_dateFrom"
          },
          {
            "$ref": "#/components/parameters/site_dateTo"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "items": {
                      "description": "An array of Blogs resource. The list will sorted descending by blog name. ",
                      "items": {
                        "$ref": "#/components/schemas/blog"
                      },
                      "type": "array"
                    },
                    "totalResults": {
                      "description": "The total number of blogs found. ",
                      "type": "integer"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Bad request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Invalid login"
          },
          "403": {
            "description": "Do not have permission to retrieve the list of blogs."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Not Found"
          }
        },
        "summary": "Retrieve a list of blogs by user",
        "tags": [
          "Users",
          "Sites"
        ]
      }
    },
    "/users/{user_id}/unlock": {
      "post": {
        "description": "- Authentication is required.\n\n#### Permissions\n\n- administer\n",
        "parameters": [
          {
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "status": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "No Errors."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Bad request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Invalid login"
          },
          "403": {
            "description": "Do not have permission to unlock a user."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Site or User not found"
          }
        },
        "security": [
          {
            "mtauth": []
          }
        ],
        "summary": "Unlock user account",
        "tags": [
          "Users"
        ]
      }
    },
    "/version": {
      "get": {
        "description": "Retrieves Data API version of the server.\n\n**This endpoint has been available since Movable Type 6.2.4.**\n\nThis endpoint does not need /v3 or something API endpoint version identifier.\nYou can call like: `https://host/path/your-mt-data-api.cgi/version`\n",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "apiVersion": {
                      "format": "float",
                      "type": "number"
                    },
                    "endpointVersion": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Bad request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorContent"
                }
              }
            },
            "description": "Invalid login"
          }
        },
        "summary": "Get server API version",
        "tags": [
          "Common API"
        ]
      }
    }
  },
  "servers": [
    {
      "url": "https://example.com/mt/mt-data-api.cgi/v1"
    }
  ],
  "tags": [
    {
      "name": "Authentication"
    },
    {
      "name": "Common API"
    },
    {
      "name": "Endpoints"
    }
  ]
}